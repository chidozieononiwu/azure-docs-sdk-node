### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.Serializer'
    name: Serializer
    fullName: Serializer
    children:
      - '@azure/abort-controller.Serializer.deserialize'
      - '@azure/abort-controller.Serializer.isXML'
      - '@azure/abort-controller.Serializer.modelMappers'
      - '@azure/abort-controller.Serializer.serialize'
      - '@azure/abort-controller.Serializer.constructor'
      - '@azure/abort-controller.Serializer.validateConstraints'
    langs:
      - typeScript
    type: class
    summary: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Serializer.deserialize'
    name: 'deserialize(Mapper, any, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deserialize the given object based on its metadata defined in the mapper
    syntax:
      content: >-
        function deserialize(mapper: Mapper, responseBody: any, objectName:
        string)
      parameters:
        - id: mapper
          type:
            - '@azure/abort-controller.Mapper'
          description: |
            The mapper which defines the metadata of the serializable object
        - id: responseBody
          type:
            - any
          description: |
            A valid Javascript entity to be deserialized
        - id: objectName
          type:
            - string
          description: |
            Name of the deserialized object
      return:
        type:
          - any
        description: A valid deserialized Javascript object
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Serializer.isXML'
    name: isXML
    fullName: isXML
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'public isXML?: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Serializer.modelMappers'
    name: modelMappers
    fullName: modelMappers
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'public modelMappers: [key: string]: any'
      return:
        type:
          - '[key: string]: any'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Serializer.serialize'
    name: 'serialize(Mapper, any, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Serialize the given object based on its metadata defined in the mapper
    syntax:
      content: 'function serialize(mapper: Mapper, object: any, objectName?: string)'
      parameters:
        - id: mapper
          type:
            - '@azure/abort-controller.Mapper'
          description: |
            The mapper which defines the metadata of the serializable object
        - id: object
          type:
            - any
          description: |
            A valid Javascript object to be serialized
        - id: objectName
          type:
            - string
          description: |
            Name of the serialized object
          optional: true
      return:
        type:
          - any
        description: A valid serialized Javascript object
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Serializer.constructor'
    name: 'Serializer([key: string]: any, boolean)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Serializer(modelMappers: [key: string]: any, isXML?: boolean)'
      parameters:
        - id: modelMappers
          type:
            - '[key: string]: any'
          description: ''
        - id: isXML
          type:
            - boolean
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Serializer.validateConstraints'
    name: 'validateConstraints(Mapper, any, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function validateConstraints(mapper: Mapper, value: any, objectName:
        string)
      parameters:
        - id: mapper
          type:
            - '@azure/abort-controller.Mapper'
          description: ''
        - id: value
          type:
            - any
          description: ''
        - id: objectName
          type:
            - string
          description: ''
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.Mapper'
    name: Mapper
    spec.typeScript:
      - name: Mapper
        fullName: Mapper
        uid: '@azure/abort-controller.Mapper'
