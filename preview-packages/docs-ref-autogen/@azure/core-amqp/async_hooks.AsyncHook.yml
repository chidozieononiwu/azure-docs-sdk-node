### YamlMime:UniversalReference
items:
  - uid: tslib.async_hooks.AsyncHook
    name: AsyncHook
    fullName: AsyncHook
    children:
      - tslib.async_hooks.AsyncHook.disable
      - tslib.async_hooks.AsyncHook.enable
    langs:
      - typeScript
    type: interface
    summary: ''
    package: tslib
  - uid: tslib.async_hooks.AsyncHook.disable
    name: disable()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disable the callbacks for a given AsyncHook instance from the global pool
      of AsyncHook callbacks to be executed. Once a hook has been disabled it
      will not be called again until enabled.
    syntax:
      content: function disable()
      parameters: []
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.async_hooks.AsyncHook.enable
    name: enable()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enable the callbacks for a given AsyncHook instance. If no callbacks are
      provided enabling is a noop.
    syntax:
      content: function enable()
      parameters: []
      return:
        type:
          - this
        description: ''
    package: tslib
references:
  - uid: number | tslib.async_hooks.AsyncResourceOptions
    name: AsyncResourceOptions
    spec.typeScript:
      - name: 'number | '
        fullName: 'number | '
      - name: AsyncResourceOptions
        fullName: AsyncResourceOptions
        uid: tslib.async_hooks.AsyncResourceOptions
  - uid: tslib.async_hooks.HookCallbacks
    name: HookCallbacks
    spec.typeScript:
      - name: HookCallbacks
        fullName: HookCallbacks
        uid: tslib.async_hooks.HookCallbacks
  - uid: tslib.async_hooks.AsyncHook
    name: AsyncHook
    spec.typeScript:
      - name: AsyncHook
        fullName: AsyncHook
        uid: tslib.async_hooks.AsyncHook
