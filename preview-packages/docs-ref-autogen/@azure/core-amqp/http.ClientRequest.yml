### YamlMime:UniversalReference
items:
  - uid: tslib.http.ClientRequest
    name: ClientRequest
    fullName: ClientRequest
    children:
      - tslib.http.ClientRequest.abort
      - tslib.http.ClientRequest.aborted
      - tslib.http.ClientRequest.addListener
      - tslib.http.ClientRequest.addListener_8
      - tslib.http.ClientRequest.addListener_1
      - tslib.http.ClientRequest.addListener_2
      - tslib.http.ClientRequest.addListener_9
      - tslib.http.ClientRequest.addListener_10
      - tslib.http.ClientRequest.addListener_11
      - tslib.http.ClientRequest.addListener_3
      - tslib.http.ClientRequest.addListener_12
      - tslib.http.ClientRequest.addListener_4
      - tslib.http.ClientRequest.addListener_5
      - tslib.http.ClientRequest.addListener_6
      - tslib.http.ClientRequest.addListener_13
      - tslib.http.ClientRequest.addListener_7
      - tslib.http.ClientRequest.addListener_14
      - tslib.http.ClientRequest.addTrailers
      - tslib.http.ClientRequest.chunkedEncoding
      - tslib.http.ClientRequest.constructor
      - tslib.http.ClientRequest.connection
      - tslib.http.ClientRequest.cork
      - tslib.http.ClientRequest.destroy
      - tslib.http.ClientRequest.destroyed
      - tslib.http.ClientRequest.emit
      - tslib.http.ClientRequest.emit_1
      - tslib.http.ClientRequest.emit_2
      - tslib.http.ClientRequest.emit_3
      - tslib.http.ClientRequest.emit_4
      - tslib.http.ClientRequest.emit_5
      - tslib.http.ClientRequest.emit_6
      - tslib.http.ClientRequest.end_2
      - tslib.http.ClientRequest.end_1
      - tslib.http.ClientRequest.end
      - tslib.http.ClientRequest.eventNames
      - tslib.http.ClientRequest.finished
      - tslib.http.ClientRequest.flushHeaders
      - tslib.http.ClientRequest.getHeader
      - tslib.http.ClientRequest.getHeaderNames
      - tslib.http.ClientRequest.getHeaders
      - tslib.http.ClientRequest.getMaxListeners
      - tslib.http.ClientRequest.hasHeader
      - tslib.http.ClientRequest.headersSent
      - tslib.http.ClientRequest.listenerCount
      - tslib.http.ClientRequest.listeners
      - tslib.http.ClientRequest.method
      - tslib.http.ClientRequest.off
      - tslib.http.ClientRequest.on
      - tslib.http.ClientRequest.on_8
      - tslib.http.ClientRequest.on_1
      - tslib.http.ClientRequest.on_2
      - tslib.http.ClientRequest.on_9
      - tslib.http.ClientRequest.on_10
      - tslib.http.ClientRequest.on_11
      - tslib.http.ClientRequest.on_3
      - tslib.http.ClientRequest.on_12
      - tslib.http.ClientRequest.on_4
      - tslib.http.ClientRequest.on_5
      - tslib.http.ClientRequest.on_6
      - tslib.http.ClientRequest.on_13
      - tslib.http.ClientRequest.on_7
      - tslib.http.ClientRequest.on_14
      - tslib.http.ClientRequest.once
      - tslib.http.ClientRequest.once_8
      - tslib.http.ClientRequest.once_1
      - tslib.http.ClientRequest.once_2
      - tslib.http.ClientRequest.once_9
      - tslib.http.ClientRequest.once_10
      - tslib.http.ClientRequest.once_11
      - tslib.http.ClientRequest.once_3
      - tslib.http.ClientRequest.once_12
      - tslib.http.ClientRequest.once_4
      - tslib.http.ClientRequest.once_5
      - tslib.http.ClientRequest.once_6
      - tslib.http.ClientRequest.once_13
      - tslib.http.ClientRequest.once_7
      - tslib.http.ClientRequest.once_14
      - tslib.http.ClientRequest.onSocket
      - tslib.http.ClientRequest.path
      - tslib.http.ClientRequest.pipe
      - tslib.http.ClientRequest.prependListener
      - tslib.http.ClientRequest.prependListener_8
      - tslib.http.ClientRequest.prependListener_1
      - tslib.http.ClientRequest.prependListener_2
      - tslib.http.ClientRequest.prependListener_9
      - tslib.http.ClientRequest.prependListener_10
      - tslib.http.ClientRequest.prependListener_11
      - tslib.http.ClientRequest.prependListener_3
      - tslib.http.ClientRequest.prependListener_12
      - tslib.http.ClientRequest.prependListener_4
      - tslib.http.ClientRequest.prependListener_5
      - tslib.http.ClientRequest.prependListener_6
      - tslib.http.ClientRequest.prependListener_13
      - tslib.http.ClientRequest.prependListener_7
      - tslib.http.ClientRequest.prependListener_14
      - tslib.http.ClientRequest.prependOnceListener
      - tslib.http.ClientRequest.prependOnceListener_8
      - tslib.http.ClientRequest.prependOnceListener_1
      - tslib.http.ClientRequest.prependOnceListener_2
      - tslib.http.ClientRequest.prependOnceListener_9
      - tslib.http.ClientRequest.prependOnceListener_10
      - tslib.http.ClientRequest.prependOnceListener_11
      - tslib.http.ClientRequest.prependOnceListener_3
      - tslib.http.ClientRequest.prependOnceListener_12
      - tslib.http.ClientRequest.prependOnceListener_4
      - tslib.http.ClientRequest.prependOnceListener_5
      - tslib.http.ClientRequest.prependOnceListener_6
      - tslib.http.ClientRequest.prependOnceListener_13
      - tslib.http.ClientRequest.prependOnceListener_7
      - tslib.http.ClientRequest.prependOnceListener_14
      - tslib.http.ClientRequest.rawListeners
      - tslib.http.ClientRequest.removeAllListeners
      - tslib.http.ClientRequest.removeHeader
      - tslib.http.ClientRequest.removeListener
      - tslib.http.ClientRequest.removeListener_1
      - tslib.http.ClientRequest.removeListener_2
      - tslib.http.ClientRequest.removeListener_3
      - tslib.http.ClientRequest.removeListener_4
      - tslib.http.ClientRequest.removeListener_5
      - tslib.http.ClientRequest.removeListener_6
      - tslib.http.ClientRequest.sendDate
      - tslib.http.ClientRequest.setDefaultEncoding
      - tslib.http.ClientRequest.setHeader
      - tslib.http.ClientRequest.setMaxListeners
      - tslib.http.ClientRequest.setNoDelay
      - tslib.http.ClientRequest.setSocketKeepAlive
      - tslib.http.ClientRequest.setTimeout
      - tslib.http.ClientRequest.shouldKeepAlive
      - tslib.http.ClientRequest.socket
      - tslib.http.ClientRequest.uncork
      - tslib.http.ClientRequest.upgrading
      - tslib.http.ClientRequest.useChunkedEncodingByDefault
      - tslib.http.ClientRequest.writable
      - tslib.http.ClientRequest.writableCorked
      - tslib.http.ClientRequest.writableEnded
      - tslib.http.ClientRequest.writableFinished
      - tslib.http.ClientRequest.writableHighWaterMark
      - tslib.http.ClientRequest.writableLength
      - tslib.http.ClientRequest.writableObjectMode
      - tslib.http.ClientRequest.write_1
      - tslib.http.ClientRequest.write
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: tslib.http.OutgoingMessage
    package: tslib
  - uid: tslib.http.ClientRequest.abort
    name: abort()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function abort()
      parameters: []
    package: tslib
  - uid: tslib.http.ClientRequest.aborted
    name: aborted
    fullName: aborted
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'aborted: number'
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener
    name: 'addListener("abort", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "abort", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"abort"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_8
    name: 'addListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_1
    name: >-
      addListener("connect", (response: IncomingMessage, socket: Socket, head:
      Buffer) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "connect", listener: (response:
        IncomingMessage, socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"connect"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_2
    name: 'addListener("continue", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "continue", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_9
    name: 'addListener("drain", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "drain", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_10
    name: 'addListener("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_11
    name: 'addListener("finish", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "finish", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_3
    name: 'addListener("information", (info: InformationEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "information", listener: (info:
        InformationEvent) => void)
      parameters:
        - id: event
          type:
            - '"information"'
          description: ''
        - id: listener
          type:
            - '(info: InformationEvent) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_12
    name: 'addListener("pipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "pipe", listener: (src: stream.Readable) =>
        void)
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_4
    name: 'addListener("response", (response: IncomingMessage) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "response", listener: (response:
        IncomingMessage) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_5
    name: 'addListener("socket", (socket: Socket) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "socket", listener: (socket: Socket) =>
        void)
      parameters:
        - id: event
          type:
            - '"socket"'
          description: ''
        - id: listener
          type:
            - '(socket: Socket) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_6
    name: 'addListener("timeout", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "timeout", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"timeout"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_13
    name: 'addListener("unpipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "unpipe", listener: (src: stream.Readable)
        => void)
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_7
    name: >-
      addListener("upgrade", (response: IncomingMessage, socket: Socket, head:
      Buffer) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "upgrade", listener: (response:
        IncomingMessage, socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"upgrade"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addListener_14
    name: 'addListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.addTrailers
    name: addTrailers(OutgoingHttpHeaders | Array<Object>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addTrailers(headers: OutgoingHttpHeaders | Array<Object>)'
      parameters:
        - id: headers
          type:
            - tslib.http.OutgoingHttpHeaders | Array<Object>
          description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.chunkedEncoding
    name: chunkedEncoding
    fullName: chunkedEncoding
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'chunkedEncoding: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.constructor
    name: >-
      ClientRequest(string | URL | ClientRequestArgs, undefined | (res:
      IncomingMessage) => void)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new ClientRequest(url: string | URL | ClientRequestArgs, cb?: undefined
        | (res: IncomingMessage) => void)
      parameters:
        - id: url
          type:
            - string | tslib.url.URL | tslib.http.ClientRequestArgs
          description: ''
        - id: cb
          type:
            - 'undefined | (res: IncomingMessage) => void'
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.connection
    name: connection
    fullName: connection
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'connection: Socket'
      return:
        type:
          - tslib.net.Socket
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.cork
    name: cork()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function cork()
      parameters: []
    package: tslib
  - uid: tslib.http.ClientRequest.destroy
    name: destroy(Error)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function destroy(error?: Error)'
      parameters:
        - id: error
          type:
            - tslib.AbortError.Error
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.destroyed
    name: destroyed
    fullName: destroyed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'destroyed: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit
    name: emit("close")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "close")'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit_1
    name: emit("drain")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "drain")'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit_2
    name: 'emit("error", Error)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "error", err: Error)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: err
          type:
            - Error
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit_3
    name: emit("finish")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "finish")'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit_4
    name: 'emit("pipe", Readable)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "pipe", src: Readable)'
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: src
          type:
            - tslib.stream.internal.Readable
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit_5
    name: 'emit("unpipe", Readable)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "unpipe", src: Readable)'
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: src
          type:
            - tslib.stream.internal.Readable
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.emit_6
    name: 'emit(string | symbol, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.end_2
    name: 'end(any, string, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function end(chunk: any, encoding: string, cb?: undefined | () => void)'
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: encoding
          type:
            - string
          description: ''
        - id: cb
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.end_1
    name: 'end(any, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function end(chunk: any, cb?: undefined | () => void)'
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: cb
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.end
    name: end(undefined | () => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function end(cb?: undefined | () => void)'
      parameters:
        - id: cb
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.eventNames
    name: eventNames()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function eventNames()
      parameters: []
      return:
        type:
          - Array<string | symbol>
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.finished
    name: finished
    fullName: finished
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'finished: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
    deprecated:
      content: Use `writableEnded` instead.
  - uid: tslib.http.ClientRequest.flushHeaders
    name: flushHeaders()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function flushHeaders()
      parameters: []
    package: tslib
  - uid: tslib.http.ClientRequest.getHeader
    name: getHeader(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getHeader(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
      return:
        type:
          - 'number | string | string[] | undefined'
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.getHeaderNames
    name: getHeaderNames()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getHeaderNames()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.getHeaders
    name: getHeaders()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getHeaders()
      parameters: []
      return:
        type:
          - tslib.http.OutgoingHttpHeaders
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.getMaxListeners
    name: getMaxListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMaxListeners()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.hasHeader
    name: hasHeader(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function hasHeader(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.headersSent
    name: headersSent
    fullName: headersSent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'headersSent: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.listenerCount
    name: listenerCount(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listenerCount(type: string | symbol)'
      parameters:
        - id: type
          type:
            - string | symbol
          description: ''
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.listeners
    name: listeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.method
    name: method
    fullName: method
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'method: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.off
    name: 'off(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function off(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on
    name: 'on("abort", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "abort", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"abort"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_8
    name: 'on("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_1
    name: >-
      on("connect", (response: IncomingMessage, socket: Socket, head: Buffer) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "connect", listener: (response: IncomingMessage,
        socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"connect"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_2
    name: 'on("continue", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "continue", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_9
    name: 'on("drain", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "drain", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_10
    name: 'on("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_11
    name: 'on("finish", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "finish", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_3
    name: 'on("information", (info: InformationEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "information", listener: (info: InformationEvent) =>
        void)
      parameters:
        - id: event
          type:
            - '"information"'
          description: ''
        - id: listener
          type:
            - '(info: InformationEvent) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_12
    name: 'on("pipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "pipe", listener: (src: stream.Readable) => void)'
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_4
    name: 'on("response", (response: IncomingMessage) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "response", listener: (response: IncomingMessage) =>
        void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_5
    name: 'on("socket", (socket: Socket) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "socket", listener: (socket: Socket) => void)'
      parameters:
        - id: event
          type:
            - '"socket"'
          description: ''
        - id: listener
          type:
            - '(socket: Socket) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_6
    name: 'on("timeout", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "timeout", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"timeout"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_13
    name: 'on("unpipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "unpipe", listener: (src: stream.Readable) => void)'
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_7
    name: >-
      on("upgrade", (response: IncomingMessage, socket: Socket, head: Buffer) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "upgrade", listener: (response: IncomingMessage,
        socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"upgrade"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.on_14
    name: 'on(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once
    name: 'once("abort", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "abort", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"abort"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_8
    name: 'once("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_1
    name: >-
      once("connect", (response: IncomingMessage, socket: Socket, head: Buffer)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "connect", listener: (response: IncomingMessage,
        socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"connect"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_2
    name: 'once("continue", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "continue", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_9
    name: 'once("drain", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "drain", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_10
    name: 'once("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_11
    name: 'once("finish", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "finish", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_3
    name: 'once("information", (info: InformationEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "information", listener: (info: InformationEvent)
        => void)
      parameters:
        - id: event
          type:
            - '"information"'
          description: ''
        - id: listener
          type:
            - '(info: InformationEvent) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_12
    name: 'once("pipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "pipe", listener: (src: stream.Readable) => void)'
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_4
    name: 'once("response", (response: IncomingMessage) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "response", listener: (response: IncomingMessage)
        => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_5
    name: 'once("socket", (socket: Socket) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "socket", listener: (socket: Socket) => void)'
      parameters:
        - id: event
          type:
            - '"socket"'
          description: ''
        - id: listener
          type:
            - '(socket: Socket) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_6
    name: 'once("timeout", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "timeout", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"timeout"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_13
    name: 'once("unpipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "unpipe", listener: (src: stream.Readable) => void)'
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_7
    name: >-
      once("upgrade", (response: IncomingMessage, socket: Socket, head: Buffer)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "upgrade", listener: (response: IncomingMessage,
        socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"upgrade"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.once_14
    name: 'once(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.onSocket
    name: onSocket(Socket)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function onSocket(socket: Socket)'
      parameters:
        - id: socket
          type:
            - tslib.net.Socket
          description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.path
    name: path
    fullName: path
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'path: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.pipe
    name: 'pipe(T, undefined | Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function pipe<T>(destination: T, options?: undefined | Object)'
      parameters:
        - id: destination
          type:
            - T
          description: ''
        - id: options
          type:
            - undefined | Object
          description: ''
          optional: true
      return:
        type:
          - T
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener
    name: 'prependListener("abort", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "abort", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"abort"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_8
    name: 'prependListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_1
    name: >-
      prependListener("connect", (response: IncomingMessage, socket: Socket,
      head: Buffer) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "connect", listener: (response:
        IncomingMessage, socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"connect"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_2
    name: 'prependListener("continue", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "continue", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_9
    name: 'prependListener("drain", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "drain", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_10
    name: 'prependListener("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_11
    name: 'prependListener("finish", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "finish", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_3
    name: 'prependListener("information", (info: InformationEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "information", listener: (info:
        InformationEvent) => void)
      parameters:
        - id: event
          type:
            - '"information"'
          description: ''
        - id: listener
          type:
            - '(info: InformationEvent) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_12
    name: 'prependListener("pipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "pipe", listener: (src: stream.Readable)
        => void)
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_4
    name: 'prependListener("response", (response: IncomingMessage) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "response", listener: (response:
        IncomingMessage) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_5
    name: 'prependListener("socket", (socket: Socket) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "socket", listener: (socket: Socket) =>
        void)
      parameters:
        - id: event
          type:
            - '"socket"'
          description: ''
        - id: listener
          type:
            - '(socket: Socket) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_6
    name: 'prependListener("timeout", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "timeout", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"timeout"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_13
    name: 'prependListener("unpipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "unpipe", listener: (src:
        stream.Readable) => void)
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_7
    name: >-
      prependListener("upgrade", (response: IncomingMessage, socket: Socket,
      head: Buffer) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "upgrade", listener: (response:
        IncomingMessage, socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"upgrade"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependListener_14
    name: 'prependListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener
    name: 'prependOnceListener("abort", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "abort", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"abort"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_8
    name: 'prependOnceListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_1
    name: >-
      prependOnceListener("connect", (response: IncomingMessage, socket: Socket,
      head: Buffer) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "connect", listener: (response:
        IncomingMessage, socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"connect"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_2
    name: 'prependOnceListener("continue", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "continue", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_9
    name: 'prependOnceListener("drain", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "drain", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_10
    name: 'prependOnceListener("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "error", listener: (err: Error) =>
        void)
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_11
    name: 'prependOnceListener("finish", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "finish", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_3
    name: 'prependOnceListener("information", (info: InformationEvent) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "information", listener: (info:
        InformationEvent) => void)
      parameters:
        - id: event
          type:
            - '"information"'
          description: ''
        - id: listener
          type:
            - '(info: InformationEvent) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_12
    name: 'prependOnceListener("pipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "pipe", listener: (src:
        stream.Readable) => void)
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_4
    name: 'prependOnceListener("response", (response: IncomingMessage) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "response", listener: (response:
        IncomingMessage) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_5
    name: 'prependOnceListener("socket", (socket: Socket) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "socket", listener: (socket: Socket)
        => void)
      parameters:
        - id: event
          type:
            - '"socket"'
          description: ''
        - id: listener
          type:
            - '(socket: Socket) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_6
    name: 'prependOnceListener("timeout", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "timeout", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"timeout"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_13
    name: 'prependOnceListener("unpipe", (src: stream.Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "unpipe", listener: (src:
        stream.Readable) => void)
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: listener
          type:
            - '(src: stream.Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_7
    name: >-
      prependOnceListener("upgrade", (response: IncomingMessage, socket: Socket,
      head: Buffer) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "upgrade", listener: (response:
        IncomingMessage, socket: Socket, head: Buffer) => void)
      parameters:
        - id: event
          type:
            - '"upgrade"'
          description: ''
        - id: listener
          type:
            - '(response: IncomingMessage, socket: Socket, head: Buffer) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.prependOnceListener_14
    name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.rawListeners
    name: rawListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rawListeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeAllListeners
    name: removeAllListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeHeader
    name: removeHeader(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeHeader(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener
    name: 'removeListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener_1
    name: 'removeListener("drain", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "drain", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"drain"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener_2
    name: 'removeListener("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener_3
    name: 'removeListener("finish", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "finish", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"finish"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener_4
    name: 'removeListener("pipe", (src: Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: "pipe", listener: (src: Readable) =>
        void)
      parameters:
        - id: event
          type:
            - '"pipe"'
          description: ''
        - id: listener
          type:
            - '(src: Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener_5
    name: 'removeListener("unpipe", (src: Readable) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: "unpipe", listener: (src: Readable) =>
        void)
      parameters:
        - id: event
          type:
            - '"unpipe"'
          description: ''
        - id: listener
          type:
            - '(src: Readable) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.removeListener_6
    name: 'removeListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.sendDate
    name: sendDate
    fullName: sendDate
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sendDate: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.setDefaultEncoding
    name: setDefaultEncoding(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setDefaultEncoding(encoding: string)'
      parameters:
        - id: encoding
          type:
            - string
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.setHeader
    name: 'setHeader(string, number | string | string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setHeader(name: string, value: number | string | string[])'
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: value
          type:
            - 'number | string | string[]'
          description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.setMaxListeners
    name: setMaxListeners(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type:
            - number
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.setNoDelay
    name: setNoDelay(undefined | false | true)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setNoDelay(noDelay?: undefined | false | true)'
      parameters:
        - id: noDelay
          type:
            - undefined | false | true
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.setSocketKeepAlive
    name: 'setSocketKeepAlive(undefined | false | true, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setSocketKeepAlive(enable?: undefined | false | true,
        initialDelay?: undefined | number)
      parameters:
        - id: enable
          type:
            - undefined | false | true
          description: ''
          optional: true
        - id: initialDelay
          type:
            - undefined | number
          description: ''
          optional: true
    package: tslib
  - uid: tslib.http.ClientRequest.setTimeout
    name: 'setTimeout(number, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setTimeout(timeout: number, callback?: undefined | () => void)'
      parameters:
        - id: timeout
          type:
            - number
          description: ''
        - id: callback
          type:
            - undefined | () => void
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.shouldKeepAlive
    name: shouldKeepAlive
    fullName: shouldKeepAlive
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'shouldKeepAlive: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.socket
    name: socket
    fullName: socket
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'socket: Socket'
      return:
        type:
          - tslib.net.Socket
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.uncork
    name: uncork()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function uncork()
      parameters: []
    package: tslib
  - uid: tslib.http.ClientRequest.upgrading
    name: upgrading
    fullName: upgrading
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'upgrading: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.useChunkedEncodingByDefault
    name: useChunkedEncodingByDefault
    fullName: useChunkedEncodingByDefault
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'useChunkedEncodingByDefault: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writable
    name: writable
    fullName: writable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writable: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writableCorked
    name: writableCorked
    fullName: writableCorked
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableCorked: number'
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writableEnded
    name: writableEnded
    fullName: writableEnded
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableEnded: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writableFinished
    name: writableFinished
    fullName: writableFinished
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableFinished: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writableHighWaterMark
    name: writableHighWaterMark
    fullName: writableHighWaterMark
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableHighWaterMark: number'
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writableLength
    name: writableLength
    fullName: writableLength
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableLength: number'
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.writableObjectMode
    name: writableObjectMode
    fullName: writableObjectMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableObjectMode: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.write_1
    name: 'write(any, string, undefined | (error: Error | null | undefined) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function write(chunk: any, encoding: string, cb?: undefined | (error:
        Error | null | undefined) => void)
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: encoding
          type:
            - string
          description: ''
        - id: cb
          type:
            - 'undefined | (error: Error | null | undefined) => void'
          description: ''
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.http.ClientRequest.write
    name: 'write(any, undefined | (error: Error | null | undefined) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function write(chunk: any, cb?: undefined | (error: Error | null |
        undefined) => void)
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: cb
          type:
            - 'undefined | (error: Error | null | undefined) => void'
          description: ''
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: tslib
references:
  - uid: tslib.http.AgentOptions
    name: AgentOptions
    spec.typeScript:
      - name: AgentOptions
        fullName: AgentOptions
        uid: tslib.http.AgentOptions
  - uid: tslib.http.OutgoingMessage
    name: OutgoingMessage
    spec.typeScript:
      - name: OutgoingMessage
        fullName: OutgoingMessage
        uid: tslib.http.OutgoingMessage
  - uid: string | tslib.url.URL | tslib.http.ClientRequestArgs
    name: ClientRequestArgs
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: URL
        fullName: URL
        uid: tslib.url.URL
      - name: ' | '
        fullName: ' | '
      - name: ClientRequestArgs
        fullName: ClientRequestArgs
        uid: tslib.http.ClientRequestArgs
  - uid: tslib.net.Socket
    name: Socket
    spec.typeScript:
      - name: Socket
        fullName: Socket
        uid: tslib.net.Socket
  - uid: tslib.http.OutgoingHttpHeaders | Array<Object>
    name: OutgoingHttpHeaders | Array<Object>
    spec.typeScript:
      - name: OutgoingHttpHeaders
        fullName: OutgoingHttpHeaders
        uid: tslib.http.OutgoingHttpHeaders
      - name: ' | Array<Object>'
        fullName: ' | Array<Object>'
  - uid: tslib.AbortError.Error
    name: Error
    spec.typeScript:
      - name: Error
        fullName: Error
        uid: tslib.AbortError.Error
  - uid: tslib.stream.internal.Readable
    name: Readable
    spec.typeScript:
      - name: Readable
        fullName: Readable
        uid: tslib.stream.internal.Readable
  - uid: tslib.http.OutgoingHttpHeaders
    name: OutgoingHttpHeaders
    spec.typeScript:
      - name: OutgoingHttpHeaders
        fullName: OutgoingHttpHeaders
        uid: tslib.http.OutgoingHttpHeaders
  - uid: tslib.http.IncomingHttpHeaders
    name: IncomingHttpHeaders
    spec.typeScript:
      - name: IncomingHttpHeaders
        fullName: IncomingHttpHeaders
        uid: tslib.http.IncomingHttpHeaders
  - uid: tslib.NodeJS.WritableStream
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: tslib.NodeJS.WritableStream
  - uid: tslib.BufferEncoding
    name: BufferEncoding
    spec.typeScript:
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: tslib.BufferEncoding
  - uid: tslib.NodeJS.ReadableStream
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: tslib.NodeJS.ReadableStream
  - uid: tslib.stream.internal.ReadableOptions
    name: ReadableOptions
    spec.typeScript:
      - name: ReadableOptions
        fullName: ReadableOptions
        uid: tslib.stream.internal.ReadableOptions
  - uid: tslib.stream.internal.Writable
    name: Writable
    spec.typeScript:
      - name: Writable
        fullName: Writable
        uid: tslib.stream.internal.Writable
  - uid: tslib.http.HttpBase
    name: HttpBase
    spec.typeScript:
      - name: HttpBase
        fullName: HttpBase
        uid: tslib.http.HttpBase
  - uid: tslib.http.RequestListener
    name: RequestListener
    spec.typeScript:
      - name: RequestListener
        fullName: RequestListener
        uid: tslib.http.RequestListener
  - uid: tslib.http.ServerOptions
    name: ServerOptions
    spec.typeScript:
      - name: ServerOptions
        fullName: ServerOptions
        uid: tslib.http.ServerOptions
  - uid: tslib.net.AddressInfo | string | null
    name: AddressInfo | string | null
    spec.typeScript:
      - name: AddressInfo
        fullName: AddressInfo
        uid: tslib.net.AddressInfo
      - name: ' | string | null'
        fullName: ' | string | null'
  - uid: tslib.net.ListenOptions
    name: ListenOptions
    spec.typeScript:
      - name: ListenOptions
        fullName: ListenOptions
        uid: tslib.net.ListenOptions
  - uid: tslib.http.IncomingMessage
    name: IncomingMessage
    spec.typeScript:
      - name: IncomingMessage
        fullName: IncomingMessage
        uid: tslib.http.IncomingMessage
  - uid: tslib.http.Agent | boolean
    name: Agent | boolean
    spec.typeScript:
      - name: Agent
        fullName: Agent
        uid: tslib.http.Agent
      - name: ' | boolean'
        fullName: ' | boolean'
  - uid: tslib.http.ClientRequestArgs
    name: ClientRequestArgs
    spec.typeScript:
      - name: ClientRequestArgs
        fullName: ClientRequestArgs
        uid: tslib.http.ClientRequestArgs
  - uid: undefined | tslib.http.IncomingMessage
    name: IncomingMessage
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: IncomingMessage
        fullName: IncomingMessage
        uid: tslib.http.IncomingMessage
  - uid: undefined | tslib.http.ServerResponse
    name: ServerResponse
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: ServerResponse
        fullName: ServerResponse
        uid: tslib.http.ServerResponse
  - uid: tslib.http.Server
    name: Server
    spec.typeScript:
      - name: Server
        fullName: Server
        uid: tslib.http.Server
  - uid: tslib.http.RequestOptions | string | tslib.url.URL
    name: URL
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: tslib.http.RequestOptions
      - name: ' | string | '
        fullName: ' | string | '
      - name: URL
        fullName: URL
        uid: tslib.url.URL
  - uid: tslib.http.ClientRequest
    name: ClientRequest
    spec.typeScript:
      - name: ClientRequest
        fullName: ClientRequest
        uid: tslib.http.ClientRequest
  - uid: string | tslib.url.URL
    name: URL
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: URL
        fullName: URL
        uid: tslib.url.URL
  - uid: tslib.http.RequestOptions
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: tslib.http.RequestOptions
