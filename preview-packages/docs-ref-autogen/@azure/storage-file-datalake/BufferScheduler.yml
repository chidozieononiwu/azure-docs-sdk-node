### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.BufferScheduler'
    name: BufferScheduler
    fullName: BufferScheduler
    children:
      - '@azure/abort-controller.BufferScheduler.constructor'
      - '@azure/abort-controller.BufferScheduler.do'
    langs:
      - typeScript
    type: class
    summary: >-
      This class accepts a Node.js Readable stream as input, and keeps reading
      data

      from the stream into the internal buffer structure, until it reaches
      maxBuffers.

      Every available buffer will try to trigger outgoingHandler.

      The internal buffer structure includes an incoming buffer array, and a
      outgoing

      buffer array. The incoming buffer array includes the "empty" buffers can
      be filled

      with new incoming data. The outgoing array includes the filled buffers to
      be

      handled by outgoingHandler. Every above buffer size is defined by
      parameter bufferSize.


      NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING +
      BUFFERS_UNDER_HANDLING


      NUM_OF_ALL_BUFFERS <= maxBuffers


      PERFORMANCE IMPROVEMENT TIPS:

      1. Input stream highWaterMark is better to set a same value with
      bufferSize
         parameter, which will avoid Buffer.concat() operations.
      2. concurrency should set a smaller value than maxBuffers, which is
      helpful to
         reduce the possibility when a outgoing handler waits for the stream data.
         in this situation, outgoing handlers are blocked.
         Outgoing queue shouldn't be empty.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BufferScheduler.constructor'
    name: >-
      BufferScheduler(Readable, number, number, OutgoingHandler, number,
      undefined | string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of BufferScheduler.
    syntax:
      content: >-
        new BufferScheduler(readable: Readable, bufferSize: number, maxBuffers:
        number, outgoingHandler: OutgoingHandler, concurrency: number,
        encoding?: undefined | string)
      parameters:
        - id: readable
          type:
            - '@azure/abort-controller.stream.internal.Readable'
          description: A Node.js Readable stream
        - id: bufferSize
          type:
            - number
          description: Buffer size of every maintained buffer
        - id: maxBuffers
          type:
            - number
          description: How many buffers can be allocated
        - id: outgoingHandler
          type:
            - '@azure/abort-controller.OutgoingHandler'
          description: |-
            An async function scheduled to be
                                                     triggered when a buffer fully filled
                                                     with stream data
        - id: concurrency
          type:
            - number
          description: Concurrency of executing outgoingHandlers (>0)
        - id: encoding
          type:
            - undefined | string
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BufferScheduler.do'
    name: do()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Start the scheduler, will return error when stream of any of the
      outgoingHandlers

      returns error.
    syntax:
      content: function do()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.stream.internal.Readable'
    name: Readable
    spec.typeScript:
      - name: Readable
        fullName: Readable
        uid: '@azure/abort-controller.stream.internal.Readable'
  - uid: '@azure/abort-controller.OutgoingHandler'
    name: OutgoingHandler
    spec.typeScript:
      - name: OutgoingHandler
        fullName: OutgoingHandler
        uid: '@azure/abort-controller.OutgoingHandler'
