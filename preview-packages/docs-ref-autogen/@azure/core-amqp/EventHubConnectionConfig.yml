### YamlMime:UniversalReference
items:
  - uid: tslib.EventHubConnectionConfig
    name: EventHubConnectionConfig
    langs:
      - typeScript
    fullName: EventHubConnectionConfig
    children:
      - tslib.EventHubConnectionConfig.connectionString
      - tslib.EventHubConnectionConfig.create
      - tslib.EventHubConnectionConfig.create_1
      - tslib.EventHubConnectionConfig.createFromConnectionConfig
      - tslib.EventHubConnectionConfig.endpoint
      - tslib.EventHubConnectionConfig.entityPath
      - tslib.EventHubConnectionConfig.getManagementAddress
      - tslib.EventHubConnectionConfig.getManagementAudience
      - tslib.EventHubConnectionConfig.getReceiverAddress
      - tslib.EventHubConnectionConfig.getReceiverAudience
      - tslib.EventHubConnectionConfig.getSenderAddress
      - tslib.EventHubConnectionConfig.getSenderAudience
      - tslib.EventHubConnectionConfig.host
      - tslib.EventHubConnectionConfig.sharedAccessKey
      - tslib.EventHubConnectionConfig.sharedAccessKeyName
      - tslib.EventHubConnectionConfig.validate
      - tslib.EventHubConnectionConfig.validate_1
      - tslib.EventHubConnectionConfig.webSocket
      - tslib.EventHubConnectionConfig.webSocketConstructorOptions
      - tslib.EventHubConnectionConfig.webSocketEndpointPath
    type: module
    summary: >-
      Describes the connection config object that is created after parsing an
      EventHub connection

      string. It also provides some convenience methods for getting the address
      and audience for

      different entities.
    package: tslib
    module: EventHubConnectionConfig
  - uid: tslib.EventHubConnectionConfig.connectionString
    name: connectionString
    fullName: connectionString
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} connectionString - The connection string.'
    syntax:
      content: 'connectionString: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.create
    name: 'create(string, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates the connection config.
    syntax:
      content: 'function create(connectionString: string, path?: undefined | string)'
      parameters:
        - id: connectionString
          type:
            - string
          description: |-
            The connection string for a given service like
            EventHub/ServiceBus.
        - id: path
          type:
            - undefined | string
          description: ''
          optional: true
      return:
        type:
          - tslib.ConnectionConfig
        description: ConnectionConfig
    package: tslib
  - uid: tslib.EventHubConnectionConfig.create_1
    name: 'create(string, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates the connection config.
    syntax:
      content: 'function create(connectionString: string, path?: undefined | string)'
      parameters:
        - id: connectionString
          type:
            - string
          description: |-
            The connection string for a given service like
            EventHub/ServiceBus.
        - id: path
          type:
            - undefined | string
          description: ''
          optional: true
      return:
        type:
          - tslib.EventHubConnectionConfig
        description: EventHubConnectionConfig
    package: tslib
  - uid: tslib.EventHubConnectionConfig.createFromConnectionConfig
    name: createFromConnectionConfig(ConnectionConfig)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Creates an EventHubConnectionConfig from the provided base
      ConnectionConfig.
    syntax:
      content: 'function createFromConnectionConfig(config: ConnectionConfig)'
      parameters:
        - id: config
          type:
            - tslib.ConnectionConfig
          description: >-
            The base connection config from which the EventHubConnectionConfig
            needs to be

            created.
      return:
        type:
          - tslib.EventHubConnectionConfig
        description: EventHubConnectionConfig
    package: tslib
  - uid: tslib.EventHubConnectionConfig.endpoint
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} endpoint - The service bus endpoint
      "sb://<yournamespace>.servicebus.windows.net/".
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.entityPath
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} entityPath - The name/path of the entity (event hub name) to
      which the

      connection needs to happen.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.getManagementAddress
    name: getManagementAddress()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Provides the EventHub Management address.
      - `"<hub-name>/$management"`
    syntax:
      content: function getManagementAddress()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.getManagementAudience
    name: getManagementAudience()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Provides the EventHub Management audience.
      - `"sb://<your-namespace>.servicebus.windows.net/<hub-name>/$management"`
    syntax:
      content: function getManagementAudience()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.getReceiverAddress
    name: 'getReceiverAddress(string | number, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides the EventHub Receiver address:

      -
      `"<hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>"`
    syntax:
      content: >-
        function getReceiverAddress(partitionId: string | number,
        consumergroup?: undefined | string)
      parameters:
        - id: partitionId
          type:
            - string | number
          description: >-
            The partitionId in the EventHub from which messages will be
            received.
        - id: consumergroup
          type:
            - undefined | string
          description: |
            The consumergoup in the EventHub from which the messages will
            be received. Default: `$default`.
          optional: true
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.getReceiverAudience
    name: 'getReceiverAudience(string | number, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides the EventHub Receiver audience.

      -
      `"sb://<your-namespace>.servicebus.windows.net/<hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>"`
    syntax:
      content: >-
        function getReceiverAudience(partitionId: string | number,
        consumergroup?: undefined | string)
      parameters:
        - id: partitionId
          type:
            - string | number
          description: >-
            The partitionId in the EventHub from which messages will be
            received.
        - id: consumergroup
          type:
            - undefined | string
          description: |
            The consumergoup in the EventHub from which the messages will
            be received. Default: `$default`.
          optional: true
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.getSenderAddress
    name: getSenderAddress(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides the EventHub Sender address in one of the following forms based
      on the input:

      - `"<hubName>"`

      - `"<hubName>/Partitions/<partitionId>"`
    syntax:
      content: 'function getSenderAddress(partitionId?: string | number)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: |
            The partitionId in the EventHub to which messages will be sent.
          optional: true
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.getSenderAudience
    name: getSenderAudience(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Provides the EventHub Sender audience in one of the following forms based
      on the input:

      - `"sb://<yournamespace>.servicebus.windows.net/<hubName>"`

      -
      `"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>"`
    syntax:
      content: 'function getSenderAudience(partitionId?: string | number)'
      parameters:
        - id: partitionId
          type:
            - string | number
          description: |
            The partitionId in the EventHub to which messages will be sent.
          optional: true
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.host
    name: host
    fullName: host
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} host - The host "<yournamespace>.servicebus.windows.net".'
    syntax:
      content: 'host: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.sharedAccessKey
    name: sharedAccessKey
    fullName: sharedAccessKey
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} sharedAccessKey - The secret value of the access key.'
    syntax:
      content: 'sharedAccessKey: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.sharedAccessKeyName
    name: sharedAccessKeyName
    fullName: sharedAccessKeyName
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} sharedAccessKeyName - The name of the access key.'
    syntax:
      content: 'sharedAccessKeyName: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.validate
    name: 'validate(ConnectionConfig, ConnectionConfigOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Validates the properties of connection config.
    syntax:
      content: >-
        function validate(config: ConnectionConfig, options?:
        ConnectionConfigOptions)
      parameters:
        - id: config
          type:
            - tslib.ConnectionConfig
          description: The connection config to be validated.
        - id: options
          type:
            - tslib.ConnectionConfigOptions
          description: ''
          optional: true
    package: tslib
  - uid: tslib.EventHubConnectionConfig.validate_1
    name: validate(EventHubConnectionConfig)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validates the properties of connection config.
    syntax:
      content: 'function validate(config: EventHubConnectionConfig)'
      parameters:
        - id: config
          type:
            - tslib.EventHubConnectionConfig
          description: The connection config to be validated.
    package: tslib
  - uid: tslib.EventHubConnectionConfig.webSocket
    name: webSocket
    fullName: webSocket
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {WebSocketImpl} [webSocket] - The WebSocket constructor used to create an
      AMQP connection

      over a WebSocket. In browsers, the built-in WebSocket will be  used by
      default. In Node, a

      TCP socket will be used if a WebSocket constructor is not provided.
    optional: true
    syntax:
      content: 'webSocket?: WebSocketImpl'
      return:
        type:
          - WebSocketImpl
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.webSocketConstructorOptions
    name: webSocketConstructorOptions
    fullName: webSocketConstructorOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {any} [webSocketConstructorOptions] - Options to be passed to the
      WebSocket constructor
    optional: true
    syntax:
      content: 'webSocketConstructorOptions?: any'
      return:
        type:
          - any
        description: ''
    package: tslib
  - uid: tslib.EventHubConnectionConfig.webSocketEndpointPath
    name: webSocketEndpointPath
    fullName: webSocketEndpointPath
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} [webSocketEndpointPath] - The path for the endpoint that accepts
      an AMQP

      connection over WebSockets.
    optional: true
    syntax:
      content: 'webSocketEndpointPath?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
references:
  - uid: tslib.ConnectionConfig
    name: ConnectionConfig
    spec.typeScript:
      - name: ConnectionConfig
        fullName: ConnectionConfig
        uid: tslib.ConnectionConfig
  - uid: tslib.EventHubConnectionConfig
    name: EventHubConnectionConfig
    spec.typeScript:
      - name: EventHubConnectionConfig
        fullName: EventHubConnectionConfig
        uid: tslib.EventHubConnectionConfig
  - uid: tslib.ConnectionConfigOptions
    name: ConnectionConfigOptions
    spec.typeScript:
      - name: ConnectionConfigOptions
        fullName: ConnectionConfigOptions
        uid: tslib.ConnectionConfigOptions
  - uid: tslib.EventHubConnectionConfig.connectionString
    name: connectionString
  - uid: tslib.EventHubConnectionConfig.create
    name: create
  - uid: tslib.EventHubConnectionConfig.create_1
    name: create_1
  - uid: tslib.EventHubConnectionConfig.createFromConnectionConfig
    name: createFromConnectionConfig
  - uid: tslib.EventHubConnectionConfig.endpoint
    name: endpoint
  - uid: tslib.EventHubConnectionConfig.entityPath
    name: entityPath
  - uid: tslib.EventHubConnectionConfig.getManagementAddress
    name: getManagementAddress
  - uid: tslib.EventHubConnectionConfig.getManagementAudience
    name: getManagementAudience
  - uid: tslib.EventHubConnectionConfig.getReceiverAddress
    name: getReceiverAddress
  - uid: tslib.EventHubConnectionConfig.getReceiverAudience
    name: getReceiverAudience
  - uid: tslib.EventHubConnectionConfig.getSenderAddress
    name: getSenderAddress
  - uid: tslib.EventHubConnectionConfig.getSenderAudience
    name: getSenderAudience
  - uid: tslib.EventHubConnectionConfig.host
    name: host
  - uid: tslib.EventHubConnectionConfig.sharedAccessKey
    name: sharedAccessKey
  - uid: tslib.EventHubConnectionConfig.sharedAccessKeyName
    name: sharedAccessKeyName
  - uid: tslib.EventHubConnectionConfig.validate
    name: validate
  - uid: tslib.EventHubConnectionConfig.validate_1
    name: validate_1
  - uid: tslib.EventHubConnectionConfig.webSocket
    name: webSocket
  - uid: tslib.EventHubConnectionConfig.webSocketConstructorOptions
    name: webSocketConstructorOptions
  - uid: tslib.EventHubConnectionConfig.webSocketEndpointPath
    name: webSocketEndpointPath
