### YamlMime:UniversalReference
items:
  - uid: tslib.CbsClient
    name: CbsClient
    fullName: CbsClient
    children:
      - tslib.CbsClient.constructor
      - tslib.CbsClient.cbsLock
      - tslib.CbsClient.close
      - tslib.CbsClient.connection
      - tslib.CbsClient.connectionLock
      - tslib.CbsClient.endpoint
      - tslib.CbsClient.init
      - tslib.CbsClient.negotiateClaim
      - tslib.CbsClient.remove
      - tslib.CbsClient.replyTo
    langs:
      - typeScript
    type: class
    summary: ''
    package: tslib
  - uid: tslib.CbsClient.constructor
    name: 'CbsClient(Connection, string)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new CbsClient(connection: Connection, connectionLock: string)'
      parameters:
        - id: connection
          type:
            - Connection
          description: The AMQP conection.
        - id: connectionLock
          type:
            - string
          description: |
            A unique string (usually a guid) per connection.
    package: tslib
  - uid: tslib.CbsClient.cbsLock
    name: cbsLock
    fullName: cbsLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} cbsLock The unqiue lock name per $cbs session per connection that
      is used to

      acquire the lock for establishing a cbs session if one does not exist for
      an aqmp connection.
    syntax:
      content: 'cbsLock: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.CbsClient.close
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Closes the AMQP cbs session to the EventHub/ServiceBus for this client,
      returning a promise that will be resolved when disconnection is completed.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: tslib
  - uid: tslib.CbsClient.connection
    name: connection
    fullName: connection
    children: []
    langs:
      - typeScript
    type: property
    summary: '{Connection} connection The AMQP connection.'
    syntax:
      content: 'connection: Connection'
      return:
        type:
          - Connection
        description: ''
    package: tslib
  - uid: tslib.CbsClient.connectionLock
    name: connectionLock
    fullName: connectionLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} connectionLock The unqiue lock name per connection that is used
      to

      acquire the lock for establishing an amqp connection if one does not
      exist.
    syntax:
      content: 'connectionLock: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.CbsClient.endpoint
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: '{string} endpoint CBS endpoint - "$cbs"'
    syntax:
      content: 'endpoint: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.CbsClient.init
    name: init()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a singleton instance of the CBS session if it hasn't been
      initialized previously on

      the given connection.
    syntax:
      content: function init()
      parameters: []
      return:
        type:
          - Promise<void>
        description: Promise<void>.
    package: tslib
  - uid: tslib.CbsClient.negotiateClaim
    name: 'negotiateClaim(string, AccessToken, TokenType)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Negotiates the CBS claim with the EventHub/ServiceBus Service.
    syntax:
      content: >-
        function negotiateClaim(audience: string, tokenObject: AccessToken,
        tokenType: TokenType)
      parameters:
        - id: audience
          type:
            - string
          description: |-
            The entity token audience for which the token is requested in one
            of the following forms:

            - **ServiceBus**
               - **Sender**
                   - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
                   - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`

               - **Receiver**
                    - `"sb://<yournamespace>.servicebus.windows.net/<queue-name>"`
                    - `"sb://<yournamespace>.servicebus.windows.net/<topic-name>"`

               - **ManagementClient**
                    - `"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management"`.
                    - `"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management"`.

            - **EventHubs**
                - **Sender**
                     - `"sb://<yournamespace>.servicebus.windows.net/<hubName>"`
                     - `"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>"`.

                - **Receiver**
                    - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>"`.

                - **ManagementClient**
                    - `"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management"`.
        - id: tokenObject
          type:
            - tslib.AccessToken
          description: The token object that needs to be sent in the put-token request.
        - id: tokenType
          type:
            - tslib.TokenType
          description: ''
      return:
        type:
          - Promise<tslib.CbsResponse>
        description: |-
          Returns a Promise that resolves when $cbs authentication is successful
          and rejects when an error occurs during $cbs authentication.
    package: tslib
  - uid: tslib.CbsClient.remove
    name: remove()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Removes the AMQP cbs session to the EventHub/ServiceBus for this client,'
    syntax:
      content: function remove()
      parameters: []
    package: tslib
  - uid: tslib.CbsClient.replyTo
    name: replyTo
    fullName: replyTo
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} replyTo CBS replyTo - The reciever link name that the service
      should reply to.
    syntax:
      content: 'replyTo: string'
      return:
        type:
          - string
        description: ''
    package: tslib
references:
  - uid: tslib.AccessToken
    name: AccessToken
    spec.typeScript:
      - name: AccessToken
        fullName: AccessToken
        uid: tslib.AccessToken
  - uid: tslib.TokenType
    name: TokenType
    spec.typeScript:
      - name: TokenType
        fullName: TokenType
        uid: tslib.TokenType
  - uid: Promise<tslib.CbsResponse>
    name: CbsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CbsResponse
        fullName: CbsResponse
        uid: tslib.CbsResponse
      - name: '>'
        fullName: '>'
