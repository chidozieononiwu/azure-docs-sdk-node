### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream'
    name: ClientHttp2Stream
    fullName: ClientHttp2Stream
    children:
      - '@azure/abort-controller.http2.ClientHttp2Stream.aborted'
      - '@azure/abort-controller.http2.ClientHttp2Stream.addListener'
      - '@azure/abort-controller.http2.ClientHttp2Stream.addListener_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.addListener_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.addListener_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.addListener_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.bufferSize'
      - '@azure/abort-controller.http2.ClientHttp2Stream.constructor'
      - '@azure/abort-controller.http2.ClientHttp2Stream.close'
      - '@azure/abort-controller.http2.ClientHttp2Stream.closed'
      - '@azure/abort-controller.http2.ClientHttp2Stream.cork'
      - '@azure/abort-controller.http2.ClientHttp2Stream.destroy'
      - '@azure/abort-controller.http2.ClientHttp2Stream.destroyed'
      - '@azure/abort-controller.http2.ClientHttp2Stream.emit'
      - '@azure/abort-controller.http2.ClientHttp2Stream.emit_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.emit_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.emit_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.emit_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.end_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.end_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.end'
      - '@azure/abort-controller.http2.ClientHttp2Stream.endAfterHeaders'
      - '@azure/abort-controller.http2.ClientHttp2Stream.eventNames'
      - '@azure/abort-controller.http2.ClientHttp2Stream.from'
      - '@azure/abort-controller.http2.ClientHttp2Stream.getMaxListeners'
      - '@azure/abort-controller.http2.ClientHttp2Stream.id'
      - '@azure/abort-controller.http2.ClientHttp2Stream.isPaused'
      - '@azure/abort-controller.http2.ClientHttp2Stream.listenerCount'
      - '@azure/abort-controller.http2.ClientHttp2Stream.listeners'
      - '@azure/abort-controller.http2.ClientHttp2Stream.off'
      - '@azure/abort-controller.http2.ClientHttp2Stream.on'
      - '@azure/abort-controller.http2.ClientHttp2Stream.on_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.on_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.on_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.on_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.once'
      - '@azure/abort-controller.http2.ClientHttp2Stream.once_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.once_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.once_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.once_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.pause'
      - '@azure/abort-controller.http2.ClientHttp2Stream.pending'
      - '@azure/abort-controller.http2.ClientHttp2Stream.pipe'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependListener'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.priority'
      - '@azure/abort-controller.http2.ClientHttp2Stream.push'
      - '@azure/abort-controller.http2.ClientHttp2Stream.rawListeners'
      - '@azure/abort-controller.http2.ClientHttp2Stream.read'
      - '@azure/abort-controller.http2.ClientHttp2Stream.readable'
      - '@azure/abort-controller.http2.ClientHttp2Stream.readableHighWaterMark'
      - '@azure/abort-controller.http2.ClientHttp2Stream.readableLength'
      - '@azure/abort-controller.http2.ClientHttp2Stream.readableObjectMode'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeAllListeners'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeListener'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_2'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_4'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_3'
      - '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_5'
      - '@azure/abort-controller.http2.ClientHttp2Stream.resume'
      - '@azure/abort-controller.http2.ClientHttp2Stream.rstCode'
      - '@azure/abort-controller.http2.ClientHttp2Stream.sendTrailers'
      - '@azure/abort-controller.http2.ClientHttp2Stream.sentHeaders'
      - '@azure/abort-controller.http2.ClientHttp2Stream.sentInfoHeaders'
      - '@azure/abort-controller.http2.ClientHttp2Stream.sentTrailers'
      - '@azure/abort-controller.http2.ClientHttp2Stream.session'
      - '@azure/abort-controller.http2.ClientHttp2Stream.setDefaultEncoding'
      - '@azure/abort-controller.http2.ClientHttp2Stream.setEncoding'
      - '@azure/abort-controller.http2.ClientHttp2Stream.setMaxListeners'
      - '@azure/abort-controller.http2.ClientHttp2Stream.setTimeout'
      - '@azure/abort-controller.http2.ClientHttp2Stream.state'
      - '@azure/abort-controller.http2.ClientHttp2Stream.uncork'
      - '@azure/abort-controller.http2.ClientHttp2Stream.unpipe'
      - '@azure/abort-controller.http2.ClientHttp2Stream.unshift'
      - '@azure/abort-controller.http2.ClientHttp2Stream.wrap'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writable'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writableCorked'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writableEnded'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writableFinished'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writableHighWaterMark'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writableLength'
      - '@azure/abort-controller.http2.ClientHttp2Stream.writableObjectMode'
      - '@azure/abort-controller.http2.ClientHttp2Stream.write_1'
      - '@azure/abort-controller.http2.ClientHttp2Stream.write'
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: '@azure/abort-controller.http2.Http2Stream'
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.aborted'
    name: aborted
    fullName: aborted
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'aborted: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.addListener'
    name: 'addListener("continue", () => __type)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "continue", listener: () => __type)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => __type
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.addListener_1'
    name: >-
      addListener("headers", (headers: IncomingHttpHeaders &
      IncomingHttpStatusHeader, flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "headers", listener: (headers:
        IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"headers"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.addListener_2'
    name: 'addListener("push", (headers: IncomingHttpHeaders, flags: number) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "push", listener: (headers:
        IncomingHttpHeaders, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"push"'
          description: ''
        - id: listener
          type:
            - '(headers: IncomingHttpHeaders, flags: number) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.addListener_3'
    name: >-
      addListener("response", (headers: IncomingHttpHeaders &
      IncomingHttpStatusHeader, flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "response", listener: (headers:
        IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.addListener_4'
    name: 'addListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.bufferSize'
    name: bufferSize
    fullName: bufferSize
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'bufferSize: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.constructor'
    name: ClientHttp2Stream(DuplexOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new ClientHttp2Stream(opts?: DuplexOptions)'
      parameters:
        - id: opts
          type:
            - '@azure/abort-controller.stream.internal.DuplexOptions'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.close'
    name: 'close(undefined | number, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function close(code?: undefined | number, callback?: undefined | () =>
        void)
      parameters:
        - id: code
          type:
            - undefined | number
          description: ''
          optional: true
        - id: callback
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.closed'
    name: closed
    fullName: closed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'closed: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.cork'
    name: cork()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function cork()
      parameters: []
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.destroy'
    name: destroy(Error)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function destroy(error?: Error)'
      parameters:
        - id: error
          type:
            - '@azure/abort-controller.AbortError.Error'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.destroyed'
    name: destroyed
    fullName: destroyed
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'destroyed: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.emit'
    name: emit("continue")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "continue")'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.emit_1'
    name: 'emit("headers", IncomingHttpHeaders & IncomingHttpStatusHeader, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "headers", headers: IncomingHttpHeaders &
        IncomingHttpStatusHeader, flags: number)
      parameters:
        - id: event
          type:
            - '"headers"'
          description: ''
        - id: headers
          type:
            - >-
              @azure/abort-controller.http2.IncomingHttpHeaders &
              @azure/abort-controller.http2.IncomingHttpStatusHeader
          description: ''
        - id: flags
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.emit_2'
    name: 'emit("push", IncomingHttpHeaders, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "push", headers: IncomingHttpHeaders, flags:
        number)
      parameters:
        - id: event
          type:
            - '"push"'
          description: ''
        - id: headers
          type:
            - '@azure/abort-controller.http2.IncomingHttpHeaders'
          description: ''
        - id: flags
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.emit_3'
    name: 'emit("response", IncomingHttpHeaders & IncomingHttpStatusHeader, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "response", headers: IncomingHttpHeaders &
        IncomingHttpStatusHeader, flags: number)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: headers
          type:
            - >-
              @azure/abort-controller.http2.IncomingHttpHeaders &
              @azure/abort-controller.http2.IncomingHttpStatusHeader
          description: ''
        - id: flags
          type:
            - number
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.emit_4'
    name: 'emit(string | symbol, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.end_1'
    name: 'end(any, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function end(chunk: any, cb?: undefined | () => void)'
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: cb
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.end_2'
    name: 'end(any, undefined | string, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function end(chunk: any, encoding?: undefined | string, cb?: undefined |
        () => void)
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: encoding
          type:
            - undefined | string
          description: ''
          optional: true
        - id: cb
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.end'
    name: end(undefined | () => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function end(cb?: undefined | () => void)'
      parameters:
        - id: cb
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.endAfterHeaders'
    name: endAfterHeaders
    fullName: endAfterHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Set the true if the END_STREAM flag was set in the request or response
      HEADERS frame received,

      indicating that no additional data should be received and the readable
      side of the Http2Stream will be closed.
    syntax:
      content: 'endAfterHeaders: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.eventNames'
    name: eventNames()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function eventNames()
      parameters: []
      return:
        type:
          - Array<string | symbol>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.from'
    name: 'from(Iterable<any> | AsyncIterable<any>, ReadableOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: A utility method for creating Readable Streams out of iterators.
    syntax:
      content: >-
        static function from(iterable: Iterable<any> | AsyncIterable<any>,
        options?: ReadableOptions)
      parameters:
        - id: iterable
          type:
            - Iterable<any> | AsyncIterable<any>
          description: ''
        - id: options
          type:
            - '@azure/abort-controller.stream.internal.ReadableOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/abort-controller.stream.internal.Readable'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.getMaxListeners'
    name: getMaxListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMaxListeners()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'id?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.isPaused'
    name: isPaused()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isPaused()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.listenerCount'
    name: listenerCount(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listenerCount(type: string | symbol)'
      parameters:
        - id: type
          type:
            - string | symbol
          description: ''
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.listeners'
    name: listeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.off'
    name: 'off(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function off(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.on'
    name: 'on("continue", () => __type)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "continue", listener: () => __type)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => __type
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.on_1'
    name: >-
      on("headers", (headers: IncomingHttpHeaders & IncomingHttpStatusHeader,
      flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "headers", listener: (headers: IncomingHttpHeaders &
        IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"headers"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.on_2'
    name: 'on("push", (headers: IncomingHttpHeaders, flags: number) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "push", listener: (headers: IncomingHttpHeaders,
        flags: number) => void)
      parameters:
        - id: event
          type:
            - '"push"'
          description: ''
        - id: listener
          type:
            - '(headers: IncomingHttpHeaders, flags: number) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.on_3'
    name: >-
      on("response", (headers: IncomingHttpHeaders & IncomingHttpStatusHeader,
      flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "response", listener: (headers: IncomingHttpHeaders &
        IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.on_4'
    name: 'on(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.once'
    name: 'once("continue", () => __type)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "continue", listener: () => __type)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => __type
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.once_1'
    name: >-
      once("headers", (headers: IncomingHttpHeaders & IncomingHttpStatusHeader,
      flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "headers", listener: (headers: IncomingHttpHeaders
        & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"headers"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.once_2'
    name: 'once("push", (headers: IncomingHttpHeaders, flags: number) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "push", listener: (headers: IncomingHttpHeaders,
        flags: number) => void)
      parameters:
        - id: event
          type:
            - '"push"'
          description: ''
        - id: listener
          type:
            - '(headers: IncomingHttpHeaders, flags: number) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.once_3'
    name: >-
      once("response", (headers: IncomingHttpHeaders & IncomingHttpStatusHeader,
      flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "response", listener: (headers: IncomingHttpHeaders
        & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.once_4'
    name: 'once(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.pause'
    name: pause()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function pause()
      parameters: []
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.pending'
    name: pending
    fullName: pending
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'pending: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.pipe'
    name: 'pipe(T, undefined | Object)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function pipe<T>(destination: T, options?: undefined | Object)'
      parameters:
        - id: destination
          type:
            - T
          description: ''
        - id: options
          type:
            - undefined | Object
          description: ''
          optional: true
      return:
        type:
          - T
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependListener'
    name: 'prependListener("continue", () => __type)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "continue", listener: () => __type)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => __type
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_1'
    name: >-
      prependListener("headers", (headers: IncomingHttpHeaders &
      IncomingHttpStatusHeader, flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "headers", listener: (headers:
        IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"headers"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_2'
    name: >-
      prependListener("push", (headers: IncomingHttpHeaders, flags: number) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "push", listener: (headers:
        IncomingHttpHeaders, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"push"'
          description: ''
        - id: listener
          type:
            - '(headers: IncomingHttpHeaders, flags: number) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_3'
    name: >-
      prependListener("response", (headers: IncomingHttpHeaders &
      IncomingHttpStatusHeader, flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "response", listener: (headers:
        IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependListener_4'
    name: 'prependListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener'
    name: 'prependOnceListener("continue", () => __type)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "continue", listener: () => __type)'
      parameters:
        - id: event
          type:
            - '"continue"'
          description: ''
        - id: listener
          type:
            - () => __type
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_1'
    name: >-
      prependOnceListener("headers", (headers: IncomingHttpHeaders &
      IncomingHttpStatusHeader, flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "headers", listener: (headers:
        IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"headers"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_2'
    name: >-
      prependOnceListener("push", (headers: IncomingHttpHeaders, flags: number)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "push", listener: (headers:
        IncomingHttpHeaders, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"push"'
          description: ''
        - id: listener
          type:
            - '(headers: IncomingHttpHeaders, flags: number) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_3'
    name: >-
      prependOnceListener("response", (headers: IncomingHttpHeaders &
      IncomingHttpStatusHeader, flags: number) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "response", listener: (headers:
        IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void)
      parameters:
        - id: event
          type:
            - '"response"'
          description: ''
        - id: listener
          type:
            - >-
              (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags:
              number) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.prependOnceListener_4'
    name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.priority'
    name: priority(StreamPriorityOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function priority(options: StreamPriorityOptions)'
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.http2.StreamPriorityOptions'
          description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.push'
    name: 'push(any, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function push(chunk: any, encoding?: undefined | string)'
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: encoding
          type:
            - undefined | string
          description: ''
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.rawListeners'
    name: rawListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rawListeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.read'
    name: read(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(size?: undefined | number)'
      parameters:
        - id: size
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - any
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.readable'
    name: readable
    fullName: readable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'readable: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.readableHighWaterMark'
    name: readableHighWaterMark
    fullName: readableHighWaterMark
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'readableHighWaterMark: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.readableLength'
    name: readableLength
    fullName: readableLength
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'readableLength: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.readableObjectMode'
    name: readableObjectMode
    fullName: readableObjectMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'readableObjectMode: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeAllListeners'
    name: removeAllListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeListener'
    name: 'removeListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_1'
    name: 'removeListener("data", (chunk: any) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "data", listener: (chunk: any) => void)'
      parameters:
        - id: event
          type:
            - '"data"'
          description: ''
        - id: listener
          type:
            - '(chunk: any) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_2'
    name: 'removeListener("end", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "end", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"end"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_4'
    name: 'removeListener("error", (err: Error) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type:
            - '"error"'
          description: ''
        - id: listener
          type:
            - '(err: Error) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_3'
    name: 'removeListener("readable", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeListener(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"readable"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.removeListener_5'
    name: 'removeListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.resume'
    name: resume()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function resume()
      parameters: []
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.rstCode'
    name: rstCode
    fullName: rstCode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'rstCode: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.sendTrailers'
    name: sendTrailers(OutgoingHttpHeaders)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sendTrailers(headers: OutgoingHttpHeaders)'
      parameters:
        - id: headers
          type:
            - '@azure/abort-controller.http.OutgoingHttpHeaders'
          description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.sentHeaders'
    name: sentHeaders
    fullName: sentHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'sentHeaders: OutgoingHttpHeaders'
      return:
        type:
          - '@azure/abort-controller.http.OutgoingHttpHeaders'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.sentInfoHeaders'
    name: sentInfoHeaders
    fullName: sentInfoHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'sentInfoHeaders?: OutgoingHttpHeaders[]'
      return:
        type:
          - '@azure/abort-controller.http.OutgoingHttpHeaders[]'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.sentTrailers'
    name: sentTrailers
    fullName: sentTrailers
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'sentTrailers?: OutgoingHttpHeaders'
      return:
        type:
          - '@azure/abort-controller.http.OutgoingHttpHeaders'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.session'
    name: session
    fullName: session
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'session: Http2Session'
      return:
        type:
          - '@azure/abort-controller.http2.Http2Session'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.setDefaultEncoding'
    name: setDefaultEncoding(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setDefaultEncoding(encoding: string)'
      parameters:
        - id: encoding
          type:
            - string
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.setEncoding'
    name: setEncoding(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setEncoding(encoding: string)'
      parameters:
        - id: encoding
          type:
            - string
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.setMaxListeners'
    name: setMaxListeners(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type:
            - number
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.setTimeout'
    name: 'setTimeout(number, undefined | () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setTimeout(msecs: number, callback?: undefined | () => void)'
      parameters:
        - id: msecs
          type:
            - number
          description: ''
        - id: callback
          type:
            - undefined | () => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.state'
    name: state
    fullName: state
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'state: StreamState'
      return:
        type:
          - '@azure/abort-controller.http2.StreamState'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.uncork'
    name: uncork()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function uncork()
      parameters: []
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.unpipe'
    name: unpipe(NodeJS.WritableStream)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unpipe(destination?: NodeJS.WritableStream)'
      parameters:
        - id: destination
          type:
            - '@azure/abort-controller.NodeJS.WritableStream'
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.unshift'
    name: 'unshift(any, BufferEncoding)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function unshift(chunk: any, encoding?: BufferEncoding)'
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: encoding
          type:
            - '@azure/abort-controller.BufferEncoding'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.wrap'
    name: wrap(ReadableStream)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function wrap(oldStream: ReadableStream)'
      parameters:
        - id: oldStream
          type:
            - '@azure/abort-controller.NodeJS.ReadableStream'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writable'
    name: writable
    fullName: writable
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writable: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writableCorked'
    name: writableCorked
    fullName: writableCorked
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableCorked: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writableEnded'
    name: writableEnded
    fullName: writableEnded
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableEnded: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writableFinished'
    name: writableFinished
    fullName: writableFinished
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableFinished: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writableHighWaterMark'
    name: writableHighWaterMark
    fullName: writableHighWaterMark
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableHighWaterMark: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writableLength'
    name: writableLength
    fullName: writableLength
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableLength: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.writableObjectMode'
    name: writableObjectMode
    fullName: writableObjectMode
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'writableObjectMode: boolean'
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.write_1'
    name: 'write(any, undefined | (error: Error | null | undefined) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function write(chunk: any, cb?: undefined | (error: Error | null |
        undefined) => void)
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: cb
          type:
            - 'undefined | (error: Error | null | undefined) => void'
          description: ''
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream.write'
    name: >-
      write(any, undefined | string, undefined | (error: Error | null |
      undefined) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function write(chunk: any, encoding?: undefined | string, cb?: undefined
        | (error: Error | null | undefined) => void)
      parameters:
        - id: chunk
          type:
            - any
          description: ''
        - id: encoding
          type:
            - undefined | string
          description: ''
          optional: true
        - id: cb
          type:
            - 'undefined | (error: Error | null | undefined) => void'
          description: ''
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.stream.internal.Readable'
    name: Readable
    spec.typeScript:
      - name: Readable
        fullName: Readable
        uid: '@azure/abort-controller.stream.internal.Readable'
  - uid: '@azure/abort-controller.http2.ServerHttp2Stream'
    name: ServerHttp2Stream
    spec.typeScript:
      - name: ServerHttp2Stream
        fullName: ServerHttp2Stream
        uid: '@azure/abort-controller.http2.ServerHttp2Stream'
  - uid: '@azure/abort-controller.http2.IncomingHttpHeaders'
    name: IncomingHttpHeaders
    spec.typeScript:
      - name: IncomingHttpHeaders
        fullName: IncomingHttpHeaders
        uid: '@azure/abort-controller.http2.IncomingHttpHeaders'
  - uid: '@azure/abort-controller.net.Socket | @azure/abort-controller.tls.TLSSocket'
    name: TLSSocket
    spec.typeScript:
      - name: Socket
        fullName: Socket
        uid: '@azure/abort-controller.net.Socket'
      - name: ' | '
        fullName: ' | '
      - name: TLSSocket
        fullName: TLSSocket
        uid: '@azure/abort-controller.tls.TLSSocket'
  - uid: '@azure/abort-controller.AbortError.Error'
    name: Error
    spec.typeScript:
      - name: Error
        fullName: Error
        uid: '@azure/abort-controller.AbortError.Error'
  - uid: '@azure/abort-controller.NodeJS.WritableStream'
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: '@azure/abort-controller.NodeJS.WritableStream'
  - uid: '@azure/abort-controller.BufferEncoding'
    name: BufferEncoding
    spec.typeScript:
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: '@azure/abort-controller.BufferEncoding'
  - uid: '@azure/abort-controller.NodeJS.ReadableStream'
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: '@azure/abort-controller.NodeJS.ReadableStream'
  - uid: '@azure/abort-controller.stream.internal.ReadableOptions'
    name: ReadableOptions
    spec.typeScript:
      - name: ReadableOptions
        fullName: ReadableOptions
        uid: '@azure/abort-controller.stream.internal.ReadableOptions'
  - uid: '@azure/abort-controller.stream.internal.Stream'
    name: Stream
    spec.typeScript:
      - name: Stream
        fullName: Stream
        uid: '@azure/abort-controller.stream.internal.Stream'
  - uid: '@azure/abort-controller.http.OutgoingHttpHeaders'
    name: OutgoingHttpHeaders
    spec.typeScript:
      - name: OutgoingHttpHeaders
        fullName: OutgoingHttpHeaders
        uid: '@azure/abort-controller.http.OutgoingHttpHeaders'
  - uid: number | string | @azure/abort-controller.url.URL
    name: URL
    spec.typeScript:
      - name: 'number | string | '
        fullName: 'number | string | '
      - name: URL
        fullName: URL
        uid: '@azure/abort-controller.url.URL'
  - uid: '@azure/abort-controller.http2.Http2Session'
    name: Http2Session
    spec.typeScript:
      - name: Http2Session
        fullName: Http2Session
        uid: '@azure/abort-controller.http2.Http2Session'
  - uid: '@azure/abort-controller.http2.Settings'
    name: Settings
    spec.typeScript:
      - name: Settings
        fullName: Settings
        uid: '@azure/abort-controller.http2.Settings'
  - uid: '@azure/abort-controller.http2.SessionState'
    name: SessionState
    spec.typeScript:
      - name: SessionState
        fullName: SessionState
        uid: '@azure/abort-controller.http2.SessionState'
  - uid: '@azure/abort-controller.http2.ClientHttp2Session'
    name: ClientHttp2Session
    spec.typeScript:
      - name: ClientHttp2Session
        fullName: ClientHttp2Session
        uid: '@azure/abort-controller.http2.ClientHttp2Session'
  - uid: '@azure/abort-controller.http2.ClientHttp2Stream'
    name: ClientHttp2Stream
    spec.typeScript:
      - name: ClientHttp2Stream
        fullName: ClientHttp2Stream
        uid: '@azure/abort-controller.http2.ClientHttp2Stream'
  - uid: >-
      @azure/abort-controller.http2.IncomingHttpHeaders &
      @azure/abort-controller.http2.IncomingHttpStatusHeader
    name: IncomingHttpStatusHeader
    spec.typeScript:
      - name: IncomingHttpHeaders
        fullName: IncomingHttpHeaders
        uid: '@azure/abort-controller.http2.IncomingHttpHeaders'
      - name: ' & '
        fullName: ' & '
      - name: IncomingHttpStatusHeader
        fullName: IncomingHttpStatusHeader
        uid: '@azure/abort-controller.http2.IncomingHttpStatusHeader'
  - uid: '@azure/abort-controller.NodeJS.ArrayBufferView'
    name: ArrayBufferView
    spec.typeScript:
      - name: ArrayBufferView
        fullName: ArrayBufferView
        uid: '@azure/abort-controller.NodeJS.ArrayBufferView'
  - uid: '@azure/abort-controller.http2.ClientSessionRequestOptions'
    name: ClientSessionRequestOptions
    spec.typeScript:
      - name: ClientSessionRequestOptions
        fullName: ClientSessionRequestOptions
        uid: '@azure/abort-controller.http2.ClientSessionRequestOptions'
  - uid: '@azure/abort-controller.http2.Http2Stream'
    name: Http2Stream
    spec.typeScript:
      - name: Http2Stream
        fullName: Http2Stream
        uid: '@azure/abort-controller.http2.Http2Stream'
  - uid: '@azure/abort-controller.stream.internal.DuplexOptions'
    name: DuplexOptions
    spec.typeScript:
      - name: DuplexOptions
        fullName: DuplexOptions
        uid: '@azure/abort-controller.stream.internal.DuplexOptions'
  - uid: '@azure/abort-controller.http.OutgoingHttpHeaders[]'
    name: 'OutgoingHttpHeaders[]'
    spec.typeScript:
      - name: OutgoingHttpHeaders
        fullName: OutgoingHttpHeaders
        uid: '@azure/abort-controller.http.OutgoingHttpHeaders'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.http2.StreamState'
    name: StreamState
    spec.typeScript:
      - name: StreamState
        fullName: StreamState
        uid: '@azure/abort-controller.http2.StreamState'
  - uid: '@azure/abort-controller.http2.StreamPriorityOptions'
    name: StreamPriorityOptions
    spec.typeScript:
      - name: StreamPriorityOptions
        fullName: StreamPriorityOptions
        uid: '@azure/abort-controller.http2.StreamPriorityOptions'
  - uid: '@azure/abort-controller.http2.SessionOptions'
    name: SessionOptions
    spec.typeScript:
      - name: SessionOptions
        fullName: SessionOptions
        uid: '@azure/abort-controller.http2.SessionOptions'
  - uid: '@azure/abort-controller.tls.Server'
    name: Server
    spec.typeScript:
      - name: Server
        fullName: Server
        uid: '@azure/abort-controller.tls.Server'
  - uid: '@azure/abort-controller.tls.SecureContextOptions'
    name: SecureContextOptions
    spec.typeScript:
      - name: SecureContextOptions
        fullName: SecureContextOptions
        uid: '@azure/abort-controller.tls.SecureContextOptions'
  - uid: '@azure/abort-controller.net.AddressInfo | string | null'
    name: AddressInfo | string | null
    spec.typeScript:
      - name: AddressInfo
        fullName: AddressInfo
        uid: '@azure/abort-controller.net.AddressInfo'
      - name: ' | string | null'
        fullName: ' | string | null'
  - uid: '@azure/abort-controller.http2.Http2ServerRequest'
    name: Http2ServerRequest
    spec.typeScript:
      - name: Http2ServerRequest
        fullName: Http2ServerRequest
        uid: '@azure/abort-controller.http2.Http2ServerRequest'
  - uid: '@azure/abort-controller.http2.Http2ServerResponse'
    name: Http2ServerResponse
    spec.typeScript:
      - name: Http2ServerResponse
        fullName: Http2ServerResponse
        uid: '@azure/abort-controller.http2.Http2ServerResponse'
  - uid: '@azure/abort-controller.http2.ServerHttp2Session'
    name: ServerHttp2Session
    spec.typeScript:
      - name: ServerHttp2Session
        fullName: ServerHttp2Session
        uid: '@azure/abort-controller.http2.ServerHttp2Session'
  - uid: '@azure/abort-controller.tls.TLSSocket'
    name: TLSSocket
    spec.typeScript:
      - name: TLSSocket
        fullName: TLSSocket
        uid: '@azure/abort-controller.tls.TLSSocket'
  - uid: '@azure/abort-controller.net.ListenOptions'
    name: ListenOptions
    spec.typeScript:
      - name: ListenOptions
        fullName: ListenOptions
        uid: '@azure/abort-controller.net.ListenOptions'
  - uid: '@azure/abort-controller.net.Server'
    name: Server
    spec.typeScript:
      - name: Server
        fullName: Server
        uid: '@azure/abort-controller.net.Server'
  - uid: '@azure/abort-controller.events.EventEmitter.EventEmitter'
    name: EventEmitter
    spec.typeScript:
      - name: EventEmitter
        fullName: EventEmitter
        uid: '@azure/abort-controller.events.EventEmitter.EventEmitter'
  - uid: '@azure/abort-controller.events.EventEmitterOptions'
    name: EventEmitterOptions
    spec.typeScript:
      - name: EventEmitterOptions
        fullName: EventEmitterOptions
        uid: '@azure/abort-controller.events.EventEmitterOptions'
  - uid: '@azure/abort-controller.stream.internal.Duplex'
    name: Duplex
    spec.typeScript:
      - name: Duplex
        fullName: Duplex
        uid: '@azure/abort-controller.stream.internal.Duplex'
  - uid: '@azure/abort-controller.http.IncomingHttpHeaders'
    name: IncomingHttpHeaders
    spec.typeScript:
      - name: IncomingHttpHeaders
        fullName: IncomingHttpHeaders
        uid: '@azure/abort-controller.http.IncomingHttpHeaders'
  - uid: '@azure/abort-controller.http2.ClientSessionOptions'
    name: ClientSessionOptions
    spec.typeScript:
      - name: ClientSessionOptions
        fullName: ClientSessionOptions
        uid: '@azure/abort-controller.http2.ClientSessionOptions'
  - uid: undefined | @azure/abort-controller.tls.checkServerIdentity
    name: checkServerIdentity
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: checkServerIdentity
        fullName: checkServerIdentity
        uid: '@azure/abort-controller.tls.checkServerIdentity'
  - uid: string | Buffer | Array<Buffer | @azure/abort-controller.tls.KeyObject>
    name: KeyObject>
    spec.typeScript:
      - name: 'string | Buffer | Array<Buffer | '
        fullName: 'string | Buffer | Array<Buffer | '
      - name: KeyObject
        fullName: KeyObject
        uid: '@azure/abort-controller.tls.KeyObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.tls.SecureVersion'
    name: SecureVersion
    spec.typeScript:
      - name: SecureVersion
        fullName: SecureVersion
        uid: '@azure/abort-controller.tls.SecureVersion'
  - uid: >-
      string | Buffer | Array<string | Buffer |
      @azure/abort-controller.tls.PxfObject>
    name: PxfObject>
    spec.typeScript:
      - name: 'string | Buffer | Array<string | Buffer | '
        fullName: 'string | Buffer | Array<string | Buffer | '
      - name: PxfObject
        fullName: PxfObject
        uid: '@azure/abort-controller.tls.PxfObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.tls.SecureContext'
    name: SecureContext
    spec.typeScript:
      - name: SecureContext
        fullName: SecureContext
        uid: '@azure/abort-controller.tls.SecureContext'
  - uid: '@azure/abort-controller.Buffer'
    name: Buffer
    spec.typeScript:
      - name: Buffer
        fullName: Buffer
        uid: '@azure/abort-controller.Buffer'
  - uid: '@azure/abort-controller.tls.PSKCallbackNegotation | null'
    name: PSKCallbackNegotation | null
    spec.typeScript:
      - name: PSKCallbackNegotation
        fullName: PSKCallbackNegotation
        uid: '@azure/abort-controller.tls.PSKCallbackNegotation'
      - name: ' | null'
        fullName: ' | null'
  - uid: '@azure/abort-controller.http2.SecureServerSessionOptions'
    name: SecureServerSessionOptions
    spec.typeScript:
      - name: SecureServerSessionOptions
        fullName: SecureServerSessionOptions
        uid: '@azure/abort-controller.http2.SecureServerSessionOptions'
  - uid: undefined | @azure/abort-controller.http.IncomingMessage
    name: IncomingMessage
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: IncomingMessage
        fullName: IncomingMessage
        uid: '@azure/abort-controller.http.IncomingMessage'
  - uid: undefined | @azure/abort-controller.http.ServerResponse
    name: ServerResponse
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: ServerResponse
        fullName: ServerResponse
        uid: '@azure/abort-controller.http.ServerResponse'
  - uid: undefined | @azure/abort-controller.http2.Http2ServerRequest
    name: Http2ServerRequest
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: Http2ServerRequest
        fullName: Http2ServerRequest
        uid: '@azure/abort-controller.http2.Http2ServerRequest'
  - uid: undefined | @azure/abort-controller.http2.Http2ServerResponse
    name: Http2ServerResponse
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: Http2ServerResponse
        fullName: Http2ServerResponse
        uid: '@azure/abort-controller.http2.Http2ServerResponse'
  - uid: '@azure/abort-controller.url.URL'
    name: URL
    spec.typeScript:
      - name: URL
        fullName: URL
        uid: '@azure/abort-controller.url.URL'
  - uid: DataView | @azure/abort-controller.NodeJS.TypedArray | null
    name: TypedArray | null
    spec.typeScript:
      - name: 'DataView | '
        fullName: 'DataView | '
      - name: TypedArray
        fullName: TypedArray
        uid: '@azure/abort-controller.NodeJS.TypedArray'
      - name: ' | null'
        fullName: ' | null'
  - uid: '@azure/abort-controller.http2.ServerSessionOptions'
    name: ServerSessionOptions
    spec.typeScript:
      - name: ServerSessionOptions
        fullName: ServerSessionOptions
        uid: '@azure/abort-controller.http2.ServerSessionOptions'
  - uid: >-
      @azure/abort-controller.http2.Http2Server |
      @azure/abort-controller.http2.Http2SecureServer
    name: Http2SecureServer
    spec.typeScript:
      - name: Http2Server
        fullName: Http2Server
        uid: '@azure/abort-controller.http2.Http2Server'
      - name: ' | '
        fullName: ' | '
      - name: Http2SecureServer
        fullName: Http2SecureServer
        uid: '@azure/abort-controller.http2.Http2SecureServer'
  - uid: >-
      number | string | @azure/abort-controller.url.URL |
      @azure/abort-controller.http2.AlternativeServiceOptions
    name: AlternativeServiceOptions
    spec.typeScript:
      - name: 'number | string | '
        fullName: 'number | string | '
      - name: URL
        fullName: URL
        uid: '@azure/abort-controller.url.URL'
      - name: ' | '
        fullName: ' | '
      - name: AlternativeServiceOptions
        fullName: AlternativeServiceOptions
        uid: '@azure/abort-controller.http2.AlternativeServiceOptions'
  - uid: Array<string | @azure/abort-controller.url.URL | Object>
    name: URL | Object>
    spec.typeScript:
      - name: 'Array<string | '
        fullName: 'Array<string | '
      - name: URL
        fullName: URL
        uid: '@azure/abort-controller.url.URL'
      - name: ' | Object>'
        fullName: ' | Object>'
  - uid: '@azure/abort-controller.http2.ServerStreamResponseOptions'
    name: ServerStreamResponseOptions
    spec.typeScript:
      - name: ServerStreamResponseOptions
        fullName: ServerStreamResponseOptions
        uid: '@azure/abort-controller.http2.ServerStreamResponseOptions'
  - uid: number | @azure/abort-controller.fs.promises.FileHandle
    name: FileHandle
    spec.typeScript:
      - name: 'number | '
        fullName: 'number | '
      - name: FileHandle
        fullName: FileHandle
        uid: '@azure/abort-controller.fs.promises.FileHandle'
  - uid: '@azure/abort-controller.http2.ServerStreamFileResponseOptions'
    name: ServerStreamFileResponseOptions
    spec.typeScript:
      - name: ServerStreamFileResponseOptions
        fullName: ServerStreamFileResponseOptions
        uid: '@azure/abort-controller.http2.ServerStreamFileResponseOptions'
  - uid: '@azure/abort-controller.http2.ServerStreamFileResponseOptionsWithError'
    name: ServerStreamFileResponseOptionsWithError
    spec.typeScript:
      - name: ServerStreamFileResponseOptionsWithError
        fullName: ServerStreamFileResponseOptionsWithError
        uid: '@azure/abort-controller.http2.ServerStreamFileResponseOptionsWithError'
  - uid: '@azure/abort-controller.fs.Stats'
    name: Stats
    spec.typeScript:
      - name: Stats
        fullName: Stats
        uid: '@azure/abort-controller.fs.Stats'
  - uid: '@azure/abort-controller.http2.StatOptions'
    name: StatOptions
    spec.typeScript:
      - name: StatOptions
        fullName: StatOptions
        uid: '@azure/abort-controller.http2.StatOptions'
  - uid: '@azure/abort-controller.NodeJS.ErrnoException'
    name: ErrnoException
    spec.typeScript:
      - name: ErrnoException
        fullName: ErrnoException
        uid: '@azure/abort-controller.NodeJS.ErrnoException'
  - uid: string | @azure/abort-controller.url.URL
    name: URL
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: URL
        fullName: URL
        uid: '@azure/abort-controller.url.URL'
  - uid: >-
      @azure/abort-controller.http2.ClientSessionOptions |
      @azure/abort-controller.http2.SecureClientSessionOptions
    name: SecureClientSessionOptions
    spec.typeScript:
      - name: ClientSessionOptions
        fullName: ClientSessionOptions
        uid: '@azure/abort-controller.http2.ClientSessionOptions'
      - name: ' | '
        fullName: ' | '
      - name: SecureClientSessionOptions
        fullName: SecureClientSessionOptions
        uid: '@azure/abort-controller.http2.SecureClientSessionOptions'
  - uid: '@azure/abort-controller.http2.Http2SecureServer'
    name: Http2SecureServer
    spec.typeScript:
      - name: Http2SecureServer
        fullName: Http2SecureServer
        uid: '@azure/abort-controller.http2.Http2SecureServer'
  - uid: '@azure/abort-controller.http2.SecureServerOptions'
    name: SecureServerOptions
    spec.typeScript:
      - name: SecureServerOptions
        fullName: SecureServerOptions
        uid: '@azure/abort-controller.http2.SecureServerOptions'
  - uid: '@azure/abort-controller.http2.Http2Server'
    name: Http2Server
    spec.typeScript:
      - name: Http2Server
        fullName: Http2Server
        uid: '@azure/abort-controller.http2.Http2Server'
  - uid: '@azure/abort-controller.http2.ServerOptions'
    name: ServerOptions
    spec.typeScript:
      - name: ServerOptions
        fullName: ServerOptions
        uid: '@azure/abort-controller.http2.ServerOptions'
