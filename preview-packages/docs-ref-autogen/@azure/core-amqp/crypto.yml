### YamlMime:UniversalReference
items:
  - uid: tslib.crypto
    name: crypto
    langs:
      - typeScript
    fullName: crypto
    children:
      - tslib.crypto.BasePrivateKeyEncodingOptions
      - tslib.crypto.BinaryLike
      - tslib.crypto.Certificate
      - tslib.crypto.Cipher
      - tslib.crypto.CipherCCM
      - tslib.crypto.CipherCCMOptions
      - tslib.crypto.CipherCCMTypes
      - tslib.crypto.CipherGCM
      - tslib.crypto.CipherGCMOptions
      - tslib.crypto.CipherGCMTypes
      - tslib.crypto.CipherKey
      - tslib.crypto.createCipher
      - tslib.crypto.createCipher_1
      - tslib.crypto.createCipher_2
      - tslib.crypto.createCipheriv
      - tslib.crypto.createCipheriv_1
      - tslib.crypto.createCipheriv_2
      - tslib.crypto.createDecipher
      - tslib.crypto.createDecipher_1
      - tslib.crypto.createDecipher_2
      - tslib.crypto.createDecipheriv
      - tslib.crypto.createDecipheriv_1
      - tslib.crypto.createDecipheriv_2
      - tslib.crypto.createDiffieHellman_1
      - tslib.crypto.createDiffieHellman
      - tslib.crypto.createDiffieHellman_2
      - tslib.crypto.createDiffieHellman_3
      - tslib.crypto.createDiffieHellman_4
      - tslib.crypto.createECDH
      - tslib.crypto.createHash
      - tslib.crypto.createHmac
      - tslib.crypto.createPrivateKey
      - tslib.crypto.createPublicKey
      - tslib.crypto.createSecretKey
      - tslib.crypto.createSign
      - tslib.crypto.createVerify
      - tslib.crypto.Decipher
      - tslib.crypto.DecipherCCM
      - tslib.crypto.DecipherGCM
      - tslib.crypto.DiffieHellman
      - tslib.crypto.DSAKeyPairKeyObjectOptions
      - tslib.crypto.DSAKeyPairOptions
      - tslib.crypto.ECDH
      - tslib.crypto.ECDHKeyFormat
      - tslib.crypto.ECKeyPairKeyObjectOptions
      - tslib.crypto.ECKeyPairOptions
      - tslib.crypto.generateKeyPairSync_9
      - tslib.crypto.generateKeyPairSync_8
      - tslib.crypto.generateKeyPairSync_7
      - tslib.crypto.generateKeyPairSync_6
      - tslib.crypto.generateKeyPairSync_5
      - tslib.crypto.generateKeyPairSync_14
      - tslib.crypto.generateKeyPairSync_13
      - tslib.crypto.generateKeyPairSync_12
      - tslib.crypto.generateKeyPairSync_11
      - tslib.crypto.generateKeyPairSync_10
      - tslib.crypto.generateKeyPairSync_4
      - tslib.crypto.generateKeyPairSync_3
      - tslib.crypto.generateKeyPairSync_2
      - tslib.crypto.generateKeyPairSync_1
      - tslib.crypto.generateKeyPairSync
      - tslib.crypto.getCiphers
      - tslib.crypto.getCurves
      - tslib.crypto.getDiffieHellman
      - tslib.crypto.getHashes
      - tslib.crypto.Hash
      - tslib.crypto.HashOptions
      - tslib.crypto.HexBase64BinaryEncoding
      - tslib.crypto.HexBase64Latin1Encoding
      - tslib.crypto.Hmac
      - tslib.crypto.KeyExportOptions
      - tslib.crypto.KeyFormat
      - tslib.crypto.KeyLike
      - tslib.crypto.KeyObject
      - tslib.crypto.KeyObjectType
      - tslib.crypto.KeyPairKeyObjectResult
      - tslib.crypto.KeyPairSyncResult
      - tslib.crypto.KeyType
      - tslib.crypto.pbkdf2
      - tslib.crypto.pbkdf2Sync
      - tslib.crypto.privateDecrypt
      - tslib.crypto.privateEncrypt
      - tslib.crypto.PrivateKeyInput
      - tslib.crypto.pseudoRandomBytes
      - tslib.crypto.pseudoRandomBytes_1
      - tslib.crypto.publicDecrypt
      - tslib.crypto.publicEncrypt
      - tslib.crypto.PublicKeyInput
      - tslib.crypto.randomBytes
      - tslib.crypto.randomBytes_1
      - tslib.crypto.randomFill
      - tslib.crypto.randomFill_1
      - tslib.crypto.randomFill_2
      - tslib.crypto.randomFillSync
      - tslib.crypto.RSAKeyPairKeyObjectOptions
      - tslib.crypto.RSAKeyPairOptions
      - tslib.crypto.RsaPrivateKey
      - tslib.crypto.RsaPublicKey
      - tslib.crypto.scrypt
      - tslib.crypto.scrypt_1
      - tslib.crypto.ScryptOptions
      - tslib.crypto.scryptSync
      - tslib.crypto.sign
      - tslib.crypto.Signer
      - tslib.crypto.SigningOptions
      - tslib.crypto.SignPrivateKeyInput
      - tslib.crypto.timingSafeEqual
      - tslib.crypto.Utf8AsciiBinaryEncoding
      - tslib.crypto.Utf8AsciiLatin1Encoding
      - tslib.crypto.Verify
      - tslib.crypto.verify
      - tslib.crypto.VerifyKeyWithOptions
    type: module
    summary: ''
    package: tslib
  - uid: tslib.crypto.createCipher
    name: 'createCipher(CipherCCMTypes, BinaryLike, CipherCCMOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCipher(algorithm: CipherCCMTypes, password: BinaryLike,
        options: CipherCCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherCCMTypes
          description: ''
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherCCMOptions
          description: ''
      return:
        type:
          - tslib.crypto.CipherCCM
        description: ''
    package: tslib
    deprecated:
      content: since v10.0.0 use createCipheriv()
  - uid: tslib.crypto.createCipher_1
    name: 'createCipher(CipherGCMTypes, BinaryLike, CipherGCMOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCipher(algorithm: CipherGCMTypes, password: BinaryLike,
        options?: CipherGCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherGCMTypes
          description: ''
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherGCMOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.CipherGCM
        description: ''
    package: tslib
    deprecated:
      content: since v10.0.0 use createCipheriv()
  - uid: tslib.crypto.createCipher_2
    name: 'createCipher(string, BinaryLike, stream.TransformOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCipher(algorithm: string, password: BinaryLike, options?:
        stream.TransformOptions)
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - stream.TransformOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Cipher
        description: ''
    package: tslib
    deprecated:
      content: since v10.0.0 use createCipheriv()
  - uid: tslib.crypto.createCipheriv
    name: >-
      createCipheriv(CipherCCMTypes, CipherKey, BinaryLike | null,
      CipherCCMOptions)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCipheriv(algorithm: CipherCCMTypes, key: CipherKey, iv:
        BinaryLike | null, options: CipherCCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherCCMTypes
          description: ''
        - id: key
          type:
            - tslib.crypto.CipherKey
          description: ''
        - id: iv
          type:
            - tslib.crypto.BinaryLike | null
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherCCMOptions
          description: ''
      return:
        type:
          - tslib.crypto.CipherCCM
        description: ''
    package: tslib
  - uid: tslib.crypto.createCipheriv_1
    name: >-
      createCipheriv(CipherGCMTypes, CipherKey, BinaryLike | null,
      CipherGCMOptions)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCipheriv(algorithm: CipherGCMTypes, key: CipherKey, iv:
        BinaryLike | null, options?: CipherGCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherGCMTypes
          description: ''
        - id: key
          type:
            - tslib.crypto.CipherKey
          description: ''
        - id: iv
          type:
            - tslib.crypto.BinaryLike | null
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherGCMOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.CipherGCM
        description: ''
    package: tslib
  - uid: tslib.crypto.createCipheriv_2
    name: >-
      createCipheriv(string, CipherKey, BinaryLike | null,
      stream.TransformOptions)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createCipheriv(algorithm: string, key: CipherKey, iv:
        BinaryLike | null, options?: stream.TransformOptions)
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: key
          type:
            - tslib.crypto.CipherKey
          description: ''
        - id: iv
          type:
            - tslib.crypto.BinaryLike | null
          description: ''
        - id: options
          type:
            - stream.TransformOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Cipher
        description: ''
    package: tslib
  - uid: tslib.crypto.createDecipher
    name: 'createDecipher(CipherCCMTypes, BinaryLike, CipherCCMOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDecipher(algorithm: CipherCCMTypes, password: BinaryLike,
        options: CipherCCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherCCMTypes
          description: ''
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherCCMOptions
          description: ''
      return:
        type:
          - tslib.crypto.DecipherCCM
        description: ''
    package: tslib
    deprecated:
      content: since v10.0.0 use createDecipheriv()
  - uid: tslib.crypto.createDecipher_1
    name: 'createDecipher(CipherGCMTypes, BinaryLike, CipherGCMOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDecipher(algorithm: CipherGCMTypes, password: BinaryLike,
        options?: CipherGCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherGCMTypes
          description: ''
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherGCMOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.DecipherGCM
        description: ''
    package: tslib
    deprecated:
      content: since v10.0.0 use createDecipheriv()
  - uid: tslib.crypto.createDecipher_2
    name: 'createDecipher(string, BinaryLike, stream.TransformOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDecipher(algorithm: string, password: BinaryLike,
        options?: stream.TransformOptions)
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - stream.TransformOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Decipher
        description: ''
    package: tslib
    deprecated:
      content: since v10.0.0 use createDecipheriv()
  - uid: tslib.crypto.createDecipheriv
    name: >-
      createDecipheriv(CipherCCMTypes, BinaryLike, BinaryLike | null,
      CipherCCMOptions)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDecipheriv(algorithm: CipherCCMTypes, key: BinaryLike,
        iv: BinaryLike | null, options: CipherCCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherCCMTypes
          description: ''
        - id: key
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: iv
          type:
            - tslib.crypto.BinaryLike | null
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherCCMOptions
          description: ''
      return:
        type:
          - tslib.crypto.DecipherCCM
        description: ''
    package: tslib
  - uid: tslib.crypto.createDecipheriv_1
    name: >-
      createDecipheriv(CipherGCMTypes, BinaryLike, BinaryLike | null,
      CipherGCMOptions)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDecipheriv(algorithm: CipherGCMTypes, key: BinaryLike,
        iv: BinaryLike | null, options?: CipherGCMOptions)
      parameters:
        - id: algorithm
          type:
            - tslib.crypto.CipherGCMTypes
          description: ''
        - id: key
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: iv
          type:
            - tslib.crypto.BinaryLike | null
          description: ''
        - id: options
          type:
            - tslib.crypto.CipherGCMOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.DecipherGCM
        description: ''
    package: tslib
  - uid: tslib.crypto.createDecipheriv_2
    name: >-
      createDecipheriv(string, BinaryLike, BinaryLike | null,
      stream.TransformOptions)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDecipheriv(algorithm: string, key: BinaryLike, iv:
        BinaryLike | null, options?: stream.TransformOptions)
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: key
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: iv
          type:
            - tslib.crypto.BinaryLike | null
          description: ''
        - id: options
          type:
            - stream.TransformOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Decipher
        description: ''
    package: tslib
  - uid: tslib.crypto.createDiffieHellman_1
    name: createDiffieHellman(NodeJS.ArrayBufferView)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createDiffieHellman(prime: NodeJS.ArrayBufferView)'
      parameters:
        - id: prime
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - tslib.crypto.DiffieHellman
        description: ''
    package: tslib
  - uid: tslib.crypto.createDiffieHellman
    name: 'createDiffieHellman(number, number | NodeJS.ArrayBufferView)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDiffieHellman(prime_length: number, generator?: number |
        NodeJS.ArrayBufferView)
      parameters:
        - id: prime_length
          type:
            - number
          description: ''
        - id: generator
          type:
            - number | tslib.NodeJS.ArrayBufferView
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.DiffieHellman
        description: ''
    package: tslib
  - uid: tslib.crypto.createDiffieHellman_2
    name: 'createDiffieHellman(string, HexBase64Latin1Encoding)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDiffieHellman(prime: string, prime_encoding:
        HexBase64Latin1Encoding)
      parameters:
        - id: prime
          type:
            - string
          description: ''
        - id: prime_encoding
          type:
            - tslib.crypto.HexBase64Latin1Encoding
          description: ''
      return:
        type:
          - tslib.crypto.DiffieHellman
        description: ''
    package: tslib
  - uid: tslib.crypto.createDiffieHellman_3
    name: >-
      createDiffieHellman(string, HexBase64Latin1Encoding, number |
      NodeJS.ArrayBufferView)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDiffieHellman(prime: string, prime_encoding:
        HexBase64Latin1Encoding, generator: number | NodeJS.ArrayBufferView)
      parameters:
        - id: prime
          type:
            - string
          description: ''
        - id: prime_encoding
          type:
            - tslib.crypto.HexBase64Latin1Encoding
          description: ''
        - id: generator
          type:
            - number | tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - tslib.crypto.DiffieHellman
        description: ''
    package: tslib
  - uid: tslib.crypto.createDiffieHellman_4
    name: >-
      createDiffieHellman(string, HexBase64Latin1Encoding, string,
      HexBase64Latin1Encoding)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createDiffieHellman(prime: string, prime_encoding:
        HexBase64Latin1Encoding, generator: string, generator_encoding:
        HexBase64Latin1Encoding)
      parameters:
        - id: prime
          type:
            - string
          description: ''
        - id: prime_encoding
          type:
            - tslib.crypto.HexBase64Latin1Encoding
          description: ''
        - id: generator
          type:
            - string
          description: ''
        - id: generator_encoding
          type:
            - tslib.crypto.HexBase64Latin1Encoding
          description: ''
      return:
        type:
          - tslib.crypto.DiffieHellman
        description: ''
    package: tslib
  - uid: tslib.crypto.createECDH
    name: createECDH(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createECDH(curve_name: string)'
      parameters:
        - id: curve_name
          type:
            - string
          description: ''
      return:
        type:
          - tslib.crypto.ECDH
        description: ''
    package: tslib
  - uid: tslib.crypto.createHash
    name: 'createHash(string, HashOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createHash(algorithm: string, options?: HashOptions)'
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: options
          type:
            - tslib.crypto.HashOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Hash
        description: ''
    package: tslib
  - uid: tslib.crypto.createHmac
    name: 'createHmac(string, BinaryLike, stream.TransformOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createHmac(algorithm: string, key: BinaryLike, options?:
        stream.TransformOptions)
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: key
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: options
          type:
            - stream.TransformOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Hmac
        description: ''
    package: tslib
  - uid: tslib.crypto.createPrivateKey
    name: createPrivateKey(PrivateKeyInput | string | Buffer)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createPrivateKey(key: PrivateKeyInput | string | Buffer)'
      parameters:
        - id: key
          type:
            - tslib.crypto.PrivateKeyInput | string | Buffer
          description: ''
      return:
        type:
          - tslib.crypto.KeyObject
        description: ''
    package: tslib
  - uid: tslib.crypto.createPublicKey
    name: createPublicKey(PublicKeyInput | string | Buffer | KeyObject)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createPublicKey(key: PublicKeyInput | string | Buffer |
        KeyObject)
      parameters:
        - id: key
          type:
            - >-
              tslib.crypto.PublicKeyInput | string | Buffer |
              tslib.crypto.KeyObject
          description: ''
      return:
        type:
          - tslib.crypto.KeyObject
        description: ''
    package: tslib
  - uid: tslib.crypto.createSecretKey
    name: createSecretKey(Buffer)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createSecretKey(key: Buffer)'
      parameters:
        - id: key
          type:
            - Buffer
          description: ''
      return:
        type:
          - tslib.crypto.KeyObject
        description: ''
    package: tslib
  - uid: tslib.crypto.createSign
    name: 'createSign(string, stream.WritableOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function createSign(algorithm: string, options?: stream.WritableOptions)'
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: options
          type:
            - stream.WritableOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Signer
        description: ''
    package: tslib
  - uid: tslib.crypto.createVerify
    name: 'createVerify(string, stream.WritableOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createVerify(algorithm: string, options?:
        stream.WritableOptions)
      parameters:
        - id: algorithm
          type:
            - string
          description: ''
        - id: options
          type:
            - stream.WritableOptions
          description: ''
          optional: true
      return:
        type:
          - tslib.crypto.Verify
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_9
    name: 'generateKeyPairSync("dsa", DSAKeyPairKeyObjectOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "dsa", options:
        DSAKeyPairKeyObjectOptions)
      parameters:
        - id: type
          type:
            - '"dsa"'
          description: ''
        - id: options
          type:
            - tslib.crypto.DSAKeyPairKeyObjectOptions
          description: ''
      return:
        type:
          - tslib.crypto.KeyPairKeyObjectResult
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_8
    name: 'generateKeyPairSync("dsa", DSAKeyPairOptions<"der", "der">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "dsa", options:
        DSAKeyPairOptions<"der", "der">)
      parameters:
        - id: type
          type:
            - '"dsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.DSAKeyPairOptions<"der", "der">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<Buffer, Buffer>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_7
    name: 'generateKeyPairSync("dsa", DSAKeyPairOptions<"der", "pem">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "dsa", options:
        DSAKeyPairOptions<"der", "pem">)
      parameters:
        - id: type
          type:
            - '"dsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.DSAKeyPairOptions<"der", "pem">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<Buffer, string>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_6
    name: 'generateKeyPairSync("dsa", DSAKeyPairOptions<"pem", "der">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "dsa", options:
        DSAKeyPairOptions<"pem", "der">)
      parameters:
        - id: type
          type:
            - '"dsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.DSAKeyPairOptions<"pem", "der">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<string, Buffer>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_5
    name: 'generateKeyPairSync("dsa", DSAKeyPairOptions<"pem", "pem">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "dsa", options:
        DSAKeyPairOptions<"pem", "pem">)
      parameters:
        - id: type
          type:
            - '"dsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.DSAKeyPairOptions<"pem", "pem">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<string, string>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_14
    name: 'generateKeyPairSync("ec", ECKeyPairKeyObjectOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "ec", options:
        ECKeyPairKeyObjectOptions)
      parameters:
        - id: type
          type:
            - '"ec"'
          description: ''
        - id: options
          type:
            - tslib.crypto.ECKeyPairKeyObjectOptions
          description: ''
      return:
        type:
          - tslib.crypto.KeyPairKeyObjectResult
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_13
    name: 'generateKeyPairSync("ec", ECKeyPairOptions<"der", "der">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "ec", options:
        ECKeyPairOptions<"der", "der">)
      parameters:
        - id: type
          type:
            - '"ec"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.ECKeyPairOptions<"der", "der">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<Buffer, Buffer>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_12
    name: 'generateKeyPairSync("ec", ECKeyPairOptions<"der", "pem">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "ec", options:
        ECKeyPairOptions<"der", "pem">)
      parameters:
        - id: type
          type:
            - '"ec"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.ECKeyPairOptions<"der", "pem">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<Buffer, string>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_11
    name: 'generateKeyPairSync("ec", ECKeyPairOptions<"pem", "der">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "ec", options:
        ECKeyPairOptions<"pem", "der">)
      parameters:
        - id: type
          type:
            - '"ec"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.ECKeyPairOptions<"pem", "der">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<string, Buffer>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_10
    name: 'generateKeyPairSync("ec", ECKeyPairOptions<"pem", "pem">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "ec", options:
        ECKeyPairOptions<"pem", "pem">)
      parameters:
        - id: type
          type:
            - '"ec"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.ECKeyPairOptions<"pem", "pem">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<string, string>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_4
    name: 'generateKeyPairSync("rsa", RSAKeyPairKeyObjectOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "rsa", options:
        RSAKeyPairKeyObjectOptions)
      parameters:
        - id: type
          type:
            - '"rsa"'
          description: ''
        - id: options
          type:
            - tslib.crypto.RSAKeyPairKeyObjectOptions
          description: ''
      return:
        type:
          - tslib.crypto.KeyPairKeyObjectResult
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_3
    name: 'generateKeyPairSync("rsa", RSAKeyPairOptions<"der", "der">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "rsa", options:
        RSAKeyPairOptions<"der", "der">)
      parameters:
        - id: type
          type:
            - '"rsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.RSAKeyPairOptions<"der", "der">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<Buffer, Buffer>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_2
    name: 'generateKeyPairSync("rsa", RSAKeyPairOptions<"der", "pem">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "rsa", options:
        RSAKeyPairOptions<"der", "pem">)
      parameters:
        - id: type
          type:
            - '"rsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.RSAKeyPairOptions<"der", "pem">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<Buffer, string>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync_1
    name: 'generateKeyPairSync("rsa", RSAKeyPairOptions<"pem", "der">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "rsa", options:
        RSAKeyPairOptions<"pem", "der">)
      parameters:
        - id: type
          type:
            - '"rsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.RSAKeyPairOptions<"pem", "der">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<string, Buffer>'
        description: ''
    package: tslib
  - uid: tslib.crypto.generateKeyPairSync
    name: 'generateKeyPairSync("rsa", RSAKeyPairOptions<"pem", "pem">)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function generateKeyPairSync(type: "rsa", options:
        RSAKeyPairOptions<"pem", "pem">)
      parameters:
        - id: type
          type:
            - '"rsa"'
          description: ''
        - id: options
          type:
            - 'tslib.crypto.RSAKeyPairOptions<"pem", "pem">'
          description: ''
      return:
        type:
          - 'tslib.crypto.KeyPairSyncResult<string, string>'
        description: ''
    package: tslib
  - uid: tslib.crypto.getCiphers
    name: getCiphers()
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCiphers()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: tslib
  - uid: tslib.crypto.getCurves
    name: getCurves()
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCurves()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: tslib
  - uid: tslib.crypto.getDiffieHellman
    name: getDiffieHellman(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getDiffieHellman(group_name: string)'
      parameters:
        - id: group_name
          type:
            - string
          description: ''
      return:
        type:
          - tslib.crypto.DiffieHellman
        description: ''
    package: tslib
  - uid: tslib.crypto.getHashes
    name: getHashes()
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getHashes()
      parameters: []
      return:
        type:
          - 'string[]'
        description: ''
    package: tslib
  - uid: tslib.crypto.pbkdf2
    name: >-
      pbkdf2(BinaryLike, BinaryLike, number, number, string, (err: Error | null,
      derivedKey: Buffer) => any)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function pbkdf2(password: BinaryLike, salt: BinaryLike, iterations:
        number, keylen: number, digest: string, callback: (err: Error | null,
        derivedKey: Buffer) => any)
      parameters:
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: salt
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: iterations
          type:
            - number
          description: ''
        - id: keylen
          type:
            - number
          description: ''
        - id: digest
          type:
            - string
          description: ''
        - id: callback
          type:
            - '(err: Error | null, derivedKey: Buffer) => any'
          description: ''
    package: tslib
  - uid: tslib.crypto.pbkdf2Sync
    name: 'pbkdf2Sync(BinaryLike, BinaryLike, number, number, string)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function pbkdf2Sync(password: BinaryLike, salt: BinaryLike, iterations:
        number, keylen: number, digest: string)
      parameters:
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: salt
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: iterations
          type:
            - number
          description: ''
        - id: keylen
          type:
            - number
          description: ''
        - id: digest
          type:
            - string
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.privateDecrypt
    name: 'privateDecrypt(RsaPrivateKey | KeyLike, NodeJS.ArrayBufferView)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function privateDecrypt(private_key: RsaPrivateKey | KeyLike, buffer:
        NodeJS.ArrayBufferView)
      parameters:
        - id: private_key
          type:
            - tslib.crypto.RsaPrivateKey | tslib.crypto.KeyLike
          description: ''
        - id: buffer
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.privateEncrypt
    name: 'privateEncrypt(RsaPrivateKey | KeyLike, NodeJS.ArrayBufferView)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function privateEncrypt(private_key: RsaPrivateKey | KeyLike, buffer:
        NodeJS.ArrayBufferView)
      parameters:
        - id: private_key
          type:
            - tslib.crypto.RsaPrivateKey | tslib.crypto.KeyLike
          description: ''
        - id: buffer
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.pseudoRandomBytes
    name: pseudoRandomBytes(number)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function pseudoRandomBytes(size: number)'
      parameters:
        - id: size
          type:
            - number
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.pseudoRandomBytes_1
    name: 'pseudoRandomBytes(number, (err: Error | null, buf: Buffer) => void)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function pseudoRandomBytes(size: number, callback: (err: Error | null,
        buf: Buffer) => void)
      parameters:
        - id: size
          type:
            - number
          description: ''
        - id: callback
          type:
            - '(err: Error | null, buf: Buffer) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.publicDecrypt
    name: >-
      publicDecrypt(RsaPublicKey | RsaPrivateKey | KeyLike,
      NodeJS.ArrayBufferView)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function publicDecrypt(key: RsaPublicKey | RsaPrivateKey | KeyLike,
        buffer: NodeJS.ArrayBufferView)
      parameters:
        - id: key
          type:
            - >-
              tslib.crypto.RsaPublicKey | tslib.crypto.RsaPrivateKey |
              tslib.crypto.KeyLike
          description: ''
        - id: buffer
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.publicEncrypt
    name: >-
      publicEncrypt(RsaPublicKey | RsaPrivateKey | KeyLike,
      NodeJS.ArrayBufferView)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function publicEncrypt(key: RsaPublicKey | RsaPrivateKey | KeyLike,
        buffer: NodeJS.ArrayBufferView)
      parameters:
        - id: key
          type:
            - >-
              tslib.crypto.RsaPublicKey | tslib.crypto.RsaPrivateKey |
              tslib.crypto.KeyLike
          description: ''
        - id: buffer
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.randomBytes
    name: randomBytes(number)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function randomBytes(size: number)'
      parameters:
        - id: size
          type:
            - number
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.randomBytes_1
    name: 'randomBytes(number, (err: Error | null, buf: Buffer) => void)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function randomBytes(size: number, callback: (err: Error | null, buf:
        Buffer) => void)
      parameters:
        - id: size
          type:
            - number
          description: ''
        - id: callback
          type:
            - '(err: Error | null, buf: Buffer) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.randomFill
    name: 'randomFill(T, (err: Error | null, buf: T) => void)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function randomFill<T>(buffer: T, callback: (err: Error | null, buf: T)
        => void)
      parameters:
        - id: buffer
          type:
            - T
          description: ''
        - id: callback
          type:
            - '(err: Error | null, buf: T) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.randomFill_1
    name: 'randomFill(T, number, (err: Error | null, buf: T) => void)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function randomFill<T>(buffer: T, offset: number, callback: (err: Error
        | null, buf: T) => void)
      parameters:
        - id: buffer
          type:
            - T
          description: ''
        - id: offset
          type:
            - number
          description: ''
        - id: callback
          type:
            - '(err: Error | null, buf: T) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.randomFill_2
    name: 'randomFill(T, number, number, (err: Error | null, buf: T) => void)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function randomFill<T>(buffer: T, offset: number, size: number,
        callback: (err: Error | null, buf: T) => void)
      parameters:
        - id: buffer
          type:
            - T
          description: ''
        - id: offset
          type:
            - number
          description: ''
        - id: size
          type:
            - number
          description: ''
        - id: callback
          type:
            - '(err: Error | null, buf: T) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.randomFillSync
    name: 'randomFillSync(T, undefined | number, undefined | number)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function randomFillSync<T>(buffer: T, offset?: undefined | number,
        size?: undefined | number)
      parameters:
        - id: buffer
          type:
            - T
          description: ''
        - id: offset
          type:
            - undefined | number
          description: ''
          optional: true
        - id: size
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - T
        description: ''
    package: tslib
  - uid: tslib.crypto.scrypt
    name: >-
      scrypt(BinaryLike, BinaryLike, number, (err: Error | null, derivedKey:
      Buffer) => void)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function scrypt(password: BinaryLike, salt: BinaryLike, keylen: number,
        callback: (err: Error | null, derivedKey: Buffer) => void)
      parameters:
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: salt
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: keylen
          type:
            - number
          description: ''
        - id: callback
          type:
            - '(err: Error | null, derivedKey: Buffer) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.scrypt_1
    name: >-
      scrypt(BinaryLike, BinaryLike, number, ScryptOptions, (err: Error | null,
      derivedKey: Buffer) => void)
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function scrypt(password: BinaryLike, salt: BinaryLike, keylen: number,
        options: ScryptOptions, callback: (err: Error | null, derivedKey:
        Buffer) => void)
      parameters:
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: salt
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: keylen
          type:
            - number
          description: ''
        - id: options
          type:
            - tslib.crypto.ScryptOptions
          description: ''
        - id: callback
          type:
            - '(err: Error | null, derivedKey: Buffer) => void'
          description: ''
    package: tslib
  - uid: tslib.crypto.scryptSync
    name: 'scryptSync(BinaryLike, BinaryLike, number, ScryptOptions)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function scryptSync(password: BinaryLike, salt: BinaryLike, keylen:
        number, options?: ScryptOptions)
      parameters:
        - id: password
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: salt
          type:
            - tslib.crypto.BinaryLike
          description: ''
        - id: keylen
          type:
            - number
          description: ''
        - id: options
          type:
            - tslib.crypto.ScryptOptions
          description: ''
          optional: true
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.sign
    name: >-
      sign(string | null | undefined, NodeJS.ArrayBufferView, KeyLike |
      SignPrivateKeyInput)
    children: []
    type: function
    langs:
      - typeScript
    summary: >
      Calculates and returns the signature for `data` using the given private
      key and

      algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is

      dependent upon the key type (especially Ed25519 and Ed448).

      If `key` is not a [`KeyObject`][], this function behaves as if `key` had
      been

      passed to [`crypto.createPrivateKey()`][].
    syntax:
      content: >-
        function sign(algorithm: string | null | undefined, data:
        NodeJS.ArrayBufferView, key: KeyLike | SignPrivateKeyInput)
      parameters:
        - id: algorithm
          type:
            - string | null | undefined
          description: ''
        - id: data
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
        - id: key
          type:
            - tslib.crypto.KeyLike | tslib.crypto.SignPrivateKeyInput
          description: ''
      return:
        type:
          - Buffer
        description: ''
    package: tslib
  - uid: tslib.crypto.timingSafeEqual
    name: 'timingSafeEqual(NodeJS.ArrayBufferView, NodeJS.ArrayBufferView)'
    children: []
    type: function
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function timingSafeEqual(a: NodeJS.ArrayBufferView, b:
        NodeJS.ArrayBufferView)
      parameters:
        - id: a
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
        - id: b
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.crypto.verify
    name: >-
      verify(string | null | undefined, NodeJS.ArrayBufferView, KeyLike |
      VerifyKeyWithOptions, NodeJS.ArrayBufferView)
    children: []
    type: function
    langs:
      - typeScript
    summary: >
      Calculates and returns the signature for `data` using the given private
      key and

      algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is

      dependent upon the key type (especially Ed25519 and Ed448).

      If `key` is not a [`KeyObject`][], this function behaves as if `key` had
      been

      passed to [`crypto.createPublicKey()`][].
    syntax:
      content: >-
        function verify(algorithm: string | null | undefined, data:
        NodeJS.ArrayBufferView, key: KeyLike | VerifyKeyWithOptions, signature:
        NodeJS.ArrayBufferView)
      parameters:
        - id: algorithm
          type:
            - string | null | undefined
          description: ''
        - id: data
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
        - id: key
          type:
            - tslib.crypto.KeyLike | tslib.crypto.VerifyKeyWithOptions
          description: ''
        - id: signature
          type:
            - tslib.NodeJS.ArrayBufferView
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
references:
  - uid: tslib.stream.internal.Transform
    name: Transform
    spec.typeScript:
      - name: Transform
        fullName: Transform
        uid: tslib.stream.internal.Transform
  - uid: tslib.AbortError.Error
    name: Error
    spec.typeScript:
      - name: Error
        fullName: Error
        uid: tslib.AbortError.Error
  - uid: tslib.NodeJS.WritableStream
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: tslib.NodeJS.WritableStream
  - uid: tslib.BufferEncoding
    name: BufferEncoding
    spec.typeScript:
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: tslib.BufferEncoding
  - uid: tslib.crypto.BinaryLike
    name: BinaryLike
    spec.typeScript:
      - name: BinaryLike
        fullName: BinaryLike
        uid: tslib.crypto.BinaryLike
  - uid: tslib.crypto.Utf8AsciiBinaryEncoding
    name: Utf8AsciiBinaryEncoding
    spec.typeScript:
      - name: Utf8AsciiBinaryEncoding
        fullName: Utf8AsciiBinaryEncoding
        uid: tslib.crypto.Utf8AsciiBinaryEncoding
  - uid: tslib.NodeJS.ArrayBufferView
    name: ArrayBufferView
    spec.typeScript:
      - name: ArrayBufferView
        fullName: ArrayBufferView
        uid: tslib.NodeJS.ArrayBufferView
  - uid: tslib.crypto.HexBase64BinaryEncoding
    name: HexBase64BinaryEncoding
    spec.typeScript:
      - name: HexBase64BinaryEncoding
        fullName: HexBase64BinaryEncoding
        uid: tslib.crypto.HexBase64BinaryEncoding
  - uid: tslib.crypto.Utf8AsciiBinaryEncoding | undefined
    name: Utf8AsciiBinaryEncoding | undefined
    spec.typeScript:
      - name: Utf8AsciiBinaryEncoding
        fullName: Utf8AsciiBinaryEncoding
        uid: tslib.crypto.Utf8AsciiBinaryEncoding
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: tslib.NodeJS.ReadableStream
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: tslib.NodeJS.ReadableStream
  - uid: tslib.stream.internal.ReadableOptions
    name: ReadableOptions
    spec.typeScript:
      - name: ReadableOptions
        fullName: ReadableOptions
        uid: tslib.stream.internal.ReadableOptions
  - uid: tslib.stream.internal.Readable
    name: Readable
    spec.typeScript:
      - name: Readable
        fullName: Readable
        uid: tslib.stream.internal.Readable
  - uid: tslib.crypto.HexBase64BinaryEncoding | undefined
    name: HexBase64BinaryEncoding | undefined
    spec.typeScript:
      - name: HexBase64BinaryEncoding
        fullName: HexBase64BinaryEncoding
        uid: tslib.crypto.HexBase64BinaryEncoding
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: tslib.crypto.HexBase64Latin1Encoding
    name: HexBase64Latin1Encoding
    spec.typeScript:
      - name: HexBase64Latin1Encoding
        fullName: HexBase64Latin1Encoding
        uid: tslib.crypto.HexBase64Latin1Encoding
  - uid: tslib.crypto.ECDHKeyFormat
    name: ECDHKeyFormat
    spec.typeScript:
      - name: ECDHKeyFormat
        fullName: ECDHKeyFormat
        uid: tslib.crypto.ECDHKeyFormat
  - uid: tslib.crypto.Hash
    name: Hash
    spec.typeScript:
      - name: Hash
        fullName: Hash
        uid: tslib.crypto.Hash
  - uid: tslib.crypto.Utf8AsciiLatin1Encoding
    name: Utf8AsciiLatin1Encoding
    spec.typeScript:
      - name: Utf8AsciiLatin1Encoding
        fullName: Utf8AsciiLatin1Encoding
        uid: tslib.crypto.Utf8AsciiLatin1Encoding
  - uid: tslib.crypto.Hmac
    name: Hmac
    spec.typeScript:
      - name: Hmac
        fullName: Hmac
        uid: tslib.crypto.Hmac
  - uid: tslib.crypto.KeyType
    name: KeyType
    spec.typeScript:
      - name: KeyType
        fullName: KeyType
        uid: tslib.crypto.KeyType
  - uid: tslib.crypto.KeyObjectType
    name: KeyObjectType
    spec.typeScript:
      - name: KeyObjectType
        fullName: KeyObjectType
        uid: tslib.crypto.KeyObjectType
  - uid: tslib.crypto.KeyExportOptions<"pem">
    name: KeyExportOptions<"pem">
    spec.typeScript:
      - name: KeyExportOptions
        fullName: KeyExportOptions
        uid: tslib.crypto.KeyExportOptions
      - name: <"pem">
        fullName: <"pem">
  - uid: tslib.crypto.KeyExportOptions<"der">
    name: KeyExportOptions<"der">
    spec.typeScript:
      - name: KeyExportOptions
        fullName: KeyExportOptions
        uid: tslib.crypto.KeyExportOptions
      - name: <"der">
        fullName: <"der">
  - uid: tslib.stream.internal.Writable
    name: Writable
    spec.typeScript:
      - name: Writable
        fullName: Writable
        uid: tslib.stream.internal.Writable
  - uid: tslib.crypto.SignPrivateKeyInput | tslib.crypto.KeyLike
    name: KeyLike
    spec.typeScript:
      - name: SignPrivateKeyInput
        fullName: SignPrivateKeyInput
        uid: tslib.crypto.SignPrivateKeyInput
      - name: ' | '
        fullName: ' | '
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
  - uid: tslib.crypto.Signer
    name: Signer
    spec.typeScript:
      - name: Signer
        fullName: Signer
        uid: tslib.crypto.Signer
  - uid: tslib.crypto.Verify
    name: Verify
    spec.typeScript:
      - name: Verify
        fullName: Verify
        uid: tslib.crypto.Verify
  - uid: object | tslib.crypto.KeyLike
    name: KeyLike
    spec.typeScript:
      - name: 'object | '
        fullName: 'object | '
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
  - uid: tslib.crypto.Cipher
    name: Cipher
    spec.typeScript:
      - name: Cipher
        fullName: Cipher
        uid: tslib.crypto.Cipher
  - uid: tslib.stream.internal.TransformOptions
    name: TransformOptions
    spec.typeScript:
      - name: TransformOptions
        fullName: TransformOptions
        uid: tslib.stream.internal.TransformOptions
  - uid: tslib.stream.internal.TransformCallback
    name: TransformCallback
    spec.typeScript:
      - name: TransformCallback
        fullName: TransformCallback
        uid: tslib.stream.internal.TransformCallback
  - uid: tslib.crypto.BasePrivateKeyEncodingOptions<PrivF> & Object
    name: BasePrivateKeyEncodingOptions<PrivF> & Object
    spec.typeScript:
      - name: BasePrivateKeyEncodingOptions
        fullName: BasePrivateKeyEncodingOptions
        uid: tslib.crypto.BasePrivateKeyEncodingOptions
      - name: <PrivF> & Object
        fullName: <PrivF> & Object
  - uid: tslib.crypto.Decipher
    name: Decipher
    spec.typeScript:
      - name: Decipher
        fullName: Decipher
        uid: tslib.crypto.Decipher
  - uid: tslib.crypto.KeyObject
    name: KeyObject
    spec.typeScript:
      - name: KeyObject
        fullName: KeyObject
        uid: tslib.crypto.KeyObject
  - uid: tslib.crypto.KeyFormat
    name: KeyFormat
    spec.typeScript:
      - name: KeyFormat
        fullName: KeyFormat
        uid: tslib.crypto.KeyFormat
  - uid: tslib.crypto.KeyLike
    name: KeyLike
    spec.typeScript:
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
  - uid: tslib.NodeJS.TypedArray
    name: TypedArray
    spec.typeScript:
      - name: TypedArray
        fullName: TypedArray
        uid: tslib.NodeJS.TypedArray
  - uid: tslib.crypto.PrivateKeyInput
    name: PrivateKeyInput
    spec.typeScript:
      - name: PrivateKeyInput
        fullName: PrivateKeyInput
        uid: tslib.crypto.PrivateKeyInput
  - uid: tslib.crypto.CipherCCMTypes
    name: CipherCCMTypes
    spec.typeScript:
      - name: CipherCCMTypes
        fullName: CipherCCMTypes
        uid: tslib.crypto.CipherCCMTypes
  - uid: tslib.crypto.CipherCCMOptions
    name: CipherCCMOptions
    spec.typeScript:
      - name: CipherCCMOptions
        fullName: CipherCCMOptions
        uid: tslib.crypto.CipherCCMOptions
  - uid: tslib.crypto.CipherCCM
    name: CipherCCM
    spec.typeScript:
      - name: CipherCCM
        fullName: CipherCCM
        uid: tslib.crypto.CipherCCM
  - uid: tslib.crypto.CipherGCMTypes
    name: CipherGCMTypes
    spec.typeScript:
      - name: CipherGCMTypes
        fullName: CipherGCMTypes
        uid: tslib.crypto.CipherGCMTypes
  - uid: tslib.crypto.CipherGCMOptions
    name: CipherGCMOptions
    spec.typeScript:
      - name: CipherGCMOptions
        fullName: CipherGCMOptions
        uid: tslib.crypto.CipherGCMOptions
  - uid: tslib.crypto.CipherGCM
    name: CipherGCM
    spec.typeScript:
      - name: CipherGCM
        fullName: CipherGCM
        uid: tslib.crypto.CipherGCM
  - uid: tslib.crypto.CipherKey
    name: CipherKey
    spec.typeScript:
      - name: CipherKey
        fullName: CipherKey
        uid: tslib.crypto.CipherKey
  - uid: tslib.crypto.BinaryLike | null
    name: BinaryLike | null
    spec.typeScript:
      - name: BinaryLike
        fullName: BinaryLike
        uid: tslib.crypto.BinaryLike
      - name: ' | null'
        fullName: ' | null'
  - uid: tslib.crypto.DecipherCCM
    name: DecipherCCM
    spec.typeScript:
      - name: DecipherCCM
        fullName: DecipherCCM
        uid: tslib.crypto.DecipherCCM
  - uid: tslib.crypto.DecipherGCM
    name: DecipherGCM
    spec.typeScript:
      - name: DecipherGCM
        fullName: DecipherGCM
        uid: tslib.crypto.DecipherGCM
  - uid: number | tslib.NodeJS.ArrayBufferView
    name: ArrayBufferView
    spec.typeScript:
      - name: 'number | '
        fullName: 'number | '
      - name: ArrayBufferView
        fullName: ArrayBufferView
        uid: tslib.NodeJS.ArrayBufferView
  - uid: tslib.crypto.DiffieHellman
    name: DiffieHellman
    spec.typeScript:
      - name: DiffieHellman
        fullName: DiffieHellman
        uid: tslib.crypto.DiffieHellman
  - uid: tslib.crypto.ECDH
    name: ECDH
    spec.typeScript:
      - name: ECDH
        fullName: ECDH
        uid: tslib.crypto.ECDH
  - uid: tslib.crypto.HashOptions
    name: HashOptions
    spec.typeScript:
      - name: HashOptions
        fullName: HashOptions
        uid: tslib.crypto.HashOptions
  - uid: tslib.crypto.PrivateKeyInput | string | Buffer
    name: PrivateKeyInput | string | Buffer
    spec.typeScript:
      - name: PrivateKeyInput
        fullName: PrivateKeyInput
        uid: tslib.crypto.PrivateKeyInput
      - name: ' | string | Buffer'
        fullName: ' | string | Buffer'
  - uid: tslib.crypto.PublicKeyInput | string | Buffer | tslib.crypto.KeyObject
    name: KeyObject
    spec.typeScript:
      - name: PublicKeyInput
        fullName: PublicKeyInput
        uid: tslib.crypto.PublicKeyInput
      - name: ' | string | Buffer | '
        fullName: ' | string | Buffer | '
      - name: KeyObject
        fullName: KeyObject
        uid: tslib.crypto.KeyObject
  - uid: 'tslib.crypto.RSAKeyPairOptions<"pem", "pem">'
    name: 'RSAKeyPairOptions<"pem", "pem">'
    spec.typeScript:
      - name: RSAKeyPairOptions
        fullName: RSAKeyPairOptions
        uid: tslib.crypto.RSAKeyPairOptions
      - name: '<"pem", "pem">'
        fullName: '<"pem", "pem">'
  - uid: 'tslib.crypto.KeyPairSyncResult<string, string>'
    name: 'KeyPairSyncResult<string, string>'
    spec.typeScript:
      - name: KeyPairSyncResult
        fullName: KeyPairSyncResult
        uid: tslib.crypto.KeyPairSyncResult
      - name: '<string, string>'
        fullName: '<string, string>'
  - uid: 'tslib.crypto.RSAKeyPairOptions<"pem", "der">'
    name: 'RSAKeyPairOptions<"pem", "der">'
    spec.typeScript:
      - name: RSAKeyPairOptions
        fullName: RSAKeyPairOptions
        uid: tslib.crypto.RSAKeyPairOptions
      - name: '<"pem", "der">'
        fullName: '<"pem", "der">'
  - uid: 'tslib.crypto.KeyPairSyncResult<string, Buffer>'
    name: 'KeyPairSyncResult<string, Buffer>'
    spec.typeScript:
      - name: KeyPairSyncResult
        fullName: KeyPairSyncResult
        uid: tslib.crypto.KeyPairSyncResult
      - name: '<string, Buffer>'
        fullName: '<string, Buffer>'
  - uid: 'tslib.crypto.RSAKeyPairOptions<"der", "pem">'
    name: 'RSAKeyPairOptions<"der", "pem">'
    spec.typeScript:
      - name: RSAKeyPairOptions
        fullName: RSAKeyPairOptions
        uid: tslib.crypto.RSAKeyPairOptions
      - name: '<"der", "pem">'
        fullName: '<"der", "pem">'
  - uid: 'tslib.crypto.KeyPairSyncResult<Buffer, string>'
    name: 'KeyPairSyncResult<Buffer, string>'
    spec.typeScript:
      - name: KeyPairSyncResult
        fullName: KeyPairSyncResult
        uid: tslib.crypto.KeyPairSyncResult
      - name: '<Buffer, string>'
        fullName: '<Buffer, string>'
  - uid: 'tslib.crypto.RSAKeyPairOptions<"der", "der">'
    name: 'RSAKeyPairOptions<"der", "der">'
    spec.typeScript:
      - name: RSAKeyPairOptions
        fullName: RSAKeyPairOptions
        uid: tslib.crypto.RSAKeyPairOptions
      - name: '<"der", "der">'
        fullName: '<"der", "der">'
  - uid: 'tslib.crypto.KeyPairSyncResult<Buffer, Buffer>'
    name: 'KeyPairSyncResult<Buffer, Buffer>'
    spec.typeScript:
      - name: KeyPairSyncResult
        fullName: KeyPairSyncResult
        uid: tslib.crypto.KeyPairSyncResult
      - name: '<Buffer, Buffer>'
        fullName: '<Buffer, Buffer>'
  - uid: tslib.crypto.RSAKeyPairKeyObjectOptions
    name: RSAKeyPairKeyObjectOptions
    spec.typeScript:
      - name: RSAKeyPairKeyObjectOptions
        fullName: RSAKeyPairKeyObjectOptions
        uid: tslib.crypto.RSAKeyPairKeyObjectOptions
  - uid: tslib.crypto.KeyPairKeyObjectResult
    name: KeyPairKeyObjectResult
    spec.typeScript:
      - name: KeyPairKeyObjectResult
        fullName: KeyPairKeyObjectResult
        uid: tslib.crypto.KeyPairKeyObjectResult
  - uid: 'tslib.crypto.DSAKeyPairOptions<"pem", "pem">'
    name: 'DSAKeyPairOptions<"pem", "pem">'
    spec.typeScript:
      - name: DSAKeyPairOptions
        fullName: DSAKeyPairOptions
        uid: tslib.crypto.DSAKeyPairOptions
      - name: '<"pem", "pem">'
        fullName: '<"pem", "pem">'
  - uid: 'tslib.crypto.DSAKeyPairOptions<"pem", "der">'
    name: 'DSAKeyPairOptions<"pem", "der">'
    spec.typeScript:
      - name: DSAKeyPairOptions
        fullName: DSAKeyPairOptions
        uid: tslib.crypto.DSAKeyPairOptions
      - name: '<"pem", "der">'
        fullName: '<"pem", "der">'
  - uid: 'tslib.crypto.DSAKeyPairOptions<"der", "pem">'
    name: 'DSAKeyPairOptions<"der", "pem">'
    spec.typeScript:
      - name: DSAKeyPairOptions
        fullName: DSAKeyPairOptions
        uid: tslib.crypto.DSAKeyPairOptions
      - name: '<"der", "pem">'
        fullName: '<"der", "pem">'
  - uid: 'tslib.crypto.DSAKeyPairOptions<"der", "der">'
    name: 'DSAKeyPairOptions<"der", "der">'
    spec.typeScript:
      - name: DSAKeyPairOptions
        fullName: DSAKeyPairOptions
        uid: tslib.crypto.DSAKeyPairOptions
      - name: '<"der", "der">'
        fullName: '<"der", "der">'
  - uid: tslib.crypto.DSAKeyPairKeyObjectOptions
    name: DSAKeyPairKeyObjectOptions
    spec.typeScript:
      - name: DSAKeyPairKeyObjectOptions
        fullName: DSAKeyPairKeyObjectOptions
        uid: tslib.crypto.DSAKeyPairKeyObjectOptions
  - uid: 'tslib.crypto.ECKeyPairOptions<"pem", "pem">'
    name: 'ECKeyPairOptions<"pem", "pem">'
    spec.typeScript:
      - name: ECKeyPairOptions
        fullName: ECKeyPairOptions
        uid: tslib.crypto.ECKeyPairOptions
      - name: '<"pem", "pem">'
        fullName: '<"pem", "pem">'
  - uid: 'tslib.crypto.ECKeyPairOptions<"pem", "der">'
    name: 'ECKeyPairOptions<"pem", "der">'
    spec.typeScript:
      - name: ECKeyPairOptions
        fullName: ECKeyPairOptions
        uid: tslib.crypto.ECKeyPairOptions
      - name: '<"pem", "der">'
        fullName: '<"pem", "der">'
  - uid: 'tslib.crypto.ECKeyPairOptions<"der", "pem">'
    name: 'ECKeyPairOptions<"der", "pem">'
    spec.typeScript:
      - name: ECKeyPairOptions
        fullName: ECKeyPairOptions
        uid: tslib.crypto.ECKeyPairOptions
      - name: '<"der", "pem">'
        fullName: '<"der", "pem">'
  - uid: 'tslib.crypto.ECKeyPairOptions<"der", "der">'
    name: 'ECKeyPairOptions<"der", "der">'
    spec.typeScript:
      - name: ECKeyPairOptions
        fullName: ECKeyPairOptions
        uid: tslib.crypto.ECKeyPairOptions
      - name: '<"der", "der">'
        fullName: '<"der", "der">'
  - uid: tslib.crypto.ECKeyPairKeyObjectOptions
    name: ECKeyPairKeyObjectOptions
    spec.typeScript:
      - name: ECKeyPairKeyObjectOptions
        fullName: ECKeyPairKeyObjectOptions
        uid: tslib.crypto.ECKeyPairKeyObjectOptions
  - uid: tslib.crypto.RsaPrivateKey | tslib.crypto.KeyLike
    name: KeyLike
    spec.typeScript:
      - name: RsaPrivateKey
        fullName: RsaPrivateKey
        uid: tslib.crypto.RsaPrivateKey
      - name: ' | '
        fullName: ' | '
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
  - uid: >-
      tslib.crypto.RsaPublicKey | tslib.crypto.RsaPrivateKey |
      tslib.crypto.KeyLike
    name: KeyLike
    spec.typeScript:
      - name: RsaPublicKey
        fullName: RsaPublicKey
        uid: tslib.crypto.RsaPublicKey
      - name: ' | '
        fullName: ' | '
      - name: RsaPrivateKey
        fullName: RsaPrivateKey
        uid: tslib.crypto.RsaPrivateKey
      - name: ' | '
        fullName: ' | '
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
  - uid: tslib.crypto.ScryptOptions
    name: ScryptOptions
    spec.typeScript:
      - name: ScryptOptions
        fullName: ScryptOptions
        uid: tslib.crypto.ScryptOptions
  - uid: tslib.crypto.KeyLike | tslib.crypto.SignPrivateKeyInput
    name: SignPrivateKeyInput
    spec.typeScript:
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
      - name: ' | '
        fullName: ' | '
      - name: SignPrivateKeyInput
        fullName: SignPrivateKeyInput
        uid: tslib.crypto.SignPrivateKeyInput
  - uid: tslib.crypto.KeyLike | tslib.crypto.VerifyKeyWithOptions
    name: VerifyKeyWithOptions
    spec.typeScript:
      - name: KeyLike
        fullName: KeyLike
        uid: tslib.crypto.KeyLike
      - name: ' | '
        fullName: ' | '
      - name: VerifyKeyWithOptions
        fullName: VerifyKeyWithOptions
        uid: tslib.crypto.VerifyKeyWithOptions
  - uid: tslib.crypto.BasePrivateKeyEncodingOptions
    name: BasePrivateKeyEncodingOptions
  - uid: tslib.crypto.Certificate
    name: Certificate
  - uid: tslib.crypto.createCipher
    name: createCipher
  - uid: tslib.crypto.createCipher_1
    name: createCipher_1
  - uid: tslib.crypto.createCipher_2
    name: createCipher_2
  - uid: tslib.crypto.createCipheriv
    name: createCipheriv
  - uid: tslib.crypto.createCipheriv_1
    name: createCipheriv_1
  - uid: tslib.crypto.createCipheriv_2
    name: createCipheriv_2
  - uid: tslib.crypto.createDecipher
    name: createDecipher
  - uid: tslib.crypto.createDecipher_1
    name: createDecipher_1
  - uid: tslib.crypto.createDecipher_2
    name: createDecipher_2
  - uid: tslib.crypto.createDecipheriv
    name: createDecipheriv
  - uid: tslib.crypto.createDecipheriv_1
    name: createDecipheriv_1
  - uid: tslib.crypto.createDecipheriv_2
    name: createDecipheriv_2
  - uid: tslib.crypto.createDiffieHellman_1
    name: createDiffieHellman_1
  - uid: tslib.crypto.createDiffieHellman
    name: createDiffieHellman
  - uid: tslib.crypto.createDiffieHellman_2
    name: createDiffieHellman_2
  - uid: tslib.crypto.createDiffieHellman_3
    name: createDiffieHellman_3
  - uid: tslib.crypto.createDiffieHellman_4
    name: createDiffieHellman_4
  - uid: tslib.crypto.createECDH
    name: createECDH
  - uid: tslib.crypto.createHash
    name: createHash
  - uid: tslib.crypto.createHmac
    name: createHmac
  - uid: tslib.crypto.createPrivateKey
    name: createPrivateKey
  - uid: tslib.crypto.createPublicKey
    name: createPublicKey
  - uid: tslib.crypto.createSecretKey
    name: createSecretKey
  - uid: tslib.crypto.createSign
    name: createSign
  - uid: tslib.crypto.createVerify
    name: createVerify
  - uid: tslib.crypto.DSAKeyPairOptions
    name: DSAKeyPairOptions
  - uid: tslib.crypto.ECKeyPairOptions
    name: ECKeyPairOptions
  - uid: tslib.crypto.generateKeyPairSync_9
    name: generateKeyPairSync_9
  - uid: tslib.crypto.generateKeyPairSync_8
    name: generateKeyPairSync_8
  - uid: tslib.crypto.generateKeyPairSync_7
    name: generateKeyPairSync_7
  - uid: tslib.crypto.generateKeyPairSync_6
    name: generateKeyPairSync_6
  - uid: tslib.crypto.generateKeyPairSync_5
    name: generateKeyPairSync_5
  - uid: tslib.crypto.generateKeyPairSync_14
    name: generateKeyPairSync_14
  - uid: tslib.crypto.generateKeyPairSync_13
    name: generateKeyPairSync_13
  - uid: tslib.crypto.generateKeyPairSync_12
    name: generateKeyPairSync_12
  - uid: tslib.crypto.generateKeyPairSync_11
    name: generateKeyPairSync_11
  - uid: tslib.crypto.generateKeyPairSync_10
    name: generateKeyPairSync_10
  - uid: tslib.crypto.generateKeyPairSync_4
    name: generateKeyPairSync_4
  - uid: tslib.crypto.generateKeyPairSync_3
    name: generateKeyPairSync_3
  - uid: tslib.crypto.generateKeyPairSync_2
    name: generateKeyPairSync_2
  - uid: tslib.crypto.generateKeyPairSync_1
    name: generateKeyPairSync_1
  - uid: tslib.crypto.generateKeyPairSync
    name: generateKeyPairSync
  - uid: tslib.crypto.getCiphers
    name: getCiphers
  - uid: tslib.crypto.getCurves
    name: getCurves
  - uid: tslib.crypto.getDiffieHellman
    name: getDiffieHellman
  - uid: tslib.crypto.getHashes
    name: getHashes
  - uid: tslib.crypto.KeyExportOptions
    name: KeyExportOptions
  - uid: tslib.crypto.KeyPairSyncResult
    name: KeyPairSyncResult
  - uid: tslib.crypto.pbkdf2
    name: pbkdf2
  - uid: tslib.crypto.pbkdf2Sync
    name: pbkdf2Sync
  - uid: tslib.crypto.privateDecrypt
    name: privateDecrypt
  - uid: tslib.crypto.privateEncrypt
    name: privateEncrypt
  - uid: tslib.crypto.pseudoRandomBytes
    name: pseudoRandomBytes
  - uid: tslib.crypto.pseudoRandomBytes_1
    name: pseudoRandomBytes_1
  - uid: tslib.crypto.publicDecrypt
    name: publicDecrypt
  - uid: tslib.crypto.publicEncrypt
    name: publicEncrypt
  - uid: tslib.crypto.PublicKeyInput
    name: PublicKeyInput
  - uid: tslib.crypto.randomBytes
    name: randomBytes
  - uid: tslib.crypto.randomBytes_1
    name: randomBytes_1
  - uid: tslib.crypto.randomFill
    name: randomFill
  - uid: tslib.crypto.randomFill_1
    name: randomFill_1
  - uid: tslib.crypto.randomFill_2
    name: randomFill_2
  - uid: tslib.crypto.randomFillSync
    name: randomFillSync
  - uid: tslib.crypto.RSAKeyPairOptions
    name: RSAKeyPairOptions
  - uid: tslib.crypto.RsaPrivateKey
    name: RsaPrivateKey
  - uid: tslib.crypto.RsaPublicKey
    name: RsaPublicKey
  - uid: tslib.crypto.scrypt
    name: scrypt
  - uid: tslib.crypto.scrypt_1
    name: scrypt_1
  - uid: tslib.crypto.scryptSync
    name: scryptSync
  - uid: tslib.crypto.sign
    name: sign
  - uid: tslib.crypto.SigningOptions
    name: SigningOptions
  - uid: tslib.crypto.SignPrivateKeyInput
    name: SignPrivateKeyInput
  - uid: tslib.crypto.timingSafeEqual
    name: timingSafeEqual
  - uid: tslib.crypto.verify
    name: verify
  - uid: tslib.crypto.VerifyKeyWithOptions
    name: VerifyKeyWithOptions
