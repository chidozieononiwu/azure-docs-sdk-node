### YamlMime:UniversalReference
items:
  - uid: tslib.perf_hooks.PerformanceObserver
    name: PerformanceObserver
    fullName: PerformanceObserver
    children:
      - tslib.perf_hooks.PerformanceObserver.asyncId
      - tslib.perf_hooks.PerformanceObserver.disconnect
      - tslib.perf_hooks.PerformanceObserver.emitDestroy
      - tslib.perf_hooks.PerformanceObserver.observe
      - tslib.perf_hooks.PerformanceObserver.constructor
      - tslib.perf_hooks.PerformanceObserver.runInAsyncScope
      - tslib.perf_hooks.PerformanceObserver.triggerAsyncId
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: tslib.async_hooks.AsyncResource
    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.asyncId
    name: asyncId()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function asyncId()
      parameters: []
      return:
        type:
          - number
        description: the unique ID assigned to this AsyncResource instance.
    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.disconnect
    name: disconnect()
    children: []
    type: method
    langs:
      - typeScript
    summary: Disconnects the PerformanceObserver instance from all notifications.
    syntax:
      content: function disconnect()
      parameters: []
    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.emitDestroy
    name: emitDestroy()
    children: []
    type: method
    langs:
      - typeScript
    summary: Call AsyncHooks destroy callbacks.
    syntax:
      content: function emitDestroy()
      parameters: []
    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.observe
    name: observe(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Subscribes the PerformanceObserver instance to notifications of new
      PerformanceEntry instances identified by options.entryTypes.

      When options.buffered is false, the callback will be invoked once for
      every PerformanceEntry instance.

      Property buffered defaults to false.
    syntax:
      content: 'function observe(options: Object)'
      parameters:
        - id: options
          type:
            - Object
          description: |+

    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.constructor
    name: PerformanceObserver(PerformanceObserverCallback)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new PerformanceObserver(callback: PerformanceObserverCallback)'
      parameters:
        - id: callback
          type:
            - tslib.perf_hooks.PerformanceObserverCallback
          description: ''
    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.runInAsyncScope
    name: 'runInAsyncScope((this: This, args: any[]) => Result, This, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Call the provided function with the provided arguments in the
      execution context of the async resource. This will establish the
      context, trigger the AsyncHooks before callbacks, call the function,
      trigger the AsyncHooks after callbacks, and then restore the original
      execution context.
    syntax:
      content: >-
        function runInAsyncScope<This>(fn: (this: This, args: any[]) => Result,
        thisArg?: This, args: any[])
      parameters:
        - id: fn
          type:
            - '(this: This, args: any[]) => Result'
          description: |-
            The function to call in the execution context of this
              async resource.
        - id: thisArg
          type:
            - This
          description: The receiver to be used for the function call.
          optional: true
        - id: args
          type:
            - 'any[]'
          description: |
            Optional arguments to pass to the function.
      return:
        type:
          - Result
        description: ''
    package: tslib
  - uid: tslib.perf_hooks.PerformanceObserver.triggerAsyncId
    name: triggerAsyncId()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function triggerAsyncId()
      parameters: []
      return:
        type:
          - number
        description: the trigger ID for this AsyncResource instance.
    package: tslib
references:
  - uid: tslib.async_hooks.AsyncResource
    name: AsyncResource
    spec.typeScript:
      - name: AsyncResource
        fullName: AsyncResource
        uid: tslib.async_hooks.AsyncResource
  - uid: tslib.perf_hooks.PerformanceObserverCallback
    name: PerformanceObserverCallback
    spec.typeScript:
      - name: PerformanceObserverCallback
        fullName: PerformanceObserverCallback
        uid: tslib.perf_hooks.PerformanceObserverCallback
  - uid: tslib.perf_hooks.PerformanceNodeTiming
    name: PerformanceNodeTiming
    spec.typeScript:
      - name: PerformanceNodeTiming
        fullName: PerformanceNodeTiming
        uid: tslib.perf_hooks.PerformanceNodeTiming
  - uid: 'tslib.perf_hooks.PerformanceEntry[]'
    name: 'PerformanceEntry[]'
    spec.typeScript:
      - name: PerformanceEntry
        fullName: PerformanceEntry
        uid: tslib.perf_hooks.PerformanceEntry
      - name: '[]'
        fullName: '[]'
  - uid: tslib.perf_hooks.PerformanceEntry
    name: PerformanceEntry
    spec.typeScript:
      - name: PerformanceEntry
        fullName: PerformanceEntry
        uid: tslib.perf_hooks.PerformanceEntry
  - uid: tslib.perf_hooks.EventLoopMonitorOptions
    name: EventLoopMonitorOptions
    spec.typeScript:
      - name: EventLoopMonitorOptions
        fullName: EventLoopMonitorOptions
        uid: tslib.perf_hooks.EventLoopMonitorOptions
  - uid: tslib.perf_hooks.EventLoopDelayMonitor
    name: EventLoopDelayMonitor
    spec.typeScript:
      - name: EventLoopDelayMonitor
        fullName: EventLoopDelayMonitor
        uid: tslib.perf_hooks.EventLoopDelayMonitor
