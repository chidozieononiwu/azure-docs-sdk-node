### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.BlockBlob'
    name: BlockBlob
    fullName: BlockBlob
    children:
      - '@azure/abort-controller.BlockBlob.constructor'
      - '@azure/abort-controller.BlockBlob.commitBlockList_2'
      - '@azure/abort-controller.BlockBlob.commitBlockList'
      - '@azure/abort-controller.BlockBlob.commitBlockList_1'
      - '@azure/abort-controller.BlockBlob.getBlockList_2'
      - '@azure/abort-controller.BlockBlob.getBlockList'
      - '@azure/abort-controller.BlockBlob.getBlockList_1'
      - '@azure/abort-controller.BlockBlob.stageBlock_2'
      - '@azure/abort-controller.BlockBlob.stageBlock'
      - '@azure/abort-controller.BlockBlob.stageBlock_1'
      - '@azure/abort-controller.BlockBlob.stageBlockFromURL_2'
      - '@azure/abort-controller.BlockBlob.stageBlockFromURL'
      - '@azure/abort-controller.BlockBlob.stageBlockFromURL_1'
      - '@azure/abort-controller.BlockBlob.upload_2'
      - '@azure/abort-controller.BlockBlob.upload'
      - '@azure/abort-controller.BlockBlob.upload_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a BlockBlob.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.constructor'
    name: BlockBlob(StorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a BlockBlob.
    syntax:
      content: 'new BlockBlob(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/abort-controller.StorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.commitBlockList_2'
    name: >-
      commitBlockList(BlockLookupList, BlockBlobCommitBlockListOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function commitBlockList(blocks: BlockLookupList, options:
        BlockBlobCommitBlockListOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: blocks
          type:
            - '@azure/abort-controller.BlockLookupList'
          description: ''
        - id: options
          type:
            - '@azure/abort-controller.BlockBlobCommitBlockListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.commitBlockList'
    name: >-
      commitBlockList(BlockLookupList,
      Models.BlockBlobCommitBlockListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Commit Block List operation writes a blob by specifying the list of
      block IDs that make up

      the blob. In order to be written as part of a blob, a block must have been
      successfully written

      to the server in a prior Put Block operation. You can call Put Block List
      to update a blob by

      uploading only those blocks that have changed, then committing the new and
      existing blocks

      together. You can do this by specifying whether to commit a block from the
      committed block list

      or from the uncommitted block list, or to commit the most recently
      uploaded version of the

      block, whichever list it may belong to.
    syntax:
      content: >-
        function commitBlockList(blocks: BlockLookupList, options?:
        Models.BlockBlobCommitBlockListOptionalParams)
      parameters:
        - id: blocks
          type:
            - '@azure/abort-controller.BlockLookupList'
          description: ''
        - id: options
          type:
            - Models.BlockBlobCommitBlockListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobCommitBlockListResponse>
        description: Promise<Models.BlockBlobCommitBlockListResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.commitBlockList_1'
    name: 'commitBlockList(BlockLookupList, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function commitBlockList(blocks: BlockLookupList, callback:
        ServiceCallback<void>)
      parameters:
        - id: blocks
          type:
            - '@azure/abort-controller.BlockLookupList'
          description: ''
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.getBlockList_2'
    name: >-
      getBlockList(Models.BlockListType, BlockBlobGetBlockListOptionalParams,
      ServiceCallback<BlockList>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBlockList(listType: Models.BlockListType, options:
        BlockBlobGetBlockListOptionalParams, callback:
        ServiceCallback<BlockList>)
      parameters:
        - id: listType
          type:
            - Models.BlockListType
          description: >-
            Specifies whether to return the list of committed blocks, the list
            of

            uncommitted blocks, or both lists together. Possible values include:
            'committed', 'uncommitted',

            'all'
        - id: options
          type:
            - '@azure/abort-controller.BlockBlobGetBlockListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - >-
              @azure/abort-controller.ServiceCallback<@azure/abort-controller.BlockList>
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.getBlockList'
    name: >-
      getBlockList(Models.BlockListType,
      Models.BlockBlobGetBlockListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Get Block List operation retrieves the list of blocks that have been
      uploaded as part of a

      block blob
    syntax:
      content: >-
        function getBlockList(listType: Models.BlockListType, options?:
        Models.BlockBlobGetBlockListOptionalParams)
      parameters:
        - id: listType
          type:
            - Models.BlockListType
          description: >-
            Specifies whether to return the list of committed blocks, the list
            of

            uncommitted blocks, or both lists together. Possible values include:
            'committed', 'uncommitted',

            'all'
        - id: options
          type:
            - Models.BlockBlobGetBlockListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobGetBlockListResponse>
        description: Promise<Models.BlockBlobGetBlockListResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.getBlockList_1'
    name: 'getBlockList(Models.BlockListType, ServiceCallback<BlockList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBlockList(listType: Models.BlockListType, callback:
        ServiceCallback<BlockList>)
      parameters:
        - id: listType
          type:
            - Models.BlockListType
          description: >-
            Specifies whether to return the list of committed blocks, the list
            of

            uncommitted blocks, or both lists together. Possible values include:
            'committed', 'uncommitted',

            'all'
        - id: callback
          type:
            - >-
              @azure/abort-controller.ServiceCallback<@azure/abort-controller.BlockList>
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.stageBlock_2'
    name: >-
      stageBlock(string, number, coreHttp.HttpRequestBody,
      BlockBlobStageBlockOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        coreHttp.HttpRequestBody, options: BlockBlobStageBlockOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: blockId
          type:
            - string
          description: >-
            A valid Base64 string value that identifies the block. Prior to
            encoding, the

            string must be less than or equal to 64 bytes in size. For a given
            blob, the length of the value

            specified for the blockid parameter must be the same size for each
            block.
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: options
          type:
            - '@azure/abort-controller.BlockBlobStageBlockOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.stageBlock'
    name: >-
      stageBlock(string, number, coreHttp.HttpRequestBody,
      Models.BlockBlobStageBlockOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        coreHttp.HttpRequestBody, options?:
        Models.BlockBlobStageBlockOptionalParams)
      parameters:
        - id: blockId
          type:
            - string
          description: >-
            A valid Base64 string value that identifies the block. Prior to
            encoding, the

            string must be less than or equal to 64 bytes in size. For a given
            blob, the length of the value

            specified for the blockid parameter must be the same size for each
            block.
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: options
          type:
            - Models.BlockBlobStageBlockOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobStageBlockResponse>
        description: Promise<Models.BlockBlobStageBlockResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.stageBlock_1'
    name: >-
      stageBlock(string, number, coreHttp.HttpRequestBody,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function stageBlock(blockId: string, contentLength: number, body:
        coreHttp.HttpRequestBody, callback: ServiceCallback<void>)
      parameters:
        - id: blockId
          type:
            - string
          description: >-
            A valid Base64 string value that identifies the block. Prior to
            encoding, the

            string must be less than or equal to 64 bytes in size. For a given
            blob, the length of the value

            specified for the blockid parameter must be the same size for each
            block.
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.stageBlockFromURL_2'
    name: >-
      stageBlockFromURL(string, number, string,
      BlockBlobStageBlockFromURLOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function stageBlockFromURL(blockId: string, contentLength: number,
        sourceUrl: string, options: BlockBlobStageBlockFromURLOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: blockId
          type:
            - string
          description: >-
            A valid Base64 string value that identifies the block. Prior to
            encoding, the

            string must be less than or equal to 64 bytes in size. For a given
            blob, the length of the value

            specified for the blockid parameter must be the same size for each
            block.
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: sourceUrl
          type:
            - string
          description: Specify a URL to the copy source.
        - id: options
          type:
            - '@azure/abort-controller.BlockBlobStageBlockFromURLOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.stageBlockFromURL'
    name: >-
      stageBlockFromURL(string, number, string,
      Models.BlockBlobStageBlockFromURLOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Stage Block operation creates a new block to be committed as part of a
      blob where the

      contents are read from a URL.
    syntax:
      content: >-
        function stageBlockFromURL(blockId: string, contentLength: number,
        sourceUrl: string, options?:
        Models.BlockBlobStageBlockFromURLOptionalParams)
      parameters:
        - id: blockId
          type:
            - string
          description: >-
            A valid Base64 string value that identifies the block. Prior to
            encoding, the

            string must be less than or equal to 64 bytes in size. For a given
            blob, the length of the value

            specified for the blockid parameter must be the same size for each
            block.
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: sourceUrl
          type:
            - string
          description: Specify a URL to the copy source.
        - id: options
          type:
            - Models.BlockBlobStageBlockFromURLOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobStageBlockFromURLResponse>
        description: Promise<Models.BlockBlobStageBlockFromURLResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.stageBlockFromURL_1'
    name: 'stageBlockFromURL(string, number, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function stageBlockFromURL(blockId: string, contentLength: number,
        sourceUrl: string, callback: ServiceCallback<void>)
      parameters:
        - id: blockId
          type:
            - string
          description: >-
            A valid Base64 string value that identifies the block. Prior to
            encoding, the

            string must be less than or equal to 64 bytes in size. For a given
            blob, the length of the value

            specified for the blockid parameter must be the same size for each
            block.
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: sourceUrl
          type:
            - string
          description: Specify a URL to the copy source.
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.upload_2'
    name: >-
      upload(coreHttp.HttpRequestBody, number, BlockBlobUploadOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function upload(body: coreHttp.HttpRequestBody, contentLength: number,
        options: BlockBlobUploadOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: options
          type:
            - '@azure/abort-controller.BlockBlobUploadOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.upload'
    name: >-
      upload(coreHttp.HttpRequestBody, number,
      Models.BlockBlobUploadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Upload Block Blob operation updates the content of an existing block
      blob. Updating an

      existing block blob overwrites any existing metadata on the blob. Partial
      updates are not

      supported with Put Blob; the content of the existing blob is overwritten
      with the content of the

      new blob. To perform a partial update of the content of a block blob, use
      the Put Block List

      operation.
    syntax:
      content: >-
        function upload(body: coreHttp.HttpRequestBody, contentLength: number,
        options?: Models.BlockBlobUploadOptionalParams)
      parameters:
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: options
          type:
            - Models.BlockBlobUploadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.BlockBlobUploadResponse>
        description: Promise<Models.BlockBlobUploadResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.BlockBlob.upload_1'
    name: 'upload(coreHttp.HttpRequestBody, number, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function upload(body: coreHttp.HttpRequestBody, contentLength: number,
        callback: ServiceCallback<void>)
      parameters:
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: contentLength
          type:
            - number
          description: The length of the request.
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.StorageClientContext'
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: '@azure/abort-controller.StorageClientContext'
  - uid: '@azure/abort-controller.BlockLookupList'
    name: BlockLookupList
    spec.typeScript:
      - name: BlockLookupList
        fullName: BlockLookupList
        uid: '@azure/abort-controller.BlockLookupList'
  - uid: '@azure/abort-controller.ServiceCallback<void>'
    name: ServiceCallback<void>
    spec.typeScript:
      - name: ServiceCallback
        fullName: ServiceCallback
        uid: '@azure/abort-controller.ServiceCallback'
      - name: <void>
        fullName: <void>
  - uid: '@azure/abort-controller.BlockBlobCommitBlockListOptionalParams'
    name: BlockBlobCommitBlockListOptionalParams
    spec.typeScript:
      - name: BlockBlobCommitBlockListOptionalParams
        fullName: BlockBlobCommitBlockListOptionalParams
        uid: '@azure/abort-controller.BlockBlobCommitBlockListOptionalParams'
  - uid: '@azure/abort-controller.ServiceCallback<@azure/abort-controller.BlockList>'
    name: BlockList>
    spec.typeScript:
      - name: ServiceCallback
        fullName: ServiceCallback
        uid: '@azure/abort-controller.ServiceCallback'
      - name: <
        fullName: <
      - name: BlockList
        fullName: BlockList
        uid: '@azure/abort-controller.BlockList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.BlockBlobGetBlockListOptionalParams'
    name: BlockBlobGetBlockListOptionalParams
    spec.typeScript:
      - name: BlockBlobGetBlockListOptionalParams
        fullName: BlockBlobGetBlockListOptionalParams
        uid: '@azure/abort-controller.BlockBlobGetBlockListOptionalParams'
  - uid: '@azure/abort-controller.BlockBlobStageBlockOptionalParams'
    name: BlockBlobStageBlockOptionalParams
    spec.typeScript:
      - name: BlockBlobStageBlockOptionalParams
        fullName: BlockBlobStageBlockOptionalParams
        uid: '@azure/abort-controller.BlockBlobStageBlockOptionalParams'
  - uid: '@azure/abort-controller.BlockBlobStageBlockFromURLOptionalParams'
    name: BlockBlobStageBlockFromURLOptionalParams
    spec.typeScript:
      - name: BlockBlobStageBlockFromURLOptionalParams
        fullName: BlockBlobStageBlockFromURLOptionalParams
        uid: '@azure/abort-controller.BlockBlobStageBlockFromURLOptionalParams'
  - uid: '@azure/abort-controller.BlockBlobUploadOptionalParams'
    name: BlockBlobUploadOptionalParams
    spec.typeScript:
      - name: BlockBlobUploadOptionalParams
        fullName: BlockBlobUploadOptionalParams
        uid: '@azure/abort-controller.BlockBlobUploadOptionalParams'
