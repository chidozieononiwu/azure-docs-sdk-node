### YamlMime:UniversalReference
items:
  - uid: '@opentelemetry/types.Stats'
    name: Stats
    fullName: Stats
    children:
      - '@opentelemetry/types.Stats.clear'
      - '@opentelemetry/types.Stats.createMeasureDouble'
      - '@opentelemetry/types.Stats.createMeasureInt64'
      - '@opentelemetry/types.Stats.createView'
      - '@opentelemetry/types.Stats.getCurrentTagContext'
      - '@opentelemetry/types.Stats.getMetrics'
      - '@opentelemetry/types.Stats.record'
      - '@opentelemetry/types.Stats.registerExporter'
      - '@opentelemetry/types.Stats.registerView'
      - '@opentelemetry/types.Stats.unregisterExporter'
      - '@opentelemetry/types.Stats.withTagContext'
    langs:
      - typeScript
    type: interface
    summary: Main interface for stats.
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.clear'
    name: clear()
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove all registered Views and exporters from the stats.
    syntax:
      content: function clear()
      parameters: []
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.createMeasureDouble'
    name: 'createMeasureDouble(string, MeasureUnit, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a measure of type Double.
    syntax:
      content: >-
        function createMeasureDouble(name: string, unit: MeasureUnit,
        description?: string)
      parameters:
        - id: name
          type:
            - string
          description: The measure name
        - id: unit
          type:
            - '@opentelemetry/types.MeasureUnit'
          description: The measure unit
        - id: description
          type:
            - string
          description: |
            The measure description
          optional: true
      return:
        type:
          - '@opentelemetry/types.Measure'
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.createMeasureInt64'
    name: 'createMeasureInt64(string, MeasureUnit, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Creates a measure of type Int64. Values must be integers up to
      Number.MAX_SAFE_INTERGER.
    syntax:
      content: >-
        function createMeasureInt64(name: string, unit: MeasureUnit,
        description?: string)
      parameters:
        - id: name
          type:
            - string
          description: The measure name
        - id: unit
          type:
            - '@opentelemetry/types.MeasureUnit'
          description: The measure unit
        - id: description
          type:
            - string
          description: |
            The measure description
          optional: true
      return:
        type:
          - '@opentelemetry/types.Measure'
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.createView'
    name: 'createView(string, Measure, AggregationType, TagKey[], string, number[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a view.
    syntax:
      content: >-
        function createView(name: string, measure: Measure, aggregation:
        AggregationType, tagKeys: TagKey[], description: string,
        bucketBoundaries?: number[])
      parameters:
        - id: name
          type:
            - string
          description: The view name
        - id: measure
          type:
            - '@opentelemetry/types.Measure'
          description: The view measure
        - id: aggregation
          type:
            - '@opentelemetry/types.AggregationType'
          description: The view aggregation type
        - id: tagKeys
          type:
            - '@opentelemetry/types.TagKey[]'
          description: The view columns (tag keys)
        - id: description
          type:
            - string
          description: The view description
        - id: bucketBoundaries
          type:
            - 'number[]'
          description: |
            The view bucket boundaries for a distribution
                aggregation type
          optional: true
      return:
        type:
          - '@opentelemetry/types.View'
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.getCurrentTagContext'
    name: getCurrentTagContext()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the current tag context.
    syntax:
      content: function getCurrentTagContext()
      parameters: []
      return:
        type:
          - '@opentelemetry/types.TagMap'
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.getMetrics'
    name: getMetrics()
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets a collection of produced Metric`s to be exported.
    syntax:
      content: function getMetrics()
      parameters: []
      return:
        type:
          - '@opentelemetry/types.Metric[]'
        description: The List of metrics.
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.record'
    name: 'record(Measurement[], TagMap, [key: string]: string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates all views with the new measurements.
    syntax:
      content: >-
        function record(measurements: Measurement[], tags?: TagMap,
        attachments?: [key: string]: string)
      parameters:
        - id: measurements
          type:
            - '@opentelemetry/types.Measurement[]'
          description: A list of measurements to record
        - id: tags
          type:
            - '@opentelemetry/types.TagMap'
          description: |-
            optional The tags to which the value is applied.
                tags could either be explicitly passed to the method, or implicitly
                read from current execution context.
          optional: true
        - id: attachments
          type:
            - '[key: string]: string'
          description: |
            optional The contextual information associated with an
                example value. The contextual information is represented as key - value
                string pairs.
          optional: true
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.registerExporter'
    name: registerExporter(StatsEventListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers an exporter to send stats data to a service.
    syntax:
      content: 'function registerExporter(exporter: StatsEventListener)'
      parameters:
        - id: exporter
          type:
            - '@opentelemetry/types.StatsEventListener'
          description: |
            An stats exporter
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.registerView'
    name: registerView(View)
    children: []
    type: method
    langs:
      - typeScript
    summary: Registers a view to listen to new measurements in its measure.
    syntax:
      content: 'function registerView(view: View)'
      parameters:
        - id: view
          type:
            - '@opentelemetry/types.View'
          description: |
            The view to be registered
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.unregisterExporter'
    name: unregisterExporter(StatsEventListener)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Unregisters an exporter. It should be called whenever the exporter is not
      needed anymore.
    syntax:
      content: 'function unregisterExporter(exporter: StatsEventListener)'
      parameters:
        - id: exporter
          type:
            - '@opentelemetry/types.StatsEventListener'
          description: |
            An stats exporter
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Stats.withTagContext'
    name: 'withTagContext(TagMap, Func<T>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enters the scope of code where the given `TagMap` is in the current
      context

      (replacing the previous `TagMap`).
    syntax:
      content: 'function withTagContext<T>(tags: TagMap, fn: Func<T>)'
      parameters:
        - id: tags
          type:
            - '@opentelemetry/types.TagMap'
          description: The TagMap to be set to the current context.
        - id: fn
          type:
            - '@opentelemetry/types.Func<T>'
          description: Callback function.
      return:
        type:
          - T
        description: The callback return.
    package: '@opentelemetry/types'
references:
  - uid: '@opentelemetry/types.MeasureUnit'
    name: MeasureUnit
    spec.typeScript:
      - name: MeasureUnit
        fullName: MeasureUnit
        uid: '@opentelemetry/types.MeasureUnit'
  - uid: '@opentelemetry/types.Measure'
    name: Measure
    spec.typeScript:
      - name: Measure
        fullName: Measure
        uid: '@opentelemetry/types.Measure'
  - uid: '@opentelemetry/types.AggregationType'
    name: AggregationType
    spec.typeScript:
      - name: AggregationType
        fullName: AggregationType
        uid: '@opentelemetry/types.AggregationType'
  - uid: '@opentelemetry/types.TagKey[]'
    name: 'TagKey[]'
    spec.typeScript:
      - name: TagKey
        fullName: TagKey
        uid: '@opentelemetry/types.TagKey'
      - name: '[]'
        fullName: '[]'
  - uid: '@opentelemetry/types.View'
    name: View
    spec.typeScript:
      - name: View
        fullName: View
        uid: '@opentelemetry/types.View'
  - uid: '@opentelemetry/types.TagMap'
    name: TagMap
    spec.typeScript:
      - name: TagMap
        fullName: TagMap
        uid: '@opentelemetry/types.TagMap'
  - uid: '@opentelemetry/types.Metric[]'
    name: 'Metric[]'
    spec.typeScript:
      - name: Metric
        fullName: Metric
        uid: '@opentelemetry/types.Metric'
      - name: '[]'
        fullName: '[]'
  - uid: '@opentelemetry/types.Measurement[]'
    name: 'Measurement[]'
    spec.typeScript:
      - name: Measurement
        fullName: Measurement
        uid: '@opentelemetry/types.Measurement'
      - name: '[]'
        fullName: '[]'
  - uid: '@opentelemetry/types.StatsEventListener'
    name: StatsEventListener
    spec.typeScript:
      - name: StatsEventListener
        fullName: StatsEventListener
        uid: '@opentelemetry/types.StatsEventListener'
  - uid: '@opentelemetry/types.Func<T>'
    name: Func<T>
    spec.typeScript:
      - name: Func
        fullName: Func
        uid: '@opentelemetry/types.Func'
      - name: <T>
        fullName: <T>
