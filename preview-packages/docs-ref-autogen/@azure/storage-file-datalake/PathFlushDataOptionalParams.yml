### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams'
    name: PathFlushDataOptionalParams
    fullName: PathFlushDataOptionalParams
    children:
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.abortSignal'
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.close'
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.contentLength'
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.customHeaders'
      - >-
        @azure/storage-file-datalake.PathFlushDataOptionalParams.leaseAccessConditions
      - >-
        @azure/storage-file-datalake.PathFlushDataOptionalParams.modifiedAccessConditions
      - >-
        @azure/storage-file-datalake.PathFlushDataOptionalParams.onDownloadProgress
      - >-
        @azure/storage-file-datalake.PathFlushDataOptionalParams.onUploadProgress
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.pathHttpHeaders'
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.position'
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.requestId'
      - >-
        @azure/storage-file-datalake.PathFlushDataOptionalParams.retainUncommittedData
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.spanOptions'
      - '@azure/storage-file-datalake.PathFlushDataOptionalParams.timeout'
      - >-
        @azure/storage-file-datalake.PathFlushDataOptionalParams.timeoutParameter
    langs:
      - typeScript
    type: interface
    summary: Optional Parameters.
    extends:
      name: RequestOptionsBase
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.abortSignal'
    name: abortSignal
    fullName: abortSignal
    children: []
    langs:
      - typeScript
    type: property
    summary: The signal which can be used to abort requests.
    optional: true
    syntax:
      content: 'abortSignal?: AbortSignalLike'
      return:
        type:
          - AbortSignalLike
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.close'
    name: close
    fullName: close
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Azure Storage Events allow applications to receive notifications when
      files change. When Azure

      Storage Events are enabled, a file changed event is raised. This event has
      a property

      indicating whether this is the final change to distinguish the difference
      between an

      intermediate flush to a file stream and the final close of a file stream.
      The close query

      parameter is valid only when the action is "flush" and change
      notifications are enabled. If

      the value of close is "true" and the flush operation completes
      successfully, the service

      raises a file change notification with a property indicating that this is
      the final update

      (the file stream has been closed). If "false" a change notification is
      raised indicating the

      file has changed. The default is false. This query parameter is set to
      true by the Hadoop ABFS

      driver to indicate that the file stream has been closed."
    optional: true
    syntax:
      content: 'close?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.contentLength'
    name: contentLength
    fullName: contentLength
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Required for "Append Data" and "Flush Data".  Must be 0 for "Flush Data". 
      Must be the length

      of the request content in bytes for "Append Data".
    optional: true
    syntax:
      content: 'contentLength?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.customHeaders'
    name: customHeaders
    fullName: customHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {object} [customHeaders] User defined custom request headers that
      will be applied before the request is sent.
    optional: true
    syntax:
      content: 'customHeaders?: undefined | [key: string]: string'
      return:
        type:
          - 'undefined | [key: string]: string'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: >-
      @azure/storage-file-datalake.PathFlushDataOptionalParams.leaseAccessConditions
    name: leaseAccessConditions
    fullName: leaseAccessConditions
    children: []
    langs:
      - typeScript
    type: property
    summary: Additional parameters for the operation
    optional: true
    syntax:
      content: 'leaseAccessConditions?: LeaseAccessConditions'
      return:
        type:
          - '@azure/storage-file-datalake.LeaseAccessConditions'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: >-
      @azure/storage-file-datalake.PathFlushDataOptionalParams.modifiedAccessConditions
    name: modifiedAccessConditions
    fullName: modifiedAccessConditions
    children: []
    langs:
      - typeScript
    type: property
    summary: Additional parameters for the operation
    optional: true
    syntax:
      content: 'modifiedAccessConditions?: ModifiedAccessConditions'
      return:
        type:
          - '@azure/storage-file-datalake.ModifiedAccessConditions'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: >-
      @azure/storage-file-datalake.PathFlushDataOptionalParams.onDownloadProgress
    name: onDownloadProgress
    fullName: onDownloadProgress
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback which fires upon download progress.
    optional: true
    syntax:
      content: >-
        onDownloadProgress?: undefined | (progress: TransferProgressEvent) =>
        void
      return:
        type:
          - 'undefined | (progress: TransferProgressEvent) => void'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.onUploadProgress'
    name: onUploadProgress
    fullName: onUploadProgress
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback which fires upon upload progress.
    optional: true
    syntax:
      content: 'onUploadProgress?: undefined | (progress: TransferProgressEvent) => void'
      return:
        type:
          - 'undefined | (progress: TransferProgressEvent) => void'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.pathHttpHeaders'
    name: pathHttpHeaders
    fullName: pathHttpHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: Additional parameters for the operation
    optional: true
    syntax:
      content: 'pathHttpHeaders?: PathHttpHeaders'
      return:
        type:
          - '@azure/storage-file-datalake.PathHttpHeaders'
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.position'
    name: position
    fullName: position
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      This parameter allows the caller to upload data in parallel and control
      the order in which it

      is appended to the file.  It is required when uploading data to be
      appended to the file and

      when flushing previously uploaded data to the file.  The value must be the
      position where the

      data is to be appended.  Uploaded data is not immediately flushed, or
      written, to the file.

      To flush, the previously uploaded data must be contiguous, the position
      parameter must be

      specified and equal to the length of the file after all data has been
      written, and there must

      not be a request entity body included with the request.
    optional: true
    syntax:
      content: 'position?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.requestId'
    name: requestId
    fullName: requestId
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Provides a client-generated, opaque value with a 1 KB character limit that
      is recorded in the

      analytics logs when storage analytics logging is enabled.
    optional: true
    syntax:
      content: 'requestId?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: >-
      @azure/storage-file-datalake.PathFlushDataOptionalParams.retainUncommittedData
    name: retainUncommittedData
    fullName: retainUncommittedData
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Valid only for flush operations.  If "true", uncommitted data is retained
      after the flush

      operation completes; otherwise, the uncommitted data is deleted after the
      flush operation.

      The default is false.  Data at offsets less than the specified position
      are written to the

      file when flush succeeds, but this optional parameter allows data after
      the flush position to

      be retained for a future flush operation.
    optional: true
    syntax:
      content: 'retainUncommittedData?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.spanOptions'
    name: spanOptions
    fullName: spanOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: Options used to create a span when tracing is enabled.
    optional: true
    syntax:
      content: 'spanOptions?: SpanOptions'
      return:
        type:
          - SpanOptions
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.timeout'
    name: timeout
    fullName: timeout
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The number of milliseconds a request can take before automatically being
      terminated.
    optional: true
    syntax:
      content: 'timeout?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/storage-file-datalake'
  - uid: '@azure/storage-file-datalake.PathFlushDataOptionalParams.timeoutParameter'
    name: timeoutParameter
    fullName: timeoutParameter
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The timeout parameter is expressed in seconds. For more information, see
      <a

      href="https://docs.microsoft.com/en-us/rest/api/storageservices/fileservices/setting-timeouts-for-blob-service-operations">Setting

      Timeouts for Blob Service Operations.</a>
    optional: true
    syntax:
      content: 'timeoutParameter?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/storage-file-datalake'
references:
  - uid: '@azure/storage-file-datalake.LeaseAccessConditions'
    name: LeaseAccessConditions
    spec.typeScript:
      - name: LeaseAccessConditions
        fullName: LeaseAccessConditions
        uid: '@azure/storage-file-datalake.LeaseAccessConditions'
  - uid: '@azure/storage-file-datalake.ModifiedAccessConditions'
    name: ModifiedAccessConditions
    spec.typeScript:
      - name: ModifiedAccessConditions
        fullName: ModifiedAccessConditions
        uid: '@azure/storage-file-datalake.ModifiedAccessConditions'
  - uid: '@azure/storage-file-datalake.PathHttpHeaders'
    name: PathHttpHeaders
    spec.typeScript:
      - name: PathHttpHeaders
        fullName: PathHttpHeaders
        uid: '@azure/storage-file-datalake.PathHttpHeaders'
