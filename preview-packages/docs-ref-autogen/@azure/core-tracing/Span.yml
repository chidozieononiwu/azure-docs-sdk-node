### YamlMime:UniversalReference
items:
  - uid: '@opentelemetry/types.Span'
    name: Span
    fullName: Span
    children:
      - '@opentelemetry/types.Span.addEvent'
      - '@opentelemetry/types.Span.context'
      - '@opentelemetry/types.Span.end'
      - '@opentelemetry/types.Span.isRecording'
      - '@opentelemetry/types.Span.setAttribute'
      - '@opentelemetry/types.Span.setAttributes'
      - '@opentelemetry/types.Span.setStatus'
      - '@opentelemetry/types.Span.updateName'
    langs:
      - typeScript
    type: interface
    summary: >-
      An interface that represents a span. A span represents a single operation

      within a trace. Examples of span might include remote procedure calls or a

      in-process function calls to sub-components. A Trace has a single,
      top-level

      "root" Span that in turn may have zero or more child Spans, which in turn

      may have children.
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.addEvent'
    name: 'addEvent(string, Attributes | TimeInput, TimeInput)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds an event to the Span.
    syntax:
      content: >-
        function addEvent(name: string, attributesOrStartTime?: Attributes |
        TimeInput, startTime?: TimeInput)
      parameters:
        - id: name
          type:
            - string
          description: the name of the event.
        - id: attributesOrStartTime
          type:
            - '@opentelemetry/types.Attributes | @opentelemetry/types.TimeInput'
          description: ''
          optional: true
        - id: startTime
          type:
            - '@opentelemetry/types.TimeInput'
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.context'
    name: context()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Returns the <xref:SpanContext> object associated with this Span.'
    syntax:
      content: function context()
      parameters: []
      return:
        type:
          - '@opentelemetry/types.SpanContext'
        description: the SpanContext object associated with this Span.
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.end'
    name: end(TimeInput)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Marks the end of Span execution.
      Call to End of a Span MUST not have any effects on child spans. Those may
      still be running and can be ended later.

      Do not return `this`. The Span generally should not be used after it
      is ended so chaining is not desired in this context.
    syntax:
      content: 'function end(endTime?: TimeInput)'
      parameters:
        - id: endTime
          type:
            - '@opentelemetry/types.TimeInput'
          description: ''
          optional: true
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.isRecording'
    name: isRecording()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the flag whether this span will be recorded.
    syntax:
      content: function isRecording()
      parameters: []
      return:
        type:
          - boolean
        description: |-
          true if this Span is active and recording information like events
          with the AddEvent operation and attributes using setAttributes.
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.setAttribute'
    name: 'setAttribute(string, unknown)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets an attribute to the span.
    syntax:
      content: 'function setAttribute(key: string, value: unknown)'
      parameters:
        - id: key
          type:
            - string
          description: the key for this attribute.
        - id: value
          type:
            - unknown
          description: |
            the value for this attribute.
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.setAttributes'
    name: setAttributes(Attributes)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets attributes to the span.
    syntax:
      content: 'function setAttributes(attributes: Attributes)'
      parameters:
        - id: attributes
          type:
            - '@opentelemetry/types.Attributes'
          description: |
            the attributes that will be added.
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.setStatus'
    name: setStatus(Status)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Sets a status to the span. If used, this will override the default Span
      status. Default is <xref:CanonicalCode.OK>.
    syntax:
      content: 'function setStatus(status: Status)'
      parameters:
        - id: status
          type:
            - '@opentelemetry/types.Status'
          description: |
            the Status to set.
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.Span.updateName'
    name: updateName(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates the Span name.
    syntax:
      content: 'function updateName(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: |
            the Span name.
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
references:
  - uid: '@opentelemetry/types.Attributes | @opentelemetry/types.TimeInput'
    name: TimeInput
    spec.typeScript:
      - name: Attributes
        fullName: Attributes
        uid: '@opentelemetry/types.Attributes'
      - name: ' | '
        fullName: ' | '
      - name: TimeInput
        fullName: TimeInput
        uid: '@opentelemetry/types.TimeInput'
  - uid: '@opentelemetry/types.TimeInput'
    name: TimeInput
    spec.typeScript:
      - name: TimeInput
        fullName: TimeInput
        uid: '@opentelemetry/types.TimeInput'
  - uid: '@opentelemetry/types.SpanContext'
    name: SpanContext
    spec.typeScript:
      - name: SpanContext
        fullName: SpanContext
        uid: '@opentelemetry/types.SpanContext'
  - uid: '@opentelemetry/types.Attributes'
    name: Attributes
    spec.typeScript:
      - name: Attributes
        fullName: Attributes
        uid: '@opentelemetry/types.Attributes'
  - uid: '@opentelemetry/types.Status'
    name: Status
    spec.typeScript:
      - name: Status
        fullName: Status
        uid: '@opentelemetry/types.Status'
