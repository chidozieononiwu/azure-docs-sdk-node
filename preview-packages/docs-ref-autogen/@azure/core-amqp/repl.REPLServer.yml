### YamlMime:UniversalReference
items:
  - uid: tslib.repl.REPLServer
    name: REPLServer
    fullName: REPLServer
    children:
      - tslib.repl.REPLServer.addListener_1
      - tslib.repl.REPLServer.addListener_8
      - tslib.repl.REPLServer.addListener_2
      - tslib.repl.REPLServer.addListener_3
      - tslib.repl.REPLServer.addListener_9
      - tslib.repl.REPLServer.addListener_4
      - tslib.repl.REPLServer.addListener_5
      - tslib.repl.REPLServer.addListener_6
      - tslib.repl.REPLServer.addListener_7
      - tslib.repl.REPLServer.addListener
      - tslib.repl.REPLServer.clearBufferedCommand
      - tslib.repl.REPLServer.close
      - tslib.repl.REPLServer.commands
      - tslib.repl.REPLServer.completer
      - tslib.repl.REPLServer.context
      - tslib.repl.REPLServer.cursor
      - tslib.repl.REPLServer.defineCommand
      - tslib.repl.REPLServer.displayPrompt
      - tslib.repl.REPLServer.editorMode
      - tslib.repl.REPLServer.emit_1
      - tslib.repl.REPLServer.emit_8
      - tslib.repl.REPLServer.emit_2
      - tslib.repl.REPLServer.emit_3
      - tslib.repl.REPLServer.emit_9
      - tslib.repl.REPLServer.emit_4
      - tslib.repl.REPLServer.emit_5
      - tslib.repl.REPLServer.emit_6
      - tslib.repl.REPLServer.emit_7
      - tslib.repl.REPLServer.emit
      - tslib.repl.REPLServer.eval
      - tslib.repl.REPLServer.eventNames
      - tslib.repl.REPLServer.getCursorPos
      - tslib.repl.REPLServer.getMaxListeners
      - tslib.repl.REPLServer.ignoreUndefined
      - tslib.repl.REPLServer.inputStream
      - tslib.repl.REPLServer.last
      - tslib.repl.REPLServer.lastError
      - tslib.repl.REPLServer.line
      - tslib.repl.REPLServer.listenerCount
      - tslib.repl.REPLServer.listeners
      - tslib.repl.REPLServer.off
      - tslib.repl.REPLServer.on_1
      - tslib.repl.REPLServer.on_8
      - tslib.repl.REPLServer.on_2
      - tslib.repl.REPLServer.on_3
      - tslib.repl.REPLServer.on_9
      - tslib.repl.REPLServer.on_4
      - tslib.repl.REPLServer.on_5
      - tslib.repl.REPLServer.on_6
      - tslib.repl.REPLServer.on_7
      - tslib.repl.REPLServer.on
      - tslib.repl.REPLServer.once_1
      - tslib.repl.REPLServer.once_8
      - tslib.repl.REPLServer.once_2
      - tslib.repl.REPLServer.once_3
      - tslib.repl.REPLServer.once_9
      - tslib.repl.REPLServer.once_4
      - tslib.repl.REPLServer.once_5
      - tslib.repl.REPLServer.once_6
      - tslib.repl.REPLServer.once_7
      - tslib.repl.REPLServer.once
      - tslib.repl.REPLServer.outputStream
      - tslib.repl.REPLServer.pause
      - tslib.repl.REPLServer.prependListener_1
      - tslib.repl.REPLServer.prependListener_8
      - tslib.repl.REPLServer.prependListener_2
      - tslib.repl.REPLServer.prependListener_3
      - tslib.repl.REPLServer.prependListener_9
      - tslib.repl.REPLServer.prependListener_4
      - tslib.repl.REPLServer.prependListener_5
      - tslib.repl.REPLServer.prependListener_6
      - tslib.repl.REPLServer.prependListener_7
      - tslib.repl.REPLServer.prependListener
      - tslib.repl.REPLServer.prependOnceListener_1
      - tslib.repl.REPLServer.prependOnceListener_8
      - tslib.repl.REPLServer.prependOnceListener_2
      - tslib.repl.REPLServer.prependOnceListener_3
      - tslib.repl.REPLServer.prependOnceListener_9
      - tslib.repl.REPLServer.prependOnceListener_4
      - tslib.repl.REPLServer.prependOnceListener_5
      - tslib.repl.REPLServer.prependOnceListener_6
      - tslib.repl.REPLServer.prependOnceListener_7
      - tslib.repl.REPLServer.prependOnceListener
      - tslib.repl.REPLServer.prompt
      - tslib.repl.REPLServer.question
      - tslib.repl.REPLServer.rawListeners
      - tslib.repl.REPLServer.removeAllListeners
      - tslib.repl.REPLServer.removeListener
      - tslib.repl.REPLServer.replMode
      - tslib.repl.REPLServer.resume
      - tslib.repl.REPLServer.setMaxListeners
      - tslib.repl.REPLServer.setPrompt
      - tslib.repl.REPLServer.setupHistory
      - tslib.repl.REPLServer.terminal
      - tslib.repl.REPLServer.underscoreAssigned
      - tslib.repl.REPLServer.underscoreErrAssigned
      - tslib.repl.REPLServer.useColors
      - tslib.repl.REPLServer.useGlobal
      - tslib.repl.REPLServer.write
      - tslib.repl.REPLServer.writer
    langs:
      - typeScript
    type: class
    summary: >
      Provides a customizable Read-Eval-Print-Loop (REPL).

      Instances of `repl.REPLServer` will accept individual lines of user input,
      evaluate those

      according to a user-defined evaluation function, then output the result.
      Input and output

      may be from `stdin` and `stdout`, respectively, or may be connected to any
      Node.js `stream`.


      Instances of `repl.REPLServer` support automatic completion of inputs,
      simplistic Emacs-style

      line editing, multi-line inputs, ANSI-styled output, saving and restoring
      current REPL session

      state, error recovery, and customizable evaluation functions.


      Instances of `repl.REPLServer` are created using the `repl.start()` method
      and _should not_

      be created directly using the JavaScript `new` keyword.
    extends:
      name: tslib.readline.Interface
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_1
    name: 'addListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_8
    name: 'addListener("exit", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "exit", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"exit"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_2
    name: 'addListener("line", (input: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "line", listener: (input: string) => void)'
      parameters:
        - id: event
          type:
            - '"line"'
          description: ''
        - id: listener
          type:
            - '(input: string) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_3
    name: 'addListener("pause", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"pause"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_9
    name: 'addListener("reset", (context: Context) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "reset", listener: (context: Context) =>
        void)
      parameters:
        - id: event
          type:
            - '"reset"'
          description: ''
        - id: listener
          type:
            - '(context: Context) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_4
    name: 'addListener("resume", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"resume"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_5
    name: 'addListener("SIGCONT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "SIGCONT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGCONT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_6
    name: 'addListener("SIGINT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "SIGINT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGINT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener_7
    name: 'addListener("SIGTSTP", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: "SIGTSTP", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGTSTP"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.addListener
    name: 'addListener(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      events.EventEmitter
      1. close - inherited from `readline.Interface`
      2. line - inherited from `readline.Interface`
      3. pause - inherited from `readline.Interface`
      4. resume - inherited from `readline.Interface`
      5. SIGCONT - inherited from `readline.Interface`
      6. SIGINT - inherited from `readline.Interface`
      7. SIGTSTP - inherited from `readline.Interface`
      8. exit
      9. reset
    syntax:
      content: 'function addListener(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.clearBufferedCommand
    name: clearBufferedCommand()
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Clears any command that has been buffered but not yet executed.

      This method is primarily intended to be called from within the action
      function for

      commands registered using the `replServer.defineCommand()` method.
    syntax:
      content: function clearBufferedCommand()
      parameters: []
    package: tslib
  - uid: tslib.repl.REPLServer.close
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function close()
      parameters: []
    package: tslib
  - uid: tslib.repl.REPLServer.commands
    name: commands
    fullName: commands
    children: []
    langs:
      - typeScript
    type: property
    summary: The commands registered via `replServer.defineCommand()`.
    syntax:
      content: 'commands: [key: string]: function'
      return:
        type:
          - '[key: string]: function'
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.completer
    name: completer
    fullName: completer
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is the function to use for custom Tab
      auto-completion.
    syntax:
      content: 'completer: Completer | AsyncCompleter'
      return:
        type:
          - tslib.readline.Completer | tslib.readline.AsyncCompleter
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.context
    name: context
    fullName: context
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The `vm.Context` provided to the `eval` function to be used for JavaScript
      evaluation.
    syntax:
      content: 'context: Context'
      return:
        type:
          - tslib.vm.Context
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.cursor
    name: cursor
    fullName: cursor
    children: []
    langs:
      - typeScript
    type: property
    summary: The current cursor position in the input line
    syntax:
      content: 'cursor: number'
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.defineCommand
    name: 'defineCommand(string, REPLCommandAction | REPLCommand)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used to add new `.`-prefixed commands to the REPL instance. Such commands
      are invoked

      by typing a `.` followed by the `keyword`.
    syntax:
      content: >-
        function defineCommand(keyword: string, cmd: REPLCommandAction |
        REPLCommand)
      parameters:
        - id: keyword
          type:
            - string
          description: The command keyword (_without_ a leading `.` character).
        - id: cmd
          type:
            - tslib.repl.REPLCommandAction | tslib.repl.REPLCommand
          description: |
            The function to invoke when the command is processed.
    package: tslib
  - uid: tslib.repl.REPLServer.displayPrompt
    name: displayPrompt(undefined | false | true)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Readies the REPL instance for input from the user, printing the configured
      `prompt` to a

      new line in the `output` and resuming the `input` to accept new input.

      When multi-line input is being entered, an ellipsis is printed rather than
      the 'prompt'.


      This method is primarily intended to be called from within the action
      function for

      commands registered using the `replServer.defineCommand()` method.
    syntax:
      content: 'function displayPrompt(preserveCursor?: undefined | false | true)'
      parameters:
        - id: preserveCursor
          type:
            - undefined | false | true
          description: |
            When `true`, the cursor placement will not be reset to `0`.
          optional: true
    package: tslib
  - uid: tslib.repl.REPLServer.editorMode
    name: editorMode
    fullName: editorMode
    children: []
    langs:
      - typeScript
    type: property
    summary: A value indicating whether the REPL is currently in "editor mode".
    syntax:
      content: 'editorMode: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_1
    name: emit("close")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "close")'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_8
    name: emit("exit")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "exit")'
      parameters:
        - id: event
          type:
            - '"exit"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_2
    name: 'emit("line", string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "line", input: string)'
      parameters:
        - id: event
          type:
            - '"line"'
          description: ''
        - id: input
          type:
            - string
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_3
    name: emit("pause")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "pause")'
      parameters:
        - id: event
          type:
            - '"pause"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_9
    name: 'emit("reset", Context)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "reset", context: Context)'
      parameters:
        - id: event
          type:
            - '"reset"'
          description: ''
        - id: context
          type:
            - tslib.vm.Context
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_4
    name: emit("resume")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "resume")'
      parameters:
        - id: event
          type:
            - '"resume"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_5
    name: emit("SIGCONT")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "SIGCONT")'
      parameters:
        - id: event
          type:
            - '"SIGCONT"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_6
    name: emit("SIGINT")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "SIGINT")'
      parameters:
        - id: event
          type:
            - '"SIGINT"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit_7
    name: emit("SIGTSTP")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "SIGTSTP")'
      parameters:
        - id: event
          type:
            - '"SIGTSTP"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.emit
    name: 'emit(string | symbol, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.eval
    name: eval
    fullName: eval
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is the function to be used when
      evaluating each

      given line of input. If not specified in the REPL options, this is an
      async wrapper

      for the JavaScript `eval()` function.
    syntax:
      content: 'eval: REPLEval'
      return:
        type:
          - tslib.repl.REPLEval
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.eventNames
    name: eventNames()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function eventNames()
      parameters: []
      return:
        type:
          - Array<string | symbol>
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.getCursorPos
    name: getCursorPos()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns the real position of the cursor in relation to the input
      prompt + string.  Long input (wrapping) strings, as well as multiple
      line prompts are included in the calculations.
    syntax:
      content: function getCursorPos()
      parameters: []
      return:
        type:
          - tslib.readline.CursorPos
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.getMaxListeners
    name: getMaxListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMaxListeners()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.ignoreUndefined
    name: ignoreUndefined
    fullName: ignoreUndefined
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is a value indicating whether the
      default `writer`

      function should output the result of a command if it evaluates to
      `undefined`.
    syntax:
      content: 'ignoreUndefined: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.inputStream
    name: inputStream
    fullName: inputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: The `Readable` stream from which REPL input will be read.
    syntax:
      content: 'inputStream: ReadableStream'
      return:
        type:
          - tslib.NodeJS.ReadableStream
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.last
    name: last
    fullName: last
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The last evaluation result from the REPL (assigned to the `_` variable
      inside of the REPL).
    syntax:
      content: 'last: any'
      return:
        type:
          - any
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.lastError
    name: lastError
    fullName: lastError
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The last error raised inside the REPL (assigned to the `_error` variable
      inside of the REPL).
    syntax:
      content: 'lastError: any'
      return:
        type:
          - any
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.line
    name: line
    fullName: line
    children: []
    langs:
      - typeScript
    type: property
    summary: The current input data
    syntax:
      content: 'line: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.listenerCount
    name: listenerCount(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listenerCount(type: string | symbol)'
      parameters:
        - id: type
          type:
            - string | symbol
          description: ''
      return:
        type:
          - number
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.listeners
    name: listeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.off
    name: 'off(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function off(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_1
    name: 'on("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_8
    name: 'on("exit", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "exit", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"exit"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_2
    name: 'on("line", (input: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "line", listener: (input: string) => void)'
      parameters:
        - id: event
          type:
            - '"line"'
          description: ''
        - id: listener
          type:
            - '(input: string) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_3
    name: 'on("pause", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"pause"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_9
    name: 'on("reset", (context: Context) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "reset", listener: (context: Context) => void)'
      parameters:
        - id: event
          type:
            - '"reset"'
          description: ''
        - id: listener
          type:
            - '(context: Context) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_4
    name: 'on("resume", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"resume"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_5
    name: 'on("SIGCONT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "SIGCONT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGCONT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_6
    name: 'on("SIGINT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "SIGINT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGINT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on_7
    name: 'on("SIGTSTP", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "SIGTSTP", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGTSTP"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.on
    name: 'on(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_1
    name: 'once("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_8
    name: 'once("exit", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "exit", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"exit"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_2
    name: 'once("line", (input: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "line", listener: (input: string) => void)'
      parameters:
        - id: event
          type:
            - '"line"'
          description: ''
        - id: listener
          type:
            - '(input: string) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_3
    name: 'once("pause", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"pause"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_9
    name: 'once("reset", (context: Context) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "reset", listener: (context: Context) => void)'
      parameters:
        - id: event
          type:
            - '"reset"'
          description: ''
        - id: listener
          type:
            - '(context: Context) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_4
    name: 'once("resume", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"resume"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_5
    name: 'once("SIGCONT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "SIGCONT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGCONT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_6
    name: 'once("SIGINT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "SIGINT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGINT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once_7
    name: 'once("SIGTSTP", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "SIGTSTP", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGTSTP"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.once
    name: 'once(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.outputStream
    name: outputStream
    fullName: outputStream
    children: []
    langs:
      - typeScript
    type: property
    summary: The `Writable` stream to which REPL output will be written.
    syntax:
      content: 'outputStream: WritableStream'
      return:
        type:
          - tslib.NodeJS.WritableStream
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.pause
    name: pause()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function pause()
      parameters: []
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_1
    name: 'prependListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_8
    name: 'prependListener("exit", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "exit", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"exit"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_2
    name: 'prependListener("line", (input: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "line", listener: (input: string) =>
        void)
      parameters:
        - id: event
          type:
            - '"line"'
          description: ''
        - id: listener
          type:
            - '(input: string) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_3
    name: 'prependListener("pause", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"pause"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_9
    name: 'prependListener("reset", (context: Context) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "reset", listener: (context: Context) =>
        void)
      parameters:
        - id: event
          type:
            - '"reset"'
          description: ''
        - id: listener
          type:
            - '(context: Context) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_4
    name: 'prependListener("resume", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"resume"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_5
    name: 'prependListener("SIGCONT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "SIGCONT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGCONT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_6
    name: 'prependListener("SIGINT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "SIGINT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGINT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener_7
    name: 'prependListener("SIGTSTP", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: "SIGTSTP", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGTSTP"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependListener
    name: 'prependListener(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_1
    name: 'prependOnceListener("close", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"close"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_8
    name: 'prependOnceListener("exit", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "exit", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"exit"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_2
    name: 'prependOnceListener("line", (input: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "line", listener: (input: string) =>
        void)
      parameters:
        - id: event
          type:
            - '"line"'
          description: ''
        - id: listener
          type:
            - '(input: string) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_3
    name: 'prependOnceListener("pause", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"pause"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_9
    name: 'prependOnceListener("reset", (context: Context) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "reset", listener: (context:
        Context) => void)
      parameters:
        - id: event
          type:
            - '"reset"'
          description: ''
        - id: listener
          type:
            - '(context: Context) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_4
    name: 'prependOnceListener("resume", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"resume"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_5
    name: 'prependOnceListener("SIGCONT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "SIGCONT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGCONT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_6
    name: 'prependOnceListener("SIGINT", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "SIGINT", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGINT"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener_7
    name: 'prependOnceListener("SIGTSTP", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependOnceListener(event: "SIGTSTP", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"SIGTSTP"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prependOnceListener
    name: 'prependOnceListener(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: string, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.prompt
    name: prompt(undefined | false | true)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prompt(preserveCursor?: undefined | false | true)'
      parameters:
        - id: preserveCursor
          type:
            - undefined | false | true
          description: ''
          optional: true
    package: tslib
  - uid: tslib.repl.REPLServer.question
    name: 'question(string, (answer: string) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function question(query: string, callback: (answer: string) => void)'
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - '(answer: string) => void'
          description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.rawListeners
    name: rawListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rawListeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.removeAllListeners
    name: removeAllListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.removeListener
    name: 'removeListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.replMode
    name: replMode
    fullName: replMode
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is a flag that specifies whether the
      default `eval`

      function should execute all JavaScript commands in strict mode or default
      (sloppy) mode.

      Possible values are:

      - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.

      - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is
      equivalent to
         prefacing every repl statement with `'use strict'`.
    syntax:
      content: 'replMode: unique symbol | unique symbol'
      return:
        type:
          - unique symbol | unique symbol
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.resume
    name: resume()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function resume()
      parameters: []
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.setMaxListeners
    name: setMaxListeners(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type:
            - number
          description: ''
      return:
        type:
          - this
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.setPrompt
    name: setPrompt(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setPrompt(prompt: string)'
      parameters:
        - id: prompt
          type:
            - string
          description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.setupHistory
    name: 'setupHistory(string, (err: Error | null, repl: this) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Initializes a history log file for the REPL instance. When executing the

      Node.js binary and using the command line REPL, a history file is
      initialized

      by default. However, this is not the case when creating a REPL

      programmatically. Use this method to initialize a history log file when
      working

      with REPL instances programmatically.
    syntax:
      content: >-
        function setupHistory(path: string, cb: (err: Error | null, repl: this)
        => void)
      parameters:
        - id: path
          type:
            - string
          description: |
            The path to the history file
        - id: cb
          type:
            - '(err: Error | null, repl: this) => void'
          description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.terminal
    name: terminal
    fullName: terminal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'terminal: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.underscoreAssigned
    name: underscoreAssigned
    fullName: underscoreAssigned
    children: []
    langs:
      - typeScript
    type: property
    summary: A value indicating whether the `_` variable has been assigned.
    syntax:
      content: 'underscoreAssigned: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.underscoreErrAssigned
    name: underscoreErrAssigned
    fullName: underscoreErrAssigned
    children: []
    langs:
      - typeScript
    type: property
    summary: A value indicating whether the `_error` variable has been assigned.
    syntax:
      content: 'underscoreErrAssigned: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.useColors
    name: useColors
    fullName: useColors
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is a value indicating whether the
      default

      `writer` function should include ANSI color styling to REPL output.
    syntax:
      content: 'useColors: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.useGlobal
    name: useGlobal
    fullName: useGlobal
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is a value indicating whether the
      default `eval`

      function will use the JavaScript `global` as the context as opposed to
      creating a new

      separate context for the REPL instance.
    syntax:
      content: 'useGlobal: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
  - uid: tslib.repl.REPLServer.write
    name: 'write(string | Buffer, Key)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function write(data: string | Buffer, key?: Key)'
      parameters:
        - id: data
          type:
            - string | Buffer
          description: ''
        - id: key
          type:
            - tslib.readline.Key
          description: ''
          optional: true
    package: tslib
  - uid: tslib.repl.REPLServer.writer
    name: writer
    fullName: writer
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Specified in the REPL options, this is the function to invoke to format
      the output of

      each command before writing to `outputStream`. If not specified in the
      REPL options,

      this will be a wrapper for `util.inspect`.
    syntax:
      content: 'writer: REPLWriter'
      return:
        type:
          - tslib.repl.REPLWriter
        description: ''
    package: tslib
references:
  - uid: tslib.readline.Interface
    name: Interface
    spec.typeScript:
      - name: Interface
        fullName: Interface
        uid: tslib.readline.Interface
  - uid: tslib.readline.Completer | tslib.readline.AsyncCompleter
    name: AsyncCompleter
    spec.typeScript:
      - name: Completer
        fullName: Completer
        uid: tslib.readline.Completer
      - name: ' | '
        fullName: ' | '
      - name: AsyncCompleter
        fullName: AsyncCompleter
        uid: tslib.readline.AsyncCompleter
  - uid: tslib.vm.Context
    name: Context
    spec.typeScript:
      - name: Context
        fullName: Context
        uid: tslib.vm.Context
  - uid: tslib.repl.REPLEval
    name: REPLEval
    spec.typeScript:
      - name: REPLEval
        fullName: REPLEval
        uid: tslib.repl.REPLEval
  - uid: tslib.NodeJS.ReadableStream
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: tslib.NodeJS.ReadableStream
  - uid: tslib.NodeJS.WritableStream
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: tslib.NodeJS.WritableStream
  - uid: tslib.repl.REPLWriter
    name: REPLWriter
    spec.typeScript:
      - name: REPLWriter
        fullName: REPLWriter
        uid: tslib.repl.REPLWriter
  - uid: tslib.repl.REPLCommandAction | tslib.repl.REPLCommand
    name: REPLCommand
    spec.typeScript:
      - name: REPLCommandAction
        fullName: REPLCommandAction
        uid: tslib.repl.REPLCommandAction
      - name: ' | '
        fullName: ' | '
      - name: REPLCommand
        fullName: REPLCommand
        uid: tslib.repl.REPLCommand
  - uid: tslib.readline.CursorPos
    name: CursorPos
    spec.typeScript:
      - name: CursorPos
        fullName: CursorPos
        uid: tslib.readline.CursorPos
  - uid: tslib.readline.Key
    name: Key
    spec.typeScript:
      - name: Key
        fullName: Key
        uid: tslib.readline.Key
  - uid: tslib.repl.REPLCommandAction
    name: REPLCommandAction
    spec.typeScript:
      - name: REPLCommandAction
        fullName: REPLCommandAction
        uid: tslib.repl.REPLCommandAction
  - uid: string | tslib.repl.ReplOptions
    name: ReplOptions
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ReplOptions
        fullName: ReplOptions
        uid: tslib.repl.ReplOptions
  - uid: tslib.repl.REPLServer
    name: REPLServer
    spec.typeScript:
      - name: REPLServer
        fullName: REPLServer
        uid: tslib.repl.REPLServer
