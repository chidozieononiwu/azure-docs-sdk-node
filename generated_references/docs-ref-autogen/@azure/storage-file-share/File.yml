### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file-share.File'
    name: File
    fullName: File
    children:
      - '@azure/storage-file-share.File.abortCopy_2'
      - '@azure/storage-file-share.File.abortCopy'
      - '@azure/storage-file-share.File.abortCopy_1'
      - '@azure/storage-file-share.File.create_2'
      - '@azure/storage-file-share.File.create'
      - '@azure/storage-file-share.File.create_1'
      - '@azure/storage-file-share.File.deleteMethod_2'
      - '@azure/storage-file-share.File.deleteMethod'
      - '@azure/storage-file-share.File.deleteMethod_1'
      - '@azure/storage-file-share.File.download_2'
      - '@azure/storage-file-share.File.download'
      - '@azure/storage-file-share.File.download_1'
      - '@azure/storage-file-share.File.constructor'
      - '@azure/storage-file-share.File.forceCloseHandles_2'
      - '@azure/storage-file-share.File.forceCloseHandles'
      - '@azure/storage-file-share.File.forceCloseHandles_1'
      - '@azure/storage-file-share.File.getProperties_2'
      - '@azure/storage-file-share.File.getProperties'
      - '@azure/storage-file-share.File.getProperties_1'
      - '@azure/storage-file-share.File.getRangeList_2'
      - '@azure/storage-file-share.File.getRangeList'
      - '@azure/storage-file-share.File.getRangeList_1'
      - '@azure/storage-file-share.File.listHandles_2'
      - '@azure/storage-file-share.File.listHandles'
      - '@azure/storage-file-share.File.listHandles_1'
      - '@azure/storage-file-share.File.setHTTPHeaders_2'
      - '@azure/storage-file-share.File.setHTTPHeaders'
      - '@azure/storage-file-share.File.setHTTPHeaders_1'
      - '@azure/storage-file-share.File.setMetadata_2'
      - '@azure/storage-file-share.File.setMetadata'
      - '@azure/storage-file-share.File.setMetadata_1'
      - '@azure/storage-file-share.File.startCopy_2'
      - '@azure/storage-file-share.File.startCopy'
      - '@azure/storage-file-share.File.startCopy_1'
      - '@azure/storage-file-share.File.uploadRange_2'
      - '@azure/storage-file-share.File.uploadRange'
      - '@azure/storage-file-share.File.uploadRange_1'
      - '@azure/storage-file-share.File.uploadRangeFromURL_2'
      - '@azure/storage-file-share.File.uploadRangeFromURL'
      - '@azure/storage-file-share.File.uploadRangeFromURL_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a File.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.abortCopy_2'
    name: 'abortCopy(string, FileAbortCopyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function abortCopy(copyId: string, options: FileAbortCopyOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: copyId
          type:
            - string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy File

            operation.
        - id: options
          type:
            - '@azure/storage-file-share.FileAbortCopyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.abortCopy'
    name: 'abortCopy(string, Models.FileAbortCopyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.
    syntax:
      content: >-
        function abortCopy(copyId: string, options?:
        Models.FileAbortCopyOptionalParams)
      parameters:
        - id: copyId
          type:
            - string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy File

            operation.
        - id: options
          type:
            - Models.FileAbortCopyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileAbortCopyResponse>
        description: Promise<Models.FileAbortCopyResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.abortCopy_1'
    name: 'abortCopy(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function abortCopy(copyId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: copyId
          type:
            - string
          description: >-
            The copy identifier provided in the x-ms-copy-id header of the
            original Copy File

            operation.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.create_2'
    name: >-
      create(number, string, string, string, FileCreateOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(fileContentLength: number, fileAttributes: string,
        fileCreatedOn: string, fileLastWriteOn: string, options:
        FileCreateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: fileContentLength
          type:
            - number
          description: 'Specifies the maximum size for the file, up to 1 TB.'
        - id: fileAttributes
          type:
            - string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreatedOn
          type:
            - string
          description: Creation time for the file/directory.
        - id: fileLastWriteOn
          type:
            - string
          description: Last write time for the file/directory.
        - id: options
          type:
            - '@azure/storage-file-share.FileCreateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.create'
    name: 'create(number, string, string, string, Models.FileCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.
    syntax:
      content: >-
        function create(fileContentLength: number, fileAttributes: string,
        fileCreatedOn: string, fileLastWriteOn: string, options?:
        Models.FileCreateOptionalParams)
      parameters:
        - id: fileContentLength
          type:
            - number
          description: 'Specifies the maximum size for the file, up to 1 TB.'
        - id: fileAttributes
          type:
            - string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreatedOn
          type:
            - string
          description: Creation time for the file/directory.
        - id: fileLastWriteOn
          type:
            - string
          description: Last write time for the file/directory.
        - id: options
          type:
            - Models.FileCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileCreateResponse>
        description: Promise<Models.FileCreateResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.create_1'
    name: 'create(number, string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(fileContentLength: number, fileAttributes: string,
        fileCreatedOn: string, fileLastWriteOn: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: fileContentLength
          type:
            - number
          description: 'Specifies the maximum size for the file, up to 1 TB.'
        - id: fileAttributes
          type:
            - string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreatedOn
          type:
            - string
          description: Creation time for the file/directory.
        - id: fileLastWriteOn
          type:
            - string
          description: Last write time for the file/directory.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.deleteMethod_2'
    name: 'deleteMethod(FileDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(options: FileDeleteMethodOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileDeleteMethodOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.deleteMethod'
    name: deleteMethod(Models.FileDeleteMethodOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: removes the file from the storage account.
    syntax:
      content: 'function deleteMethod(options?: Models.FileDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FileDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDeleteResponse>
        description: Promise<Models.FileDeleteResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.deleteMethod_1'
    name: deleteMethod(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.download_2'
    name: 'download(FileDownloadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function download(options: FileDownloadOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileDownloadOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.download'
    name: download(Models.FileDownloadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reads or downloads a file from the system, including its metadata and
      properties.
    syntax:
      content: 'function download(options?: Models.FileDownloadOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FileDownloadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDownloadResponse>
        description: Promise<Models.FileDownloadResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.download_1'
    name: download(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function download(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.constructor'
    name: File(StorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a File.
    syntax:
      content: 'new File(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/storage-file-share.StorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.forceCloseHandles_2'
    name: >-
      forceCloseHandles(string, FileForceCloseHandlesOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function forceCloseHandles(handleId: string, options:
        FileForceCloseHandlesOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: handleId
          type:
            - string
          description: >-
            Specifies handle ID opened on the file or directory to be closed.
            Asterix (‘*’)

            is a wildcard that specifies all handles.
        - id: options
          type:
            - '@azure/storage-file-share.FileForceCloseHandlesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.forceCloseHandles'
    name: 'forceCloseHandles(string, Models.FileForceCloseHandlesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Closes all handles open for given file
    syntax:
      content: >-
        function forceCloseHandles(handleId: string, options?:
        Models.FileForceCloseHandlesOptionalParams)
      parameters:
        - id: handleId
          type:
            - string
          description: >-
            Specifies handle ID opened on the file or directory to be closed.
            Asterix (‘*’)

            is a wildcard that specifies all handles.
        - id: options
          type:
            - Models.FileForceCloseHandlesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileForceCloseHandlesResponse>
        description: Promise<Models.FileForceCloseHandlesResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.forceCloseHandles_1'
    name: 'forceCloseHandles(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function forceCloseHandles(handleId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: handleId
          type:
            - string
          description: >-
            Specifies handle ID opened on the file or directory to be closed.
            Asterix (‘*’)

            is a wildcard that specifies all handles.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.getProperties_2'
    name: 'getProperties(FileGetPropertiesOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProperties(options: FileGetPropertiesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileGetPropertiesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.getProperties'
    name: getProperties(Models.FileGetPropertiesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties for the file.

      It does not return the content of the file.
    syntax:
      content: 'function getProperties(options?: Models.FileGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FileGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileGetPropertiesResponse>
        description: Promise<Models.FileGetPropertiesResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.getProperties_1'
    name: getProperties(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.getRangeList_2'
    name: 'getRangeList(FileGetRangeListOptionalParams, ServiceCallback<Range[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getRangeList(options: FileGetRangeListOptionalParams, callback:
        ServiceCallback<Range[]>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileGetRangeListOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - 'ServiceCallback<@azure/storage-file-share.Range[]>'
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.getRangeList'
    name: getRangeList(Models.FileGetRangeListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the list of valid ranges for a file.
    syntax:
      content: 'function getRangeList(options?: Models.FileGetRangeListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FileGetRangeListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileGetRangeListResponse>
        description: Promise<Models.FileGetRangeListResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.getRangeList_1'
    name: 'getRangeList(ServiceCallback<Range[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getRangeList(callback: ServiceCallback<Range[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/storage-file-share.Range[]>'
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.listHandles_2'
    name: >-
      listHandles(FileListHandlesOptionalParams,
      ServiceCallback<ListHandlesResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function listHandles(options: FileListHandlesOptionalParams, callback:
        ServiceCallback<ListHandlesResponse>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileListHandlesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<@azure/storage-file-share.ListHandlesResponse>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.listHandles'
    name: listHandles(Models.FileListHandlesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Lists handles for file
    syntax:
      content: 'function listHandles(options?: Models.FileListHandlesOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FileListHandlesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileListHandlesResponse>
        description: Promise<Models.FileListHandlesResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.listHandles_1'
    name: listHandles(ServiceCallback<ListHandlesResponse>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listHandles(callback: ServiceCallback<ListHandlesResponse>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<@azure/storage-file-share.ListHandlesResponse>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.setHTTPHeaders_2'
    name: >-
      setHTTPHeaders(string, string, string, FileSetHTTPHeadersOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setHTTPHeaders(fileAttributes: string, fileCreatedOn: string,
        fileLastWriteOn: string, options: FileSetHTTPHeadersOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: fileAttributes
          type:
            - string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreatedOn
          type:
            - string
          description: Creation time for the file/directory.
        - id: fileLastWriteOn
          type:
            - string
          description: Last write time for the file/directory.
        - id: options
          type:
            - '@azure/storage-file-share.FileSetHTTPHeadersOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.setHTTPHeaders'
    name: >-
      setHTTPHeaders(string, string, string,
      Models.FileSetHTTPHeadersOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets HTTP headers on the file.
    syntax:
      content: >-
        function setHTTPHeaders(fileAttributes: string, fileCreatedOn: string,
        fileLastWriteOn: string, options?:
        Models.FileSetHTTPHeadersOptionalParams)
      parameters:
        - id: fileAttributes
          type:
            - string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreatedOn
          type:
            - string
          description: Creation time for the file/directory.
        - id: fileLastWriteOn
          type:
            - string
          description: Last write time for the file/directory.
        - id: options
          type:
            - Models.FileSetHTTPHeadersOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetHTTPHeadersResponse>
        description: Promise<Models.FileSetHTTPHeadersResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.setHTTPHeaders_1'
    name: 'setHTTPHeaders(string, string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setHTTPHeaders(fileAttributes: string, fileCreatedOn: string,
        fileLastWriteOn: string, callback: ServiceCallback<void>)
      parameters:
        - id: fileAttributes
          type:
            - string
          description: >-
            If specified, the provided file attributes shall be set. Default
            value:

            ‘Archive’ for file and ‘Directory’ for directory. ‘None’ can also be
            specified as default.
        - id: fileCreatedOn
          type:
            - string
          description: Creation time for the file/directory.
        - id: fileLastWriteOn
          type:
            - string
          description: Last write time for the file/directory.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.setMetadata_2'
    name: 'setMetadata(FileSetMetadataOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setMetadata(options: FileSetMetadataOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/storage-file-share.FileSetMetadataOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.setMetadata'
    name: setMetadata(Models.FileSetMetadataOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user-defined metadata for the specified file.
    syntax:
      content: 'function setMetadata(options?: Models.FileSetMetadataOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.FileSetMetadataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetMetadataResponse>
        description: Promise<Models.FileSetMetadataResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.setMetadata_1'
    name: setMetadata(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMetadata(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.startCopy_2'
    name: 'startCopy(string, FileStartCopyOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function startCopy(copySource: string, options:
        FileStartCopyOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: options
          type:
            - '@azure/storage-file-share.FileStartCopyOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.startCopy'
    name: 'startCopy(string, Models.FileStartCopyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Copies a blob or file to a destination file within the storage account.
    syntax:
      content: >-
        function startCopy(copySource: string, options?:
        Models.FileStartCopyOptionalParams)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: options
          type:
            - Models.FileStartCopyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileStartCopyResponse>
        description: Promise<Models.FileStartCopyResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.startCopy_1'
    name: 'startCopy(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function startCopy(copySource: string, callback: ServiceCallback<void>)'
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.uploadRange_2'
    name: >-
      uploadRange(string, Models.FileRangeWriteType, number,
      FileUploadRangeOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadRange(range: string, fileRangeWrite:
        Models.FileRangeWriteType, contentLength: number, options:
        FileUploadRangeOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: range
          type:
            - string
          description: >-
            Specifies the range of bytes to be written. Both the start and end
            of the range

            must be specified. For an update operation, the range can be up to 4
            MB in size. For a clear

            operation, the range can be up to the value of the file's full size.
            The File service accepts

            only a single byte range for the Range and 'x-ms-range' headers, and
            the byte range must be

            specified in the following format: bytes=startByte-endByte.
        - id: fileRangeWrite
          type:
            - Models.FileRangeWriteType
          description: >-
            Specify one of the following options: - Update: Writes the bytes
            specified

            by the request body into the specified range. The Range and
            Content-Length headers must match to

            perform the update. - Clear: Clears the specified range and releases
            the space used in storage

            for that range. To clear a range, set the Content-Length header to
            zero, and set the Range

            header to a value that indicates the range to clear, up to maximum
            file size. Possible values

            include: 'update', 'clear'
        - id: contentLength
          type:
            - number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type:
            - '@azure/storage-file-share.FileUploadRangeOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.uploadRange'
    name: >-
      uploadRange(string, Models.FileRangeWriteType, number,
      Models.FileUploadRangeOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Upload a range of bytes to a file.
    syntax:
      content: >-
        function uploadRange(range: string, fileRangeWrite:
        Models.FileRangeWriteType, contentLength: number, options?:
        Models.FileUploadRangeOptionalParams)
      parameters:
        - id: range
          type:
            - string
          description: >-
            Specifies the range of bytes to be written. Both the start and end
            of the range

            must be specified. For an update operation, the range can be up to 4
            MB in size. For a clear

            operation, the range can be up to the value of the file's full size.
            The File service accepts

            only a single byte range for the Range and 'x-ms-range' headers, and
            the byte range must be

            specified in the following format: bytes=startByte-endByte.
        - id: fileRangeWrite
          type:
            - Models.FileRangeWriteType
          description: >-
            Specify one of the following options: - Update: Writes the bytes
            specified

            by the request body into the specified range. The Range and
            Content-Length headers must match to

            perform the update. - Clear: Clears the specified range and releases
            the space used in storage

            for that range. To clear a range, set the Content-Length header to
            zero, and set the Range

            header to a value that indicates the range to clear, up to maximum
            file size. Possible values

            include: 'update', 'clear'
        - id: contentLength
          type:
            - number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type:
            - Models.FileUploadRangeOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileUploadRangeResponse>
        description: Promise<Models.FileUploadRangeResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.uploadRange_1'
    name: >-
      uploadRange(string, Models.FileRangeWriteType, number,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadRange(range: string, fileRangeWrite:
        Models.FileRangeWriteType, contentLength: number, callback:
        ServiceCallback<void>)
      parameters:
        - id: range
          type:
            - string
          description: >-
            Specifies the range of bytes to be written. Both the start and end
            of the range

            must be specified. For an update operation, the range can be up to 4
            MB in size. For a clear

            operation, the range can be up to the value of the file's full size.
            The File service accepts

            only a single byte range for the Range and 'x-ms-range' headers, and
            the byte range must be

            specified in the following format: bytes=startByte-endByte.
        - id: fileRangeWrite
          type:
            - Models.FileRangeWriteType
          description: >-
            Specify one of the following options: - Update: Writes the bytes
            specified

            by the request body into the specified range. The Range and
            Content-Length headers must match to

            perform the update. - Clear: Clears the specified range and releases
            the space used in storage

            for that range. To clear a range, set the Content-Length header to
            zero, and set the Range

            header to a value that indicates the range to clear, up to maximum
            file size. Possible values

            include: 'update', 'clear'
        - id: contentLength
          type:
            - number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.uploadRangeFromURL_2'
    name: >-
      uploadRangeFromURL(string, string, string, number,
      FileUploadRangeFromURLOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadRangeFromURL(range: string, copySource: string,
        sourceRange: string, contentLength: number, options:
        FileUploadRangeFromURLOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: range
          type:
            - string
          description: Writes data to the specified byte range in the file.
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: sourceRange
          type:
            - string
          description: Bytes of source data in the specified range.
        - id: contentLength
          type:
            - number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type:
            - '@azure/storage-file-share.FileUploadRangeFromURLOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.uploadRangeFromURL'
    name: >-
      uploadRangeFromURL(string, string, string, number,
      Models.FileUploadRangeFromURLOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: Upload a range of bytes to a file where the contents are read from a URL.
    syntax:
      content: >-
        function uploadRangeFromURL(range: string, copySource: string,
        sourceRange: string, contentLength: number, options?:
        Models.FileUploadRangeFromURLOptionalParams)
      parameters:
        - id: range
          type:
            - string
          description: Writes data to the specified byte range in the file.
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: sourceRange
          type:
            - string
          description: Bytes of source data in the specified range.
        - id: contentLength
          type:
            - number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: options
          type:
            - Models.FileUploadRangeFromURLOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileUploadRangeFromURLResponse>
        description: Promise<Models.FileUploadRangeFromURLResponse>
    package: '@azure/storage-file-share'
  - uid: '@azure/storage-file-share.File.uploadRangeFromURL_1'
    name: 'uploadRangeFromURL(string, string, string, number, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function uploadRangeFromURL(range: string, copySource: string,
        sourceRange: string, contentLength: number, callback:
        ServiceCallback<void>)
      parameters:
        - id: range
          type:
            - string
          description: Writes data to the specified byte range in the file.
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.
            To copy a

            file to another file within the same storage account, you may use
            Shared Key to authenticate the

            source file. If you are copying a file from another storage account,
            or if you are copying a

            blob from the same storage account or another storage account, then
            you must authenticate the

            source file or blob using a shared access signature. If the source
            is a public blob, no

            authentication is required to perform the copy operation. A file in
            a share snapshot can also be

            specified as a copy source.
        - id: sourceRange
          type:
            - string
          description: Bytes of source data in the specified range.
        - id: contentLength
          type:
            - number
          description: >-
            Specifies the number of bytes being transmitted in the request body.
            When

            the x-ms-write header is set to clear, the value of this header must
            be set to zero.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            The callback
    package: '@azure/storage-file-share'
references:
  - uid: '@azure/storage-file-share.StorageClientContext'
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: '@azure/storage-file-share.StorageClientContext'
  - uid: '@azure/storage-file-share.FileAbortCopyOptionalParams'
    name: FileAbortCopyOptionalParams
    spec.typeScript:
      - name: FileAbortCopyOptionalParams
        fullName: FileAbortCopyOptionalParams
        uid: '@azure/storage-file-share.FileAbortCopyOptionalParams'
  - uid: '@azure/storage-file-share.FileCreateOptionalParams'
    name: FileCreateOptionalParams
    spec.typeScript:
      - name: FileCreateOptionalParams
        fullName: FileCreateOptionalParams
        uid: '@azure/storage-file-share.FileCreateOptionalParams'
  - uid: '@azure/storage-file-share.FileDeleteMethodOptionalParams'
    name: FileDeleteMethodOptionalParams
    spec.typeScript:
      - name: FileDeleteMethodOptionalParams
        fullName: FileDeleteMethodOptionalParams
        uid: '@azure/storage-file-share.FileDeleteMethodOptionalParams'
  - uid: '@azure/storage-file-share.FileDownloadOptionalParams'
    name: FileDownloadOptionalParams
    spec.typeScript:
      - name: FileDownloadOptionalParams
        fullName: FileDownloadOptionalParams
        uid: '@azure/storage-file-share.FileDownloadOptionalParams'
  - uid: '@azure/storage-file-share.FileForceCloseHandlesOptionalParams'
    name: FileForceCloseHandlesOptionalParams
    spec.typeScript:
      - name: FileForceCloseHandlesOptionalParams
        fullName: FileForceCloseHandlesOptionalParams
        uid: '@azure/storage-file-share.FileForceCloseHandlesOptionalParams'
  - uid: '@azure/storage-file-share.FileGetPropertiesOptionalParams'
    name: FileGetPropertiesOptionalParams
    spec.typeScript:
      - name: FileGetPropertiesOptionalParams
        fullName: FileGetPropertiesOptionalParams
        uid: '@azure/storage-file-share.FileGetPropertiesOptionalParams'
  - uid: 'ServiceCallback<@azure/storage-file-share.Range[]>'
    name: 'Range[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: Range
        fullName: Range
        uid: '@azure/storage-file-share.Range'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/storage-file-share.FileGetRangeListOptionalParams'
    name: FileGetRangeListOptionalParams
    spec.typeScript:
      - name: FileGetRangeListOptionalParams
        fullName: FileGetRangeListOptionalParams
        uid: '@azure/storage-file-share.FileGetRangeListOptionalParams'
  - uid: ServiceCallback<@azure/storage-file-share.ListHandlesResponse>
    name: ListHandlesResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: ListHandlesResponse
        fullName: ListHandlesResponse
        uid: '@azure/storage-file-share.ListHandlesResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file-share.FileListHandlesOptionalParams'
    name: FileListHandlesOptionalParams
    spec.typeScript:
      - name: FileListHandlesOptionalParams
        fullName: FileListHandlesOptionalParams
        uid: '@azure/storage-file-share.FileListHandlesOptionalParams'
  - uid: '@azure/storage-file-share.FileSetHTTPHeadersOptionalParams'
    name: FileSetHTTPHeadersOptionalParams
    spec.typeScript:
      - name: FileSetHTTPHeadersOptionalParams
        fullName: FileSetHTTPHeadersOptionalParams
        uid: '@azure/storage-file-share.FileSetHTTPHeadersOptionalParams'
  - uid: '@azure/storage-file-share.FileSetMetadataOptionalParams'
    name: FileSetMetadataOptionalParams
    spec.typeScript:
      - name: FileSetMetadataOptionalParams
        fullName: FileSetMetadataOptionalParams
        uid: '@azure/storage-file-share.FileSetMetadataOptionalParams'
  - uid: '@azure/storage-file-share.FileStartCopyOptionalParams'
    name: FileStartCopyOptionalParams
    spec.typeScript:
      - name: FileStartCopyOptionalParams
        fullName: FileStartCopyOptionalParams
        uid: '@azure/storage-file-share.FileStartCopyOptionalParams'
  - uid: '@azure/storage-file-share.FileUploadRangeOptionalParams'
    name: FileUploadRangeOptionalParams
    spec.typeScript:
      - name: FileUploadRangeOptionalParams
        fullName: FileUploadRangeOptionalParams
        uid: '@azure/storage-file-share.FileUploadRangeOptionalParams'
  - uid: '@azure/storage-file-share.FileUploadRangeFromURLOptionalParams'
    name: FileUploadRangeFromURLOptionalParams
    spec.typeScript:
      - name: FileUploadRangeFromURLOptionalParams
        fullName: FileUploadRangeFromURLOptionalParams
        uid: '@azure/storage-file-share.FileUploadRangeFromURLOptionalParams'
