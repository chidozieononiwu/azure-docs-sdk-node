### YamlMime:UniversalReference
items:
  - uid: tslib.https.AgentOptions
    name: AgentOptions
    fullName: AgentOptions
    children:
      - tslib.https.AgentOptions.ALPNProtocols
      - tslib.https.AgentOptions.ca
      - tslib.https.AgentOptions.cert
      - tslib.https.AgentOptions.checkServerIdentity
      - tslib.https.AgentOptions.ciphers
      - tslib.https.AgentOptions.clientCertEngine
      - tslib.https.AgentOptions.crl
      - tslib.https.AgentOptions.dhparam
      - tslib.https.AgentOptions.ecdhCurve
      - tslib.https.AgentOptions.enableTrace
      - tslib.https.AgentOptions.honorCipherOrder
      - tslib.https.AgentOptions.host
      - tslib.https.AgentOptions.keepAlive
      - tslib.https.AgentOptions.keepAliveMsecs
      - tslib.https.AgentOptions.key
      - tslib.https.AgentOptions.lookup
      - tslib.https.AgentOptions.maxCachedSessions
      - tslib.https.AgentOptions.maxFreeSockets
      - tslib.https.AgentOptions.maxSockets
      - tslib.https.AgentOptions.maxVersion
      - tslib.https.AgentOptions.minDHSize
      - tslib.https.AgentOptions.minVersion
      - tslib.https.AgentOptions.passphrase
      - tslib.https.AgentOptions.path
      - tslib.https.AgentOptions.pfx
      - tslib.https.AgentOptions.port
      - tslib.https.AgentOptions.privateKeyEngine
      - tslib.https.AgentOptions.privateKeyIdentifier
      - tslib.https.AgentOptions.pskCallback
      - tslib.https.AgentOptions.rejectUnauthorized
      - tslib.https.AgentOptions.requestCert
      - tslib.https.AgentOptions.secureContext
      - tslib.https.AgentOptions.secureOptions
      - tslib.https.AgentOptions.secureProtocol
      - tslib.https.AgentOptions.servername
      - tslib.https.AgentOptions.session
      - tslib.https.AgentOptions.sessionIdContext
      - tslib.https.AgentOptions.sigalgs
      - tslib.https.AgentOptions.SNICallback
      - tslib.https.AgentOptions.socket
      - tslib.https.AgentOptions.timeout
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: tslib.http.AgentOptions
    package: tslib
  - uid: tslib.https.AgentOptions.ALPNProtocols
    name: ALPNProtocols
    fullName: ALPNProtocols
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      An array of strings or a Buffer naming possible ALPN protocols.
      (Protocols should be ordered by their priority.)
    optional: true
    syntax:
      content: 'ALPNProtocols?: string[] | Uint8Array[] | Uint8Array'
      return:
        type:
          - 'string[] | Uint8Array[] | Uint8Array'
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.ca
    name: ca
    fullName: ca
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Optionally override the trusted CA certificates. Default is to trust
      the well-known CAs curated by Mozilla. Mozilla's CAs are completely
      replaced when CAs are explicitly specified using this option.
    optional: true
    syntax:
      content: 'ca?: string | Buffer | Array<string | Buffer>'
      return:
        type:
          - string | Buffer | Array<string | Buffer>
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.cert
    name: cert
    fullName: cert
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Cert chains in PEM format. One cert chain should be provided per
       private key. Each cert chain should consist of the PEM formatted
       certificate for a provided private key, followed by the PEM
       formatted intermediate certificates (if any), in order, and not
       including the root CA (the root CA must be pre-known to the peer,
       see ca). When providing multiple cert chains, they do not have to
       be in the same order as their private keys in key. If the
       intermediate certificates are not provided, the peer will not be
       able to validate the certificate, and the handshake will fail.
    optional: true
    syntax:
      content: 'cert?: string | Buffer | Array<string | Buffer>'
      return:
        type:
          - string | Buffer | Array<string | Buffer>
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.checkServerIdentity
    name: checkServerIdentity
    fullName: checkServerIdentity
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'checkServerIdentity?: undefined | checkServerIdentity'
      return:
        type:
          - undefined | tslib.tls.checkServerIdentity
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.ciphers
    name: ciphers
    fullName: ciphers
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Cipher suite specification, replacing the default. For more
      information, see modifying the default cipher suite. Permitted
      ciphers can be obtained via tls.getCiphers(). Cipher names must be
      uppercased in order for OpenSSL to accept them.
    optional: true
    syntax:
      content: 'ciphers?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.clientCertEngine
    name: clientCertEngine
    fullName: clientCertEngine
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of an OpenSSL engine which can provide the client certificate.
    optional: true
    syntax:
      content: 'clientCertEngine?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.crl
    name: crl
    fullName: crl
    children: []
    langs:
      - typeScript
    type: property
    summary: PEM formatted CRLs (Certificate Revocation Lists).
    optional: true
    syntax:
      content: 'crl?: string | Buffer | Array<string | Buffer>'
      return:
        type:
          - string | Buffer | Array<string | Buffer>
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.dhparam
    name: dhparam
    fullName: dhparam
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Diffie Hellman parameters, required for Perfect Forward Secrecy. Use
      openssl dhparam to create the parameters. The key length must be
      greater than or equal to 1024 bits or else an error will be thrown.
      Although 1024 bits is permissible, use 2048 bits or larger for
      stronger security. If omitted or invalid, the parameters are
      silently discarded and DHE ciphers will not be available.
    optional: true
    syntax:
      content: 'dhparam?: string | Buffer'
      return:
        type:
          - string | Buffer
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.ecdhCurve
    name: ecdhCurve
    fullName: ecdhCurve
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      A string describing a named curve or a colon separated list of curve
      NIDs or names, for example P-521:P-384:P-256, to use for ECDH key
      agreement. Set to auto to select the curve automatically. Use
      crypto.getCurves() to obtain a list of available curve names. On
      recent releases, openssl ecparam -list_curves will also display the
      name and description of each available elliptic curve. Default:
      tls.DEFAULT_ECDH_CURVE.
    optional: true
    syntax:
      content: 'ecdhCurve?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.enableTrace
    name: enableTrace
    fullName: enableTrace
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      When enabled, TLS packet trace information is written to `stderr`. This
      can be

      used to debug TLS connection problems.
    optional: true
    syntax:
      content: 'enableTrace?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.honorCipherOrder
    name: honorCipherOrder
    fullName: honorCipherOrder
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Attempt to use the server's cipher suite preferences instead of the
      client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be
      set in secureOptions
    optional: true
    syntax:
      content: 'honorCipherOrder?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.host
    name: host
    fullName: host
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'host?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.keepAlive
    name: keepAlive
    fullName: keepAlive
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Keep sockets around in a pool to be used by other requests in the future.
      Default = false
    optional: true
    syntax:
      content: 'keepAlive?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.keepAliveMsecs
    name: keepAliveMsecs
    fullName: keepAliveMsecs
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      When using HTTP KeepAlive, how often to send TCP KeepAlive packets over
      sockets being kept alive. Default = 1000.

      Only relevant if keepAlive is set to true.
    optional: true
    syntax:
      content: 'keepAliveMsecs?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.key
    name: key
    fullName: key
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Private keys in PEM format. PEM allows the option of private keys
      being encrypted. Encrypted keys will be decrypted with
      options.passphrase. Multiple keys using different algorithms can be
      provided either as an array of unencrypted key strings or buffers,
      or an array of objects in the form {pem: <string|buffer>[,
      passphrase: <string>]}. The object form can only occur in an array.
      object.passphrase is optional. Encrypted keys will be decrypted with
      object.passphrase if provided, or options.passphrase if it is not.
    optional: true
    syntax:
      content: 'key?: string | Buffer | Array<Buffer | KeyObject>'
      return:
        type:
          - string | Buffer | Array<Buffer | tslib.tls.KeyObject>
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.lookup
    name: lookup
    fullName: lookup
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'lookup?: net.LookupFunction'
      return:
        type:
          - net.LookupFunction
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.maxCachedSessions
    name: maxCachedSessions
    fullName: maxCachedSessions
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'maxCachedSessions?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.maxFreeSockets
    name: maxFreeSockets
    fullName: maxFreeSockets
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Maximum number of sockets to leave open in a free state. Only relevant if
      keepAlive is set to true. Default = 256.
    optional: true
    syntax:
      content: 'maxFreeSockets?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.maxSockets
    name: maxSockets
    fullName: maxSockets
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Maximum number of sockets to allow per host. Default for Node 0.10 is 5,
      default for Node 0.12 is Infinity
    optional: true
    syntax:
      content: 'maxSockets?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.maxVersion
    name: maxVersion
    fullName: maxVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optionally set the maximum TLS version to allow. One

      of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be
      specified along with the

      `secureProtocol` option, use one or the other.

      **Default:** `'TLSv1.3'`, unless changed using CLI options. Using

      `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3`
      sets the default to

      `'TLSv1.3'`. If multiple of the options are provided, the highest maximum
      is used.
    optional: true
    syntax:
      content: 'maxVersion?: SecureVersion'
      return:
        type:
          - tslib.tls.SecureVersion
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.minDHSize
    name: minDHSize
    fullName: minDHSize
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'minDHSize?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.minVersion
    name: minVersion
    fullName: minVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optionally set the minimum TLS version to allow. One

      of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be
      specified along with the

      `secureProtocol` option, use one or the other.  It is not recommended to
      use

      less than TLSv1.2, but it may be required for interoperability.

      **Default:** `'TLSv1.2'`, unless changed using CLI options. Using

      `--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the
      default to

      `'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to

      'TLSv1.3'. If multiple of the options are provided, the lowest minimum is
      used.
    optional: true
    syntax:
      content: 'minVersion?: SecureVersion'
      return:
        type:
          - tslib.tls.SecureVersion
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.passphrase
    name: passphrase
    fullName: passphrase
    children: []
    langs:
      - typeScript
    type: property
    summary: Shared passphrase used for a single private key and/or a PFX.
    optional: true
    syntax:
      content: 'passphrase?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.path
    name: path
    fullName: path
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'path?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.pfx
    name: pfx
    fullName: pfx
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      PFX or PKCS12 encoded private key and certificate chain. pfx is an
      alternative to providing key and cert individually. PFX is usually
      encrypted, if it is, passphrase will be used to decrypt it. Multiple
      PFX can be provided either as an array of unencrypted PFX buffers,
      or an array of objects in the form {buf: <string|buffer>[,
      passphrase: <string>]}. The object form can only occur in an array.
      object.passphrase is optional. Encrypted PFX will be decrypted with
      object.passphrase if provided, or options.passphrase if it is not.
    optional: true
    syntax:
      content: 'pfx?: string | Buffer | Array<string | Buffer | PxfObject>'
      return:
        type:
          - string | Buffer | Array<string | Buffer | tslib.tls.PxfObject>
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.port
    name: port
    fullName: port
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'port?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.privateKeyEngine
    name: privateKeyEngine
    fullName: privateKeyEngine
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Name of an OpenSSL engine to get private key from. Should be used
      together with privateKeyIdentifier.
    optional: true
    syntax:
      content: 'privateKeyEngine?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.privateKeyIdentifier
    name: privateKeyIdentifier
    fullName: privateKeyIdentifier
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Identifier of a private key managed by an OpenSSL engine. Should be
      used together with privateKeyEngine. Should not be set together with
      key, because both options define a private key in different ways.
    optional: true
    syntax:
      content: 'privateKeyIdentifier?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.pskCallback
    name: pskCallback(string | null)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      When negotiating TLS-PSK (pre-shared keys), this function is called
      with optional identity `hint` provided by the server or `null`
      in case of TLS 1.3 where `hint` was removed.
      It will be necessary to provide a custom `tls.checkServerIdentity()`
      for the connection as the default one will try to check hostname/IP
      of the server against the certificate but that's not applicable for PSK
      because there won't be a certificate present.
      More information can be found in the RFC 4279.
    syntax:
      content: 'function pskCallback(hint: string | null)'
      parameters:
        - id: hint
          type:
            - string | null
          description: |-
            message sent from the server to help client
            decide which identity to use during negotiation.
            Always `null` if TLS 1.3 is used.
      return:
        type:
          - tslib.tls.PSKCallbackNegotation | null
        description: |-
          Return `null` to stop the negotiation process. `psk` must be
          compatible with the selected cipher's digest.
          `identity` must use UTF-8 encoding.
    package: tslib
  - uid: tslib.https.AgentOptions.rejectUnauthorized
    name: rejectUnauthorized
    fullName: rejectUnauthorized
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'rejectUnauthorized?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.requestCert
    name: requestCert
    fullName: requestCert
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If true the server will request a certificate from clients that
      connect and attempt to verify that certificate. Defaults to
      false.
    optional: true
    syntax:
      content: 'requestCert?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.secureContext
    name: secureContext
    fullName: secureContext
    children: []
    langs:
      - typeScript
    type: property
    summary: An optional TLS context object from tls.createSecureContext()
    optional: true
    syntax:
      content: 'secureContext?: SecureContext'
      return:
        type:
          - tslib.tls.SecureContext
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.secureOptions
    name: secureOptions
    fullName: secureOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Optionally affect the OpenSSL protocol behavior, which is not
      usually necessary. This should be used carefully if at all! Value is
      a numeric bitmask of the SSL_OP_* options from OpenSSL Options
    optional: true
    syntax:
      content: 'secureOptions?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.secureProtocol
    name: secureProtocol
    fullName: secureProtocol
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Legacy mechanism to select the TLS protocol version to use, it does
      not support independent control of the minimum and maximum version,
      and does not support limiting the protocol to TLSv1.3. Use
      minVersion and maxVersion instead. The possible values are listed as
      SSL_METHODS, use the function names as strings. For example, use
      'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow
      any TLS protocol version up to TLSv1.3. It is not recommended to use
      TLS versions less than 1.2, but it may be required for
      interoperability. Default: none, see minVersion.
    optional: true
    syntax:
      content: 'secureProtocol?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.servername
    name: servername
    fullName: servername
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'servername?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.session
    name: session
    fullName: session
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'session?: Buffer'
      return:
        type:
          - tslib.Buffer
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.sessionIdContext
    name: sessionIdContext
    fullName: sessionIdContext
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Opaque identifier used by servers to ensure session state is not
      shared between applications. Unused by clients.
    optional: true
    syntax:
      content: 'sessionIdContext?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.sigalgs
    name: sigalgs
    fullName: sigalgs
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Colon-separated list of supported signature algorithms. The list
       can contain digest algorithms (SHA256, MD5 etc.), public key
       algorithms (RSA-PSS, ECDSA etc.), combination of both (e.g
       'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).
    optional: true
    syntax:
      content: 'sigalgs?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.SNICallback
    name: SNICallback
    fullName: SNICallback
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      SNICallback(servername, cb) <Function> A function that will be
      called if the client supports SNI TLS extension. Two arguments
      will be passed when called: servername and cb. SNICallback should
      invoke cb(null, ctx), where ctx is a SecureContext instance.
      (tls.createSecureContext(...) can be used to get a proper
      SecureContext.) If SNICallback wasn't provided the default callback
      with high-level API will be used (see below).
    optional: true
    syntax:
      content: >-
        SNICallback?: undefined | (servername: string, cb: (err: Error | null,
        ctx: SecureContext) => void) => void
      return:
        type:
          - >-
            undefined | (servername: string, cb: (err: Error | null, ctx:
            SecureContext) => void) => void
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.socket
    name: socket
    fullName: socket
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'socket?: net.Socket'
      return:
        type:
          - net.Socket
        description: ''
    package: tslib
  - uid: tslib.https.AgentOptions.timeout
    name: timeout
    fullName: timeout
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Socket timeout in milliseconds. This will set the timeout after the socket
      is connected.
    optional: true
    syntax:
      content: 'timeout?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
references:
  - uid: tslib.http.Agent
    name: Agent
    spec.typeScript:
      - name: Agent
        fullName: Agent
        uid: tslib.http.Agent
  - uid: tslib.https.AgentOptions
    name: AgentOptions
    spec.typeScript:
      - name: AgentOptions
        fullName: AgentOptions
        uid: tslib.https.AgentOptions
  - uid: tslib.http.HttpBase
    name: HttpBase
    spec.typeScript:
      - name: HttpBase
        fullName: HttpBase
        uid: tslib.http.HttpBase
  - uid: tslib.https.ServerOptions
    name: ServerOptions
    spec.typeScript:
      - name: ServerOptions
        fullName: ServerOptions
        uid: tslib.https.ServerOptions
  - uid: tslib.tls.SecureContextOptions
    name: SecureContextOptions
    spec.typeScript:
      - name: SecureContextOptions
        fullName: SecureContextOptions
        uid: tslib.tls.SecureContextOptions
  - uid: tslib.net.AddressInfo | string | null
    name: AddressInfo | string | null
    spec.typeScript:
      - name: AddressInfo
        fullName: AddressInfo
        uid: tslib.net.AddressInfo
      - name: ' | string | null'
        fullName: ' | string | null'
  - uid: tslib.tls.TLSSocket
    name: TLSSocket
    spec.typeScript:
      - name: TLSSocket
        fullName: TLSSocket
        uid: tslib.tls.TLSSocket
  - uid: tslib.net.ListenOptions
    name: ListenOptions
    spec.typeScript:
      - name: ListenOptions
        fullName: ListenOptions
        uid: tslib.net.ListenOptions
  - uid: tslib.http.AgentOptions
    name: AgentOptions
    spec.typeScript:
      - name: AgentOptions
        fullName: AgentOptions
        uid: tslib.http.AgentOptions
  - uid: undefined | tslib.tls.checkServerIdentity
    name: checkServerIdentity
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: checkServerIdentity
        fullName: checkServerIdentity
        uid: tslib.tls.checkServerIdentity
  - uid: string | Buffer | Array<Buffer | tslib.tls.KeyObject>
    name: KeyObject>
    spec.typeScript:
      - name: 'string | Buffer | Array<Buffer | '
        fullName: 'string | Buffer | Array<Buffer | '
      - name: KeyObject
        fullName: KeyObject
        uid: tslib.tls.KeyObject
      - name: '>'
        fullName: '>'
  - uid: tslib.tls.SecureVersion
    name: SecureVersion
    spec.typeScript:
      - name: SecureVersion
        fullName: SecureVersion
        uid: tslib.tls.SecureVersion
  - uid: string | Buffer | Array<string | Buffer | tslib.tls.PxfObject>
    name: PxfObject>
    spec.typeScript:
      - name: 'string | Buffer | Array<string | Buffer | '
        fullName: 'string | Buffer | Array<string | Buffer | '
      - name: PxfObject
        fullName: PxfObject
        uid: tslib.tls.PxfObject
      - name: '>'
        fullName: '>'
  - uid: tslib.tls.SecureContext
    name: SecureContext
    spec.typeScript:
      - name: SecureContext
        fullName: SecureContext
        uid: tslib.tls.SecureContext
  - uid: tslib.Buffer
    name: Buffer
    spec.typeScript:
      - name: Buffer
        fullName: Buffer
        uid: tslib.Buffer
  - uid: tslib.tls.PSKCallbackNegotation | null
    name: PSKCallbackNegotation | null
    spec.typeScript:
      - name: PSKCallbackNegotation
        fullName: PSKCallbackNegotation
        uid: tslib.tls.PSKCallbackNegotation
      - name: ' | null'
        fullName: ' | null'
  - uid: tslib.https.Server
    name: Server
    spec.typeScript:
      - name: Server
        fullName: Server
        uid: tslib.https.Server
  - uid: tslib.https.RequestOptions | string | tslib.url.URL
    name: URL
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: tslib.https.RequestOptions
      - name: ' | string | '
        fullName: ' | string | '
      - name: URL
        fullName: URL
        uid: tslib.url.URL
  - uid: tslib.http.ClientRequest
    name: ClientRequest
    spec.typeScript:
      - name: ClientRequest
        fullName: ClientRequest
        uid: tslib.http.ClientRequest
  - uid: string | tslib.url.URL
    name: URL
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: URL
        fullName: URL
        uid: tslib.url.URL
  - uid: tslib.https.RequestOptions
    name: RequestOptions
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: tslib.https.RequestOptions
