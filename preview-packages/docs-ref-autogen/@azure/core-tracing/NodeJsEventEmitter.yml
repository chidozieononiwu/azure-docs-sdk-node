### YamlMime:UniversalReference
items:
  - uid: '@opentelemetry/types.NodeJsEventEmitter'
    name: NodeJsEventEmitter
    fullName: NodeJsEventEmitter
    children:
      - '@opentelemetry/types.NodeJsEventEmitter.addListener'
      - '@opentelemetry/types.NodeJsEventEmitter.emit'
      - '@opentelemetry/types.NodeJsEventEmitter.eventNames'
      - '@opentelemetry/types.NodeJsEventEmitter.getMaxListeners'
      - '@opentelemetry/types.NodeJsEventEmitter.listenerCount'
      - '@opentelemetry/types.NodeJsEventEmitter.listeners'
      - '@opentelemetry/types.NodeJsEventEmitter.on'
      - '@opentelemetry/types.NodeJsEventEmitter.once'
      - '@opentelemetry/types.NodeJsEventEmitter.prependListener'
      - '@opentelemetry/types.NodeJsEventEmitter.prependOnceListener'
      - '@opentelemetry/types.NodeJsEventEmitter.removeAllListeners'
      - '@opentelemetry/types.NodeJsEventEmitter.removeListener'
      - '@opentelemetry/types.NodeJsEventEmitter.setMaxListeners'
    langs:
      - typeScript
    type: interface
    summary: >-
      NodeJS.EventEmitter type included here so that this package does not

      need to take a dependency on the Node typings.

      See:

      https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/node/events.d.ts
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.addListener'
    name: 'addListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.emit'
    name: 'emit(string | symbol, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.eventNames'
    name: eventNames()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function eventNames()
      parameters: []
      return:
        type:
          - Array<string | symbol>
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.getMaxListeners'
    name: getMaxListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMaxListeners()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.listenerCount'
    name: listenerCount(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listenerCount(type: string | symbol)'
      parameters:
        - id: type
          type:
            - string | symbol
          description: ''
      return:
        type:
          - number
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.listeners'
    name: listeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.on'
    name: 'on(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.once'
    name: 'once(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.prependListener'
    name: 'prependListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.prependOnceListener'
    name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.removeAllListeners'
    name: removeAllListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.removeListener'
    name: 'removeListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
  - uid: '@opentelemetry/types.NodeJsEventEmitter.setMaxListeners'
    name: setMaxListeners(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type:
            - number
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@opentelemetry/types'
