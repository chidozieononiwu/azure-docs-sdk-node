### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.fs.promises.FileHandle'
    name: FileHandle
    fullName: FileHandle
    children:
      - '@azure/abort-controller.fs.promises.FileHandle.appendFile'
      - '@azure/abort-controller.fs.promises.FileHandle.chmod'
      - '@azure/abort-controller.fs.promises.FileHandle.chown'
      - '@azure/abort-controller.fs.promises.FileHandle.close'
      - '@azure/abort-controller.fs.promises.FileHandle.datasync'
      - '@azure/abort-controller.fs.promises.FileHandle.fd'
      - '@azure/abort-controller.fs.promises.FileHandle.read'
      - '@azure/abort-controller.fs.promises.FileHandle.readFile_1'
      - '@azure/abort-controller.fs.promises.FileHandle.readFile'
      - '@azure/abort-controller.fs.promises.FileHandle.readFile_2'
      - '@azure/abort-controller.fs.promises.FileHandle.stat'
      - '@azure/abort-controller.fs.promises.FileHandle.sync'
      - '@azure/abort-controller.fs.promises.FileHandle.truncate'
      - '@azure/abort-controller.fs.promises.FileHandle.utimes'
      - '@azure/abort-controller.fs.promises.FileHandle.write_1'
      - '@azure/abort-controller.fs.promises.FileHandle.write'
      - '@azure/abort-controller.fs.promises.FileHandle.writeFile'
      - '@azure/abort-controller.fs.promises.FileHandle.writev'
    langs:
      - typeScript
    type: interface
    summary: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.appendFile'
    name: 'appendFile(any, Object | string | null)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously append data to a file, creating the file if it does not
      exist. The underlying file will _not_ be closed automatically.

      The `FileHandle` must have been opened for appending.
    syntax:
      content: 'function appendFile(data: any, options?: Object | string | null)'
      parameters:
        - id: data
          type:
            - any
          description: >-
            The data to write. If something other than a `Buffer` or
            `Uint8Array` is provided, the value is coerced to a string.
        - id: options
          type:
            - Object | string | null
          description: >
            Either the encoding for the file, or an object optionally specifying
            the encoding, file mode, and flag.

            If `encoding` is not supplied, the default of `'utf8'` is used.

            If `mode` is not supplied, the default of `0o666` is used.

            If `mode` is a string, it is parsed as an octal integer.

            If `flag` is not supplied, the default of `'a'` is used.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.chmod'
    name: chmod(string | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronous fchmod(2) - Change permissions of a file.
    syntax:
      content: 'function chmod(mode: string | number)'
      parameters:
        - id: mode
          type:
            - string | number
          description: >
            A file mode. If a string is passed, it is parsed as an octal
            integer.
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.chown'
    name: 'chown(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronous fchown(2) - Change ownership of a file.
    syntax:
      content: 'function chown(uid: number, gid: number)'
      parameters:
        - id: uid
          type:
            - number
          description: ''
        - id: gid
          type:
            - number
          description: ''
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronous close(2) - close a `FileHandle`.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.datasync'
    name: datasync()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronous fdatasync(2) - synchronize a file's in-core state with
      storage device.
    syntax:
      content: function datasync()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.fd'
    name: fd
    fullName: fd
    children: []
    langs:
      - typeScript
    type: property
    summary: Gets the file descriptor for this file handle.
    syntax:
      content: 'fd: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.read'
    name: 'read(TBuffer, number | null, number | null, number | null)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Asynchronously reads data from the file.
      The `FileHandle` must have been opened for reading.
    syntax:
      content: >-
        function read<TBuffer>(buffer: TBuffer, offset?: number | null, length?:
        number | null, position?: number | null)
      parameters:
        - id: buffer
          type:
            - TBuffer
          description: The buffer that the data will be written to.
        - id: offset
          type:
            - number | null
          description: The offset in the buffer at which to start writing.
          optional: true
        - id: length
          type:
            - number | null
          description: The number of bytes to read.
          optional: true
        - id: position
          type:
            - number | null
          description: >
            The offset from the beginning of the file from which data should be
            read. If `null`, data will be read from the current position.
          optional: true
      return:
        type:
          - Promise<Object>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.readFile_1'
    name: readFile(Object | BufferEncoding)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously reads the entire contents of a file. The underlying file
      will _not_ be closed automatically.

      The `FileHandle` must have been opened for reading.
    syntax:
      content: 'function readFile(options: Object | BufferEncoding)'
      parameters:
        - id: options
          type:
            - Object | @azure/abort-controller.BufferEncoding
          description: |
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
      return:
        type:
          - Promise<string>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.readFile'
    name: readFile(Object | null)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously reads the entire contents of a file. The underlying file
      will _not_ be closed automatically.

      The `FileHandle` must have been opened for reading.
    syntax:
      content: 'function readFile(options?: Object | null)'
      parameters:
        - id: options
          type:
            - Object | null
          description: |
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
          optional: true
      return:
        type:
          - Promise<Buffer>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.readFile_2'
    name: readFile(Object | string | null)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously reads the entire contents of a file. The underlying file
      will _not_ be closed automatically.

      The `FileHandle` must have been opened for reading.
    syntax:
      content: 'function readFile(options?: Object | string | null)'
      parameters:
        - id: options
          type:
            - Object | string | null
          description: |
            An object that may contain an optional flag.
            If a flag is not provided, it defaults to `'r'`.
          optional: true
      return:
        type:
          - Promise<string | Buffer>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.stat'
    name: stat()
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronous fstat(2) - Get file status.
    syntax:
      content: function stat()
      parameters: []
      return:
        type:
          - Promise<@azure/abort-controller.fs.Stats>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.sync'
    name: sync()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronous fsync(2) - synchronize a file's in-core state with the
      underlying storage device.
    syntax:
      content: function sync()
      parameters: []
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.truncate'
    name: truncate(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronous ftruncate(2) - Truncate a file to a specified length.
    syntax:
      content: 'function truncate(len?: undefined | number)'
      parameters:
        - id: len
          type:
            - undefined | number
          description: |
            If not specified, defaults to `0`.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.utimes'
    name: 'utimes(string | number | Date, string | number | Date)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Asynchronously change file timestamps of the file.
    syntax:
      content: >-
        function utimes(atime: string | number | Date, mtime: string | number |
        Date)
      parameters:
        - id: atime
          type:
            - string | number | Date
          description: >-
            The last access time. If a string is provided, it will be coerced to
            number.
        - id: mtime
          type:
            - string | number | Date
          description: >
            The last modified time. If a string is provided, it will be coerced
            to number.
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.write_1'
    name: 'write(any, number | null, string | null)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously writes `string` to the file.

      The `FileHandle` must have been opened for writing.

      It is unsafe to call `write()` multiple times on the same file without
      waiting for the `Promise`

      to be resolved (or rejected). For this scenario, `fs.createWriteStream` is
      strongly recommended.
    syntax:
      content: >-
        function write(data: any, position?: number | null, encoding?: string |
        null)
      parameters:
        - id: data
          type:
            - any
          description: ''
        - id: position
          type:
            - number | null
          description: >-
            The offset from the beginning of the file where this data should be
            written. If not supplied, defaults to the current position.
          optional: true
        - id: encoding
          type:
            - string | null
          description: |
            The expected string encoding.
          optional: true
      return:
        type:
          - Promise<Object>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.write'
    name: 'write(TBuffer, number | null, number | null, number | null)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Asynchronously writes `buffer` to the file.
      The `FileHandle` must have been opened for writing.
    syntax:
      content: >-
        function write<TBuffer>(buffer: TBuffer, offset?: number | null,
        length?: number | null, position?: number | null)
      parameters:
        - id: buffer
          type:
            - TBuffer
          description: The buffer that the data will be written to.
        - id: offset
          type:
            - number | null
          description: >-
            The part of the buffer to be written. If not supplied, defaults to
            `0`.
          optional: true
        - id: length
          type:
            - number | null
          description: >-
            The number of bytes to write. If not supplied, defaults to
            `buffer.length - offset`.
          optional: true
        - id: position
          type:
            - number | null
          description: >
            The offset from the beginning of the file where this data should be
            written. If not supplied, defaults to the current position.
          optional: true
      return:
        type:
          - Promise<Object>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.writeFile'
    name: 'writeFile(any, Object | string | null)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Asynchronously writes data to a file, replacing the file if it already
      exists. The underlying file will _not_ be closed automatically.

      The `FileHandle` must have been opened for writing.

      It is unsafe to call `writeFile()` multiple times on the same file without
      waiting for the `Promise` to be resolved (or rejected).
    syntax:
      content: 'function writeFile(data: any, options?: Object | string | null)'
      parameters:
        - id: data
          type:
            - any
          description: >-
            The data to write. If something other than a `Buffer` or
            `Uint8Array` is provided, the value is coerced to a string.
        - id: options
          type:
            - Object | string | null
          description: >
            Either the encoding for the file, or an object optionally specifying
            the encoding, file mode, and flag.

            If `encoding` is not supplied, the default of `'utf8'` is used.

            If `mode` is not supplied, the default of `0o666` is used.

            If `mode` is a string, it is parsed as an octal integer.

            If `flag` is not supplied, the default of `'w'` is used.
          optional: true
      return:
        type:
          - Promise<void>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.fs.promises.FileHandle.writev'
    name: 'writev(NodeJS.ArrayBufferView[], undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: See `fs.writev` promisified version.
    syntax:
      content: >-
        function writev(buffers: NodeJS.ArrayBufferView[], position?: undefined
        | number)
      parameters:
        - id: buffers
          type:
            - '@azure/abort-controller.NodeJS.ArrayBufferView[]'
          description: ''
        - id: position
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/abort-controller.fs.WriteVResult>
        description: ''
    package: '@azure/abort-controller'
references:
  - uid: Object | @azure/abort-controller.BufferEncoding
    name: BufferEncoding
    spec.typeScript:
      - name: 'Object | '
        fullName: 'Object | '
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: '@azure/abort-controller.BufferEncoding'
  - uid: Promise<@azure/abort-controller.fs.Stats>
    name: Stats>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Stats
        fullName: Stats
        uid: '@azure/abort-controller.fs.Stats'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.NodeJS.ArrayBufferView[]'
    name: 'ArrayBufferView[]'
    spec.typeScript:
      - name: ArrayBufferView
        fullName: ArrayBufferView
        uid: '@azure/abort-controller.NodeJS.ArrayBufferView'
      - name: '[]'
        fullName: '[]'
  - uid: Promise<@azure/abort-controller.fs.WriteVResult>
    name: WriteVResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: WriteVResult
        fullName: WriteVResult
        uid: '@azure/abort-controller.fs.WriteVResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.fs.PathLike'
    name: PathLike
    spec.typeScript:
      - name: PathLike
        fullName: PathLike
        uid: '@azure/abort-controller.fs.PathLike'
  - uid: >-
      @azure/abort-controller.fs.PathLike |
      @azure/abort-controller.fs.promises.FileHandle
    name: FileHandle
    spec.typeScript:
      - name: PathLike
        fullName: PathLike
        uid: '@azure/abort-controller.fs.PathLike'
      - name: ' | '
        fullName: ' | '
      - name: FileHandle
        fullName: FileHandle
        uid: '@azure/abort-controller.fs.promises.FileHandle'
  - uid: '@azure/abort-controller.fs.promises.FileHandle'
    name: FileHandle
    spec.typeScript:
      - name: FileHandle
        fullName: FileHandle
        uid: '@azure/abort-controller.fs.promises.FileHandle'
  - uid: number | string | @azure/abort-controller.fs.MakeDirectoryOptions | null
    name: MakeDirectoryOptions | null
    spec.typeScript:
      - name: 'number | string | '
        fullName: 'number | string | '
      - name: MakeDirectoryOptions
        fullName: MakeDirectoryOptions
        uid: '@azure/abort-controller.fs.MakeDirectoryOptions'
      - name: ' | null'
        fullName: ' | null'
  - uid: Object | @azure/abort-controller.BufferEncoding | null
    name: BufferEncoding | null
    spec.typeScript:
      - name: 'Object | '
        fullName: 'Object | '
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: '@azure/abort-controller.BufferEncoding'
      - name: ' | null'
        fullName: ' | null'
  - uid: Promise<@azure/abort-controller.fs.promises.FileHandle>
    name: FileHandle>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileHandle
        fullName: FileHandle
        uid: '@azure/abort-controller.fs.promises.FileHandle'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.fs.OpenDirOptions'
    name: OpenDirOptions
    spec.typeScript:
      - name: OpenDirOptions
        fullName: OpenDirOptions
        uid: '@azure/abort-controller.fs.OpenDirOptions'
  - uid: Promise<@azure/abort-controller.fs.Dir>
    name: Dir>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Dir
        fullName: Dir
        uid: '@azure/abort-controller.fs.Dir'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/abort-controller.fs.Dirent[]>'
    name: 'Dirent[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Dirent
        fullName: Dirent
        uid: '@azure/abort-controller.fs.Dirent'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/abort-controller.fs.RmDirAsyncOptions'
    name: RmDirAsyncOptions
    spec.typeScript:
      - name: RmDirAsyncOptions
        fullName: RmDirAsyncOptions
        uid: '@azure/abort-controller.fs.RmDirAsyncOptions'
  - uid: Object | @azure/abort-controller.BufferEncoding | undefined | null
    name: BufferEncoding | undefined | null
    spec.typeScript:
      - name: 'Object | '
        fullName: 'Object | '
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: '@azure/abort-controller.BufferEncoding'
      - name: ' | undefined | null'
        fullName: ' | undefined | null'
  - uid: '@azure/abort-controller.fs.NoParamCallback'
    name: NoParamCallback
    spec.typeScript:
      - name: NoParamCallback
        fullName: NoParamCallback
        uid: '@azure/abort-controller.fs.NoParamCallback'
  - uid: Promise<@azure/abort-controller.fs.Dirent | null>
    name: Dirent | null>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Dirent
        fullName: Dirent
        uid: '@azure/abort-controller.fs.Dirent'
      - name: ' | null>'
        fullName: ' | null>'
  - uid: '@azure/abort-controller.fs.Dirent'
    name: Dirent
    spec.typeScript:
      - name: Dirent
        fullName: Dirent
        uid: '@azure/abort-controller.fs.Dirent'
  - uid: '@azure/abort-controller.stream.internal.Readable'
    name: Readable
    spec.typeScript:
      - name: Readable
        fullName: Readable
        uid: '@azure/abort-controller.stream.internal.Readable'
  - uid: '@azure/abort-controller.stream.internal.ReadableOptions'
    name: ReadableOptions
    spec.typeScript:
      - name: ReadableOptions
        fullName: ReadableOptions
        uid: '@azure/abort-controller.stream.internal.ReadableOptions'
  - uid: '@azure/abort-controller.AbortError.Error'
    name: Error
    spec.typeScript:
      - name: Error
        fullName: Error
        uid: '@azure/abort-controller.AbortError.Error'
  - uid: '@azure/abort-controller.NodeJS.WritableStream'
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: '@azure/abort-controller.NodeJS.WritableStream'
  - uid: '@azure/abort-controller.BufferEncoding'
    name: BufferEncoding
    spec.typeScript:
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: '@azure/abort-controller.BufferEncoding'
  - uid: '@azure/abort-controller.NodeJS.ReadableStream'
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: '@azure/abort-controller.NodeJS.ReadableStream'
  - uid: '@azure/abort-controller.fs.StatsBase<number>'
    name: StatsBase<number>
    spec.typeScript:
      - name: StatsBase
        fullName: StatsBase
        uid: '@azure/abort-controller.fs.StatsBase'
      - name: <number>
        fullName: <number>
  - uid: '@azure/abort-controller.stream.internal.Writable'
    name: Writable
    spec.typeScript:
      - name: Writable
        fullName: Writable
        uid: '@azure/abort-controller.stream.internal.Writable'
  - uid: '@azure/abort-controller.stream.internal.WritableOptions'
    name: WritableOptions
    spec.typeScript:
      - name: WritableOptions
        fullName: WritableOptions
        uid: '@azure/abort-controller.stream.internal.WritableOptions'
  - uid: '@azure/abort-controller.events.EventEmitter.EventEmitter'
    name: EventEmitter
    spec.typeScript:
      - name: EventEmitter
        fullName: EventEmitter
        uid: '@azure/abort-controller.events.EventEmitter.EventEmitter'
  - uid: '@azure/abort-controller.events.EventEmitterOptions'
    name: EventEmitterOptions
    spec.typeScript:
      - name: EventEmitterOptions
        fullName: EventEmitterOptions
        uid: '@azure/abort-controller.events.EventEmitterOptions'
  - uid: '@azure/abort-controller.fs.RmDirOptions'
    name: RmDirOptions
    spec.typeScript:
      - name: RmDirOptions
        fullName: RmDirOptions
        uid: '@azure/abort-controller.fs.RmDirOptions'
  - uid: '@azure/abort-controller.fs.PathLike | number'
    name: PathLike | number
    spec.typeScript:
      - name: PathLike
        fullName: PathLike
        uid: '@azure/abort-controller.fs.PathLike'
      - name: ' | number'
        fullName: ' | number'
  - uid: '@azure/abort-controller.fs.WriteFileOptions'
    name: WriteFileOptions
    spec.typeScript:
      - name: WriteFileOptions
        fullName: WriteFileOptions
        uid: '@azure/abort-controller.fs.WriteFileOptions'
  - uid: '@azure/abort-controller.fs.ReadStream'
    name: ReadStream
    spec.typeScript:
      - name: ReadStream
        fullName: ReadStream
        uid: '@azure/abort-controller.fs.ReadStream'
  - uid: '@azure/abort-controller.fs.WriteStream'
    name: WriteStream
    spec.typeScript:
      - name: WriteStream
        fullName: WriteStream
        uid: '@azure/abort-controller.fs.WriteStream'
  - uid: '@azure/abort-controller.fs.Stats'
    name: Stats
    spec.typeScript:
      - name: Stats
        fullName: Stats
        uid: '@azure/abort-controller.fs.Stats'
  - uid: '@azure/abort-controller.fs.Dir'
    name: Dir
    spec.typeScript:
      - name: Dir
        fullName: Dir
        uid: '@azure/abort-controller.fs.Dir'
  - uid: '@azure/abort-controller.NodeJS.ArrayBufferView'
    name: ArrayBufferView
    spec.typeScript:
      - name: ArrayBufferView
        fullName: ArrayBufferView
        uid: '@azure/abort-controller.NodeJS.ArrayBufferView'
  - uid: '@azure/abort-controller.fs.Dirent[]'
    name: 'Dirent[]'
    spec.typeScript:
      - name: Dirent
        fullName: Dirent
        uid: '@azure/abort-controller.fs.Dirent'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.fs.FSWatcher'
    name: FSWatcher
    spec.typeScript:
      - name: FSWatcher
        fullName: FSWatcher
        uid: '@azure/abort-controller.fs.FSWatcher'
