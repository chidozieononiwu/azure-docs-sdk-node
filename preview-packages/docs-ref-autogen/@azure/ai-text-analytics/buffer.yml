### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.Buffer'
    name: Buffer
    fullName: Buffer
    children:
      - '@azure/abort-controller.Buffer.buffer'
      - '@azure/abort-controller.Buffer.byteLength'
      - '@azure/abort-controller.Buffer.byteOffset'
      - '@azure/abort-controller.Buffer.BYTES_PER_ELEMENT'
      - '@azure/abort-controller.Buffer.copyWithin'
      - '@azure/abort-controller.Buffer.entries'
      - '@azure/abort-controller.Buffer.every'
      - '@azure/abort-controller.Buffer.fill'
      - '@azure/abort-controller.Buffer.filter'
      - '@azure/abort-controller.Buffer.find'
      - '@azure/abort-controller.Buffer.findIndex'
      - '@azure/abort-controller.Buffer.forEach'
      - '@azure/abort-controller.Buffer.includes'
      - '@azure/abort-controller.Buffer.indexOf'
      - '@azure/abort-controller.Buffer.join'
      - '@azure/abort-controller.Buffer.keys'
      - '@azure/abort-controller.Buffer.lastIndexOf'
      - '@azure/abort-controller.Buffer.length'
      - '@azure/abort-controller.Buffer.map'
      - '@azure/abort-controller.Buffer.readBigInt64BE'
      - '@azure/abort-controller.Buffer.readBigInt64LE'
      - '@azure/abort-controller.Buffer.readBigUInt64BE'
      - '@azure/abort-controller.Buffer.readBigUInt64LE'
      - '@azure/abort-controller.Buffer.reduce'
      - '@azure/abort-controller.Buffer.reduce_1'
      - '@azure/abort-controller.Buffer.reduce_2'
      - '@azure/abort-controller.Buffer.reduceRight'
      - '@azure/abort-controller.Buffer.reduceRight_1'
      - '@azure/abort-controller.Buffer.reduceRight_2'
      - '@azure/abort-controller.Buffer.reverse'
      - '@azure/abort-controller.Buffer.set'
      - '@azure/abort-controller.Buffer.slice'
      - '@azure/abort-controller.Buffer.some'
      - '@azure/abort-controller.Buffer.sort'
      - '@azure/abort-controller.Buffer.subarray'
      - '@azure/abort-controller.Buffer.toLocaleString'
      - '@azure/abort-controller.Buffer.toString'
      - '@azure/abort-controller.Buffer.Uint8Array'
      - '@azure/abort-controller.Buffer.values'
      - '@azure/abort-controller.Buffer.writeBigInt64BE'
      - '@azure/abort-controller.Buffer.writeBigInt64LE'
      - '@azure/abort-controller.Buffer.writeBigUInt64BE'
      - '@azure/abort-controller.Buffer.writeBigUInt64LE'
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: Uint8Array
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.buffer'
    name: buffer
    fullName: buffer
    children: []
    langs:
      - typeScript
    type: property
    summary: The ArrayBuffer instance referenced by the array.
    syntax:
      content: 'buffer: ArrayBufferLike'
      return:
        type:
          - ArrayBufferLike
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.byteLength'
    name: byteLength
    fullName: byteLength
    children: []
    langs:
      - typeScript
    type: property
    summary: The length in bytes of the array.
    syntax:
      content: 'byteLength: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.byteOffset'
    name: byteOffset
    fullName: byteOffset
    children: []
    langs:
      - typeScript
    type: property
    summary: The offset in bytes of the array.
    syntax:
      content: 'byteOffset: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.BYTES_PER_ELEMENT'
    name: BYTES_PER_ELEMENT
    fullName: BYTES_PER_ELEMENT
    children: []
    langs:
      - typeScript
    type: property
    summary: The size in bytes of each element in the array.
    syntax:
      content: 'BYTES_PER_ELEMENT: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.copyWithin'
    name: 'copyWithin(number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the this object after copying a section of the array identified by
      start and end

      to the same array starting at position target
    syntax:
      content: 'function copyWithin(target: number, start: number, end?: number)'
      parameters:
        - id: target
          type:
            - number
          description: >-
            If target is negative, it is treated as length+target where length
            is the

            length of the array.
        - id: start
          type:
            - number
          description: >-
            If start is negative, it is treated as length+start. If end is
            negative, it

            is treated as length+end.
        - id: end
          type:
            - number
          description: >
            If not specified, length of the this object is used as its default
            value.
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.entries'
    name: entries()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Returns an array of key, value pairs for every entry in the array'
    syntax:
      content: function entries()
      parameters: []
      return:
        type:
          - IterableIterator<Object>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.every'
    name: 'every((value: number, index: number, array: Uint8Array) => boolean, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Determines whether all the members of an array satisfy the specified test.
    syntax:
      content: >-
        function every(callbackfn: (value: number, index: number, array:
        Uint8Array) => boolean, thisArg?: any)
      parameters:
        - id: callbackfn
          type:
            - '(value: number, index: number, array: Uint8Array) => boolean'
          description: >-
            A function that accepts up to three arguments. The every method
            calls

            the callbackfn function for each element in array1 until the
            callbackfn returns false,

            or until the end of the array.
        - id: thisArg
          type:
            - any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function.

            If thisArg is omitted, undefined is used as the this value.
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.fill'
    name: 'fill(number, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the this object after filling the section identified by start and
      end with value
    syntax:
      content: 'function fill(value: number, start?: number, end?: number)'
      parameters:
        - id: value
          type:
            - number
          description: value to fill array section with
        - id: start
          type:
            - number
          description: >-
            index to start filling the array at. If start is negative, it is
            treated as

            length+start where length is the length of the array.
          optional: true
        - id: end
          type:
            - number
          description: >
            index to stop filling the array at. If end is negative, it is
            treated as

            length+end.
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.filter'
    name: 'filter((value: number, index: number, array: Uint8Array) => any, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the elements of an array that meet the condition specified in a
      callback function.
    syntax:
      content: >-
        function filter(callbackfn: (value: number, index: number, array:
        Uint8Array) => any, thisArg?: any)
      parameters:
        - id: callbackfn
          type:
            - '(value: number, index: number, array: Uint8Array) => any'
          description: >-
            A function that accepts up to three arguments. The filter method
            calls

            the callbackfn function one time for each element in the array.
        - id: thisArg
          type:
            - any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function.

            If thisArg is omitted, undefined is used as the this value.
          optional: true
      return:
        type:
          - Uint8Array
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.find'
    name: 'find((value: number, index: number, obj: Uint8Array) => boolean, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the value of the first element in the array where predicate is
      true, and undefined

      otherwise.
    syntax:
      content: >-
        function find(predicate: (value: number, index: number, obj: Uint8Array)
        => boolean, thisArg?: any)
      parameters:
        - id: predicate
          type:
            - '(value: number, index: number, obj: Uint8Array) => boolean'
          description: >-
            find calls predicate once for each element of the array, in
            ascending

            order, until it finds one where predicate returns true. If such an
            element is found, find

            immediately returns that element value. Otherwise, find returns
            undefined.
        - id: thisArg
          type:
            - any
          description: >
            If provided, it will be used as the this value for each invocation
            of

            predicate. If it is not provided, undefined is used instead.
          optional: true
      return:
        type:
          - number | undefined
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.findIndex'
    name: 'findIndex((value: number, index: number, obj: Uint8Array) => boolean, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns the index of the first element in the array where predicate is
      true, and -1

      otherwise.
    syntax:
      content: >-
        function findIndex(predicate: (value: number, index: number, obj:
        Uint8Array) => boolean, thisArg?: any)
      parameters:
        - id: predicate
          type:
            - '(value: number, index: number, obj: Uint8Array) => boolean'
          description: >-
            find calls predicate once for each element of the array, in
            ascending

            order, until it finds one where predicate returns true. If such an
            element is found,

            findIndex immediately returns that element index. Otherwise,
            findIndex returns -1.
        - id: thisArg
          type:
            - any
          description: >
            If provided, it will be used as the this value for each invocation
            of

            predicate. If it is not provided, undefined is used instead.
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.forEach'
    name: 'forEach((value: number, index: number, array: Uint8Array) => void, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Performs the specified action for each element in an array.
    syntax:
      content: >-
        function forEach(callbackfn: (value: number, index: number, array:
        Uint8Array) => void, thisArg?: any)
      parameters:
        - id: callbackfn
          type:
            - '(value: number, index: number, array: Uint8Array) => void'
          description: |-
            A function that accepts up to three arguments. forEach calls the
            callbackfn function one time for each element in the array.
        - id: thisArg
          type:
            - any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function.

            If thisArg is omitted, undefined is used as the this value.
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.includes'
    name: 'includes(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether an array includes a certain element, returning true or
      false as appropriate.
    syntax:
      content: 'function includes(searchElement: number, fromIndex?: number)'
      parameters:
        - id: searchElement
          type:
            - number
          description: The element to search for.
        - id: fromIndex
          type:
            - number
          description: >
            The position in this array at which to begin searching for
            searchElement.
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.indexOf'
    name: 'indexOf(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the index of the first occurrence of a value in an array.
    syntax:
      content: 'function indexOf(searchElement: number, fromIndex?: number)'
      parameters:
        - id: searchElement
          type:
            - number
          description: The value to locate in the array.
        - id: fromIndex
          type:
            - number
          description: >
            The array index at which to begin the search. If fromIndex is
            omitted, the
             search starts at index 0.
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.join'
    name: join(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Adds all the elements of an array separated by the specified separator
      string.
    syntax:
      content: 'function join(separator?: string)'
      parameters:
        - id: separator
          type:
            - string
          description: >
            A string used to separate one element of an array from the next in
            the

            resulting String. If omitted, the array elements are separated with
            a comma.
          optional: true
      return:
        type:
          - string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.keys'
    name: keys()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns an list of keys in the array
    syntax:
      content: function keys()
      parameters: []
      return:
        type:
          - IterableIterator<number>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.lastIndexOf'
    name: 'lastIndexOf(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the index of the last occurrence of a value in an array.
    syntax:
      content: 'function lastIndexOf(searchElement: number, fromIndex?: number)'
      parameters:
        - id: searchElement
          type:
            - number
          description: The value to locate in the array.
        - id: fromIndex
          type:
            - number
          description: >
            The array index at which to begin the search. If fromIndex is
            omitted, the

            search starts at index 0.
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.length'
    name: length
    fullName: length
    children: []
    langs:
      - typeScript
    type: property
    summary: The length of the array.
    syntax:
      content: 'length: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.map'
    name: 'map((value: number, index: number, array: Uint8Array) => number, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls a defined callback function on each element of an array, and returns
      an array that

      contains the results.
    syntax:
      content: >-
        function map(callbackfn: (value: number, index: number, array:
        Uint8Array) => number, thisArg?: any)
      parameters:
        - id: callbackfn
          type:
            - '(value: number, index: number, array: Uint8Array) => number'
          description: >-
            A function that accepts up to three arguments. The map method calls
            the

            callbackfn function one time for each element in the array.
        - id: thisArg
          type:
            - any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function.

            If thisArg is omitted, undefined is used as the this value.
          optional: true
      return:
        type:
          - Uint8Array
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.readBigInt64BE'
    name: readBigInt64BE(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function readBigInt64BE(offset?: number)'
      parameters:
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - bigint
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.readBigInt64LE'
    name: readBigInt64LE(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function readBigInt64LE(offset?: number)'
      parameters:
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - bigint
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.readBigUInt64BE'
    name: readBigUInt64BE(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function readBigUInt64BE(offset?: number)'
      parameters:
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - bigint
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.readBigUInt64LE'
    name: readBigUInt64LE(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function readBigUInt64LE(offset?: number)'
      parameters:
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - bigint
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reduce'
    name: >-
      reduce((previousValue: number, currentValue: number, currentIndex: number,
      array: Uint8Array) => number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls the specified callback function for all the elements in an array.
      The return value of

      the callback function is the accumulated result, and is provided as an
      argument in the next

      call to the callback function.
    syntax:
      content: >-
        function reduce(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: Uint8Array) => number)
      parameters:
        - id: callbackfn
          type:
            - >-
              (previousValue: number, currentValue: number, currentIndex:
              number, array: Uint8Array) => number
          description: >-
            A function that accepts up to four arguments. The reduce method
            calls the

            callbackfn function one time for each element in the array.
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reduce_1'
    name: >-
      reduce((previousValue: number, currentValue: number, currentIndex: number,
      array: Uint8Array) => number, number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reduce(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: Uint8Array) => number,
        initialValue: number)
      parameters:
        - id: callbackfn
          type:
            - >-
              (previousValue: number, currentValue: number, currentIndex:
              number, array: Uint8Array) => number
          description: ''
        - id: initialValue
          type:
            - number
          description: ''
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reduce_2'
    name: >-
      reduce((previousValue: U, currentValue: number, currentIndex: number,
      array: Uint8Array) => U, U)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls the specified callback function for all the elements in an array.
      The return value of

      the callback function is the accumulated result, and is provided as an
      argument in the next

      call to the callback function.
    syntax:
      content: >-
        function reduce<U>(callbackfn: (previousValue: U, currentValue: number,
        currentIndex: number, array: Uint8Array) => U, initialValue: U)
      parameters:
        - id: callbackfn
          type:
            - >-
              (previousValue: U, currentValue: number, currentIndex: number,
              array: Uint8Array) => U
          description: >-
            A function that accepts up to four arguments. The reduce method
            calls the

            callbackfn function one time for each element in the array.
        - id: initialValue
          type:
            - U
          description: >
            If initialValue is specified, it is used as the initial value to
            start

            the accumulation. The first call to the callbackfn function provides
            this value as an argument

            instead of an array value.
      return:
        type:
          - U
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reduceRight'
    name: >-
      reduceRight((previousValue: number, currentValue: number, currentIndex:
      number, array: Uint8Array) => number)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls the specified callback function for all the elements in an array, in
      descending order.

      The return value of the callback function is the accumulated result, and
      is provided as an

      argument in the next call to the callback function.
    syntax:
      content: >-
        function reduceRight(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: Uint8Array) => number)
      parameters:
        - id: callbackfn
          type:
            - >-
              (previousValue: number, currentValue: number, currentIndex:
              number, array: Uint8Array) => number
          description: >-
            A function that accepts up to four arguments. The reduceRight method
            calls

            the callbackfn function one time for each element in the array.
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reduceRight_1'
    name: >-
      reduceRight((previousValue: number, currentValue: number, currentIndex:
      number, array: Uint8Array) => number, number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function reduceRight(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: Uint8Array) => number,
        initialValue: number)
      parameters:
        - id: callbackfn
          type:
            - >-
              (previousValue: number, currentValue: number, currentIndex:
              number, array: Uint8Array) => number
          description: ''
        - id: initialValue
          type:
            - number
          description: ''
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reduceRight_2'
    name: >-
      reduceRight((previousValue: U, currentValue: number, currentIndex: number,
      array: Uint8Array) => U, U)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls the specified callback function for all the elements in an array, in
      descending order.

      The return value of the callback function is the accumulated result, and
      is provided as an

      argument in the next call to the callback function.
    syntax:
      content: >-
        function reduceRight<U>(callbackfn: (previousValue: U, currentValue:
        number, currentIndex: number, array: Uint8Array) => U, initialValue: U)
      parameters:
        - id: callbackfn
          type:
            - >-
              (previousValue: U, currentValue: number, currentIndex: number,
              array: Uint8Array) => U
          description: >-
            A function that accepts up to four arguments. The reduceRight method
            calls

            the callbackfn function one time for each element in the array.
        - id: initialValue
          type:
            - U
          description: >
            If initialValue is specified, it is used as the initial value to
            start

            the accumulation. The first call to the callbackfn function provides
            this value as an argument

            instead of an array value.
      return:
        type:
          - U
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.reverse'
    name: reverse()
    children: []
    type: method
    langs:
      - typeScript
    summary: Reverses the elements in an Array.
    syntax:
      content: function reverse()
      parameters: []
      return:
        type:
          - Uint8Array
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.set'
    name: 'set(ArrayLike<number>, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets a value or an array of values.
    syntax:
      content: 'function set(array: ArrayLike<number>, offset?: number)'
      parameters:
        - id: array
          type:
            - ArrayLike<number>
          description: A typed or untyped array of values to set.
        - id: offset
          type:
            - number
          description: >
            The index in the current array at which the values are to be
            written.
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.slice'
    name: 'slice(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a section of an array.
    syntax:
      content: 'function slice(start?: number, end?: number)'
      parameters:
        - id: start
          type:
            - number
          description: The beginning of the specified portion of the array.
          optional: true
        - id: end
          type:
            - number
          description: |
            The end of the specified portion of the array.
          optional: true
      return:
        type:
          - Uint8Array
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.some'
    name: 'some((value: number, index: number, array: Uint8Array) => boolean, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Determines whether the specified callback function returns true for any
      element of an array.
    syntax:
      content: >-
        function some(callbackfn: (value: number, index: number, array:
        Uint8Array) => boolean, thisArg?: any)
      parameters:
        - id: callbackfn
          type:
            - '(value: number, index: number, array: Uint8Array) => boolean'
          description: >-
            A function that accepts up to three arguments. The some method calls
            the

            callbackfn function for each element in array1 until the callbackfn
            returns true, or until

            the end of the array.
        - id: thisArg
          type:
            - any
          description: >
            An object to which the this keyword can refer in the callbackfn
            function.

            If thisArg is omitted, undefined is used as the this value.
          optional: true
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.sort'
    name: 'sort((a: number, b: number) => number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Sorts an array.
    syntax:
      content: 'function sort(compareFn?: (a: number, b: number) => number)'
      parameters:
        - id: compareFn
          type:
            - '(a: number, b: number) => number'
          description: >
            The name of the function used to determine the order of the
            elements. If

            omitted, the elements are sorted in ascending, ASCII character
            order.
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.subarray'
    name: 'subarray(number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets a new Uint8Array view of the ArrayBuffer store for this array,
      referencing the elements

      at begin, inclusive, up to end, exclusive.
    syntax:
      content: 'function subarray(begin: number, end?: number)'
      parameters:
        - id: begin
          type:
            - number
          description: The index of the beginning of the array.
        - id: end
          type:
            - number
          description: |
            The index of the end of the array.
          optional: true
      return:
        type:
          - Uint8Array
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.toLocaleString'
    name: toLocaleString()
    children: []
    type: method
    langs:
      - typeScript
    summary: Converts a number to a string by using the current locale.
    syntax:
      content: function toLocaleString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.toString'
    name: toString()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a string representation of an array.
    syntax:
      content: function toString()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.Uint8Array'
    name: Uint8Array
    fullName: Uint8Array
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'Uint8Array: Uint8ArrayConstructor'
      return:
        type:
          - Uint8ArrayConstructor
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.values'
    name: values()
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns an list of values in the array
    syntax:
      content: function values()
      parameters: []
      return:
        type:
          - IterableIterator<number>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.writeBigInt64BE'
    name: 'writeBigInt64BE(bigint, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function writeBigInt64BE(value: bigint, offset?: number)'
      parameters:
        - id: value
          type:
            - bigint
          description: ''
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.writeBigInt64LE'
    name: 'writeBigInt64LE(bigint, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function writeBigInt64LE(value: bigint, offset?: number)'
      parameters:
        - id: value
          type:
            - bigint
          description: ''
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.writeBigUInt64BE'
    name: 'writeBigUInt64BE(bigint, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function writeBigUInt64BE(value: bigint, offset?: number)'
      parameters:
        - id: value
          type:
            - bigint
          description: ''
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Buffer.writeBigUInt64LE'
    name: 'writeBigUInt64LE(bigint, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function writeBigUInt64LE(value: bigint, offset?: number)'
      parameters:
        - id: value
          type:
            - bigint
          description: ''
        - id: offset
          type:
            - number
          description: ''
          optional: true
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
