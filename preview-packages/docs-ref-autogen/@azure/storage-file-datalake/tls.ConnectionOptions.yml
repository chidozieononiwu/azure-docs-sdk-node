### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.tls.ConnectionOptions'
    name: ConnectionOptions
    fullName: ConnectionOptions
    children:
      - '@azure/abort-controller.tls.ConnectionOptions.ALPNProtocols'
      - '@azure/abort-controller.tls.ConnectionOptions.ca'
      - '@azure/abort-controller.tls.ConnectionOptions.cert'
      - '@azure/abort-controller.tls.ConnectionOptions.checkServerIdentity'
      - '@azure/abort-controller.tls.ConnectionOptions.ciphers'
      - '@azure/abort-controller.tls.ConnectionOptions.clientCertEngine'
      - '@azure/abort-controller.tls.ConnectionOptions.crl'
      - '@azure/abort-controller.tls.ConnectionOptions.dhparam'
      - '@azure/abort-controller.tls.ConnectionOptions.ecdhCurve'
      - '@azure/abort-controller.tls.ConnectionOptions.enableTrace'
      - '@azure/abort-controller.tls.ConnectionOptions.honorCipherOrder'
      - '@azure/abort-controller.tls.ConnectionOptions.host'
      - '@azure/abort-controller.tls.ConnectionOptions.key'
      - '@azure/abort-controller.tls.ConnectionOptions.lookup'
      - '@azure/abort-controller.tls.ConnectionOptions.maxVersion'
      - '@azure/abort-controller.tls.ConnectionOptions.minDHSize'
      - '@azure/abort-controller.tls.ConnectionOptions.minVersion'
      - '@azure/abort-controller.tls.ConnectionOptions.passphrase'
      - '@azure/abort-controller.tls.ConnectionOptions.path'
      - '@azure/abort-controller.tls.ConnectionOptions.pfx'
      - '@azure/abort-controller.tls.ConnectionOptions.port'
      - '@azure/abort-controller.tls.ConnectionOptions.privateKeyEngine'
      - '@azure/abort-controller.tls.ConnectionOptions.privateKeyIdentifier'
      - '@azure/abort-controller.tls.ConnectionOptions.pskCallback'
      - '@azure/abort-controller.tls.ConnectionOptions.rejectUnauthorized'
      - '@azure/abort-controller.tls.ConnectionOptions.requestCert'
      - '@azure/abort-controller.tls.ConnectionOptions.secureContext'
      - '@azure/abort-controller.tls.ConnectionOptions.secureOptions'
      - '@azure/abort-controller.tls.ConnectionOptions.secureProtocol'
      - '@azure/abort-controller.tls.ConnectionOptions.servername'
      - '@azure/abort-controller.tls.ConnectionOptions.session'
      - '@azure/abort-controller.tls.ConnectionOptions.sessionIdContext'
      - '@azure/abort-controller.tls.ConnectionOptions.sigalgs'
      - '@azure/abort-controller.tls.ConnectionOptions.SNICallback'
      - '@azure/abort-controller.tls.ConnectionOptions.socket'
      - '@azure/abort-controller.tls.ConnectionOptions.timeout'
    langs:
      - typeScript
    type: interface
    summary: ''
    extends:
      name: '@azure/abort-controller.tls.SecureContextOptions'
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.ALPNProtocols'
    name: ALPNProtocols
    fullName: ALPNProtocols
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      An array of strings or a Buffer naming possible ALPN protocols.
      (Protocols should be ordered by their priority.)
    optional: true
    syntax:
      content: 'ALPNProtocols?: string[] | Uint8Array[] | Uint8Array'
      return:
        type:
          - 'string[] | Uint8Array[] | Uint8Array'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.ca'
    name: ca
    fullName: ca
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Optionally override the trusted CA certificates. Default is to trust
      the well-known CAs curated by Mozilla. Mozilla's CAs are completely
      replaced when CAs are explicitly specified using this option.
    optional: true
    syntax:
      content: 'ca?: string | Buffer | Array<string | Buffer>'
      return:
        type:
          - string | Buffer | Array<string | Buffer>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.cert'
    name: cert
    fullName: cert
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Cert chains in PEM format. One cert chain should be provided per
       private key. Each cert chain should consist of the PEM formatted
       certificate for a provided private key, followed by the PEM
       formatted intermediate certificates (if any), in order, and not
       including the root CA (the root CA must be pre-known to the peer,
       see ca). When providing multiple cert chains, they do not have to
       be in the same order as their private keys in key. If the
       intermediate certificates are not provided, the peer will not be
       able to validate the certificate, and the handshake will fail.
    optional: true
    syntax:
      content: 'cert?: string | Buffer | Array<string | Buffer>'
      return:
        type:
          - string | Buffer | Array<string | Buffer>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.checkServerIdentity'
    name: checkServerIdentity
    fullName: checkServerIdentity
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'checkServerIdentity?: undefined | checkServerIdentity'
      return:
        type:
          - undefined | @azure/abort-controller.tls.checkServerIdentity
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.ciphers'
    name: ciphers
    fullName: ciphers
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Cipher suite specification, replacing the default. For more
      information, see modifying the default cipher suite. Permitted
      ciphers can be obtained via tls.getCiphers(). Cipher names must be
      uppercased in order for OpenSSL to accept them.
    optional: true
    syntax:
      content: 'ciphers?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.clientCertEngine'
    name: clientCertEngine
    fullName: clientCertEngine
    children: []
    langs:
      - typeScript
    type: property
    summary: Name of an OpenSSL engine which can provide the client certificate.
    optional: true
    syntax:
      content: 'clientCertEngine?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.crl'
    name: crl
    fullName: crl
    children: []
    langs:
      - typeScript
    type: property
    summary: PEM formatted CRLs (Certificate Revocation Lists).
    optional: true
    syntax:
      content: 'crl?: string | Buffer | Array<string | Buffer>'
      return:
        type:
          - string | Buffer | Array<string | Buffer>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.dhparam'
    name: dhparam
    fullName: dhparam
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Diffie Hellman parameters, required for Perfect Forward Secrecy. Use
      openssl dhparam to create the parameters. The key length must be
      greater than or equal to 1024 bits or else an error will be thrown.
      Although 1024 bits is permissible, use 2048 bits or larger for
      stronger security. If omitted or invalid, the parameters are
      silently discarded and DHE ciphers will not be available.
    optional: true
    syntax:
      content: 'dhparam?: string | Buffer'
      return:
        type:
          - string | Buffer
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.ecdhCurve'
    name: ecdhCurve
    fullName: ecdhCurve
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      A string describing a named curve or a colon separated list of curve
      NIDs or names, for example P-521:P-384:P-256, to use for ECDH key
      agreement. Set to auto to select the curve automatically. Use
      crypto.getCurves() to obtain a list of available curve names. On
      recent releases, openssl ecparam -list_curves will also display the
      name and description of each available elliptic curve. Default:
      tls.DEFAULT_ECDH_CURVE.
    optional: true
    syntax:
      content: 'ecdhCurve?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.enableTrace'
    name: enableTrace
    fullName: enableTrace
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      When enabled, TLS packet trace information is written to `stderr`. This
      can be

      used to debug TLS connection problems.
    optional: true
    syntax:
      content: 'enableTrace?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.honorCipherOrder'
    name: honorCipherOrder
    fullName: honorCipherOrder
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Attempt to use the server's cipher suite preferences instead of the
      client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be
      set in secureOptions
    optional: true
    syntax:
      content: 'honorCipherOrder?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.host'
    name: host
    fullName: host
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'host?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.key'
    name: key
    fullName: key
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Private keys in PEM format. PEM allows the option of private keys
      being encrypted. Encrypted keys will be decrypted with
      options.passphrase. Multiple keys using different algorithms can be
      provided either as an array of unencrypted key strings or buffers,
      or an array of objects in the form {pem: <string|buffer>[,
      passphrase: <string>]}. The object form can only occur in an array.
      object.passphrase is optional. Encrypted keys will be decrypted with
      object.passphrase if provided, or options.passphrase if it is not.
    optional: true
    syntax:
      content: 'key?: string | Buffer | Array<Buffer | KeyObject>'
      return:
        type:
          - >-
            string | Buffer | Array<Buffer |
            @azure/abort-controller.tls.KeyObject>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.lookup'
    name: lookup
    fullName: lookup
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'lookup?: net.LookupFunction'
      return:
        type:
          - net.LookupFunction
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.maxVersion'
    name: maxVersion
    fullName: maxVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optionally set the maximum TLS version to allow. One

      of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be
      specified along with the

      `secureProtocol` option, use one or the other.

      **Default:** `'TLSv1.3'`, unless changed using CLI options. Using

      `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3`
      sets the default to

      `'TLSv1.3'`. If multiple of the options are provided, the highest maximum
      is used.
    optional: true
    syntax:
      content: 'maxVersion?: SecureVersion'
      return:
        type:
          - '@azure/abort-controller.tls.SecureVersion'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.minDHSize'
    name: minDHSize
    fullName: minDHSize
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'minDHSize?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.minVersion'
    name: minVersion
    fullName: minVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Optionally set the minimum TLS version to allow. One

      of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be
      specified along with the

      `secureProtocol` option, use one or the other.  It is not recommended to
      use

      less than TLSv1.2, but it may be required for interoperability.

      **Default:** `'TLSv1.2'`, unless changed using CLI options. Using

      `--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the
      default to

      `'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to

      'TLSv1.3'. If multiple of the options are provided, the lowest minimum is
      used.
    optional: true
    syntax:
      content: 'minVersion?: SecureVersion'
      return:
        type:
          - '@azure/abort-controller.tls.SecureVersion'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.passphrase'
    name: passphrase
    fullName: passphrase
    children: []
    langs:
      - typeScript
    type: property
    summary: Shared passphrase used for a single private key and/or a PFX.
    optional: true
    syntax:
      content: 'passphrase?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.path'
    name: path
    fullName: path
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'path?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.pfx'
    name: pfx
    fullName: pfx
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      PFX or PKCS12 encoded private key and certificate chain. pfx is an
      alternative to providing key and cert individually. PFX is usually
      encrypted, if it is, passphrase will be used to decrypt it. Multiple
      PFX can be provided either as an array of unencrypted PFX buffers,
      or an array of objects in the form {buf: <string|buffer>[,
      passphrase: <string>]}. The object form can only occur in an array.
      object.passphrase is optional. Encrypted PFX will be decrypted with
      object.passphrase if provided, or options.passphrase if it is not.
    optional: true
    syntax:
      content: 'pfx?: string | Buffer | Array<string | Buffer | PxfObject>'
      return:
        type:
          - >-
            string | Buffer | Array<string | Buffer |
            @azure/abort-controller.tls.PxfObject>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.port'
    name: port
    fullName: port
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'port?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.privateKeyEngine'
    name: privateKeyEngine
    fullName: privateKeyEngine
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Name of an OpenSSL engine to get private key from. Should be used
      together with privateKeyIdentifier.
    optional: true
    syntax:
      content: 'privateKeyEngine?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.privateKeyIdentifier'
    name: privateKeyIdentifier
    fullName: privateKeyIdentifier
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Identifier of a private key managed by an OpenSSL engine. Should be
      used together with privateKeyEngine. Should not be set together with
      key, because both options define a private key in different ways.
    optional: true
    syntax:
      content: 'privateKeyIdentifier?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.pskCallback'
    name: pskCallback(string | null)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      When negotiating TLS-PSK (pre-shared keys), this function is called
      with optional identity `hint` provided by the server or `null`
      in case of TLS 1.3 where `hint` was removed.
      It will be necessary to provide a custom `tls.checkServerIdentity()`
      for the connection as the default one will try to check hostname/IP
      of the server against the certificate but that's not applicable for PSK
      because there won't be a certificate present.
      More information can be found in the RFC 4279.
    syntax:
      content: 'function pskCallback(hint: string | null)'
      parameters:
        - id: hint
          type:
            - string | null
          description: |-
            message sent from the server to help client
            decide which identity to use during negotiation.
            Always `null` if TLS 1.3 is used.
      return:
        type:
          - '@azure/abort-controller.tls.PSKCallbackNegotation | null'
        description: |-
          Return `null` to stop the negotiation process. `psk` must be
          compatible with the selected cipher's digest.
          `identity` must use UTF-8 encoding.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.rejectUnauthorized'
    name: rejectUnauthorized
    fullName: rejectUnauthorized
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If true the server will reject any connection which is not
      authorized with the list of supplied CAs. This option only has an
      effect if requestCert is true.
    optional: true
    syntax:
      content: 'rejectUnauthorized?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.requestCert'
    name: requestCert
    fullName: requestCert
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      If true the server will request a certificate from clients that
      connect and attempt to verify that certificate. Defaults to
      false.
    optional: true
    syntax:
      content: 'requestCert?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.secureContext'
    name: secureContext
    fullName: secureContext
    children: []
    langs:
      - typeScript
    type: property
    summary: An optional TLS context object from tls.createSecureContext()
    optional: true
    syntax:
      content: 'secureContext?: SecureContext'
      return:
        type:
          - '@azure/abort-controller.tls.SecureContext'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.secureOptions'
    name: secureOptions
    fullName: secureOptions
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Optionally affect the OpenSSL protocol behavior, which is not
      usually necessary. This should be used carefully if at all! Value is
      a numeric bitmask of the SSL_OP_* options from OpenSSL Options
    optional: true
    syntax:
      content: 'secureOptions?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.secureProtocol'
    name: secureProtocol
    fullName: secureProtocol
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Legacy mechanism to select the TLS protocol version to use, it does
      not support independent control of the minimum and maximum version,
      and does not support limiting the protocol to TLSv1.3. Use
      minVersion and maxVersion instead. The possible values are listed as
      SSL_METHODS, use the function names as strings. For example, use
      'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow
      any TLS protocol version up to TLSv1.3. It is not recommended to use
      TLS versions less than 1.2, but it may be required for
      interoperability. Default: none, see minVersion.
    optional: true
    syntax:
      content: 'secureProtocol?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.servername'
    name: servername
    fullName: servername
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'servername?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.session'
    name: session
    fullName: session
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'session?: Buffer'
      return:
        type:
          - '@azure/abort-controller.Buffer'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.sessionIdContext'
    name: sessionIdContext
    fullName: sessionIdContext
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Opaque identifier used by servers to ensure session state is not
      shared between applications. Unused by clients.
    optional: true
    syntax:
      content: 'sessionIdContext?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.sigalgs'
    name: sigalgs
    fullName: sigalgs
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      Colon-separated list of supported signature algorithms. The list
       can contain digest algorithms (SHA256, MD5 etc.), public key
       algorithms (RSA-PSS, ECDSA etc.), combination of both (e.g
       'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).
    optional: true
    syntax:
      content: 'sigalgs?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.SNICallback'
    name: SNICallback
    fullName: SNICallback
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      SNICallback(servername, cb) <Function> A function that will be
      called if the client supports SNI TLS extension. Two arguments
      will be passed when called: servername and cb. SNICallback should
      invoke cb(null, ctx), where ctx is a SecureContext instance.
      (tls.createSecureContext(...) can be used to get a proper
      SecureContext.) If SNICallback wasn't provided the default callback
      with high-level API will be used (see below).
    optional: true
    syntax:
      content: >-
        SNICallback?: undefined | (servername: string, cb: (err: Error | null,
        ctx: SecureContext) => void) => void
      return:
        type:
          - >-
            undefined | (servername: string, cb: (err: Error | null, ctx:
            SecureContext) => void) => void
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.socket'
    name: socket
    fullName: socket
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'socket?: net.Socket'
      return:
        type:
          - net.Socket
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.tls.ConnectionOptions.timeout'
    name: timeout
    fullName: timeout
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'timeout?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.net.Server'
    name: Server
    spec.typeScript:
      - name: Server
        fullName: Server
        uid: '@azure/abort-controller.net.Server'
  - uid: '@azure/abort-controller.tls.SecureContextOptions'
    name: SecureContextOptions
    spec.typeScript:
      - name: SecureContextOptions
        fullName: SecureContextOptions
        uid: '@azure/abort-controller.tls.SecureContextOptions'
  - uid: '@azure/abort-controller.net.AddressInfo | string | null'
    name: AddressInfo | string | null
    spec.typeScript:
      - name: AddressInfo
        fullName: AddressInfo
        uid: '@azure/abort-controller.net.AddressInfo'
      - name: ' | string | null'
        fullName: ' | string | null'
  - uid: '@azure/abort-controller.tls.TLSSocket'
    name: TLSSocket
    spec.typeScript:
      - name: TLSSocket
        fullName: TLSSocket
        uid: '@azure/abort-controller.tls.TLSSocket'
  - uid: '@azure/abort-controller.net.ListenOptions'
    name: ListenOptions
    spec.typeScript:
      - name: ListenOptions
        fullName: ListenOptions
        uid: '@azure/abort-controller.net.ListenOptions'
  - uid: '@azure/abort-controller.net.Socket'
    name: Socket
    spec.typeScript:
      - name: Socket
        fullName: Socket
        uid: '@azure/abort-controller.net.Socket'
  - uid: '@azure/abort-controller.tls.TLSSocketOptions'
    name: TLSSocketOptions
    spec.typeScript:
      - name: TLSSocketOptions
        fullName: TLSSocketOptions
        uid: '@azure/abort-controller.tls.TLSSocketOptions'
  - uid: '@azure/abort-controller.net.AddressInfo | string'
    name: AddressInfo | string
    spec.typeScript:
      - name: AddressInfo
        fullName: AddressInfo
        uid: '@azure/abort-controller.net.AddressInfo'
      - name: ' | string'
        fullName: ' | string'
  - uid: '@azure/abort-controller.net.SocketConnectOpts'
    name: SocketConnectOpts
    spec.typeScript:
      - name: SocketConnectOpts
        fullName: SocketConnectOpts
        uid: '@azure/abort-controller.net.SocketConnectOpts'
  - uid: '@azure/abort-controller.AbortError.Error'
    name: Error
    spec.typeScript:
      - name: Error
        fullName: Error
        uid: '@azure/abort-controller.AbortError.Error'
  - uid: '@azure/abort-controller.tls.PeerCertificate | object | null'
    name: PeerCertificate | object | null
    spec.typeScript:
      - name: PeerCertificate
        fullName: PeerCertificate
        uid: '@azure/abort-controller.tls.PeerCertificate'
      - name: ' | object | null'
        fullName: ' | object | null'
  - uid: '@azure/abort-controller.tls.CipherNameAndProtocol'
    name: CipherNameAndProtocol
    spec.typeScript:
      - name: CipherNameAndProtocol
        fullName: CipherNameAndProtocol
        uid: '@azure/abort-controller.tls.CipherNameAndProtocol'
  - uid: '@azure/abort-controller.tls.EphemeralKeyInfo | object | null'
    name: EphemeralKeyInfo | object | null
    spec.typeScript:
      - name: EphemeralKeyInfo
        fullName: EphemeralKeyInfo
        uid: '@azure/abort-controller.tls.EphemeralKeyInfo'
      - name: ' | object | null'
        fullName: ' | object | null'
  - uid: '@azure/abort-controller.tls.DetailedPeerCertificate'
    name: DetailedPeerCertificate
    spec.typeScript:
      - name: DetailedPeerCertificate
        fullName: DetailedPeerCertificate
        uid: '@azure/abort-controller.tls.DetailedPeerCertificate'
  - uid: '@azure/abort-controller.tls.PeerCertificate'
    name: PeerCertificate
    spec.typeScript:
      - name: PeerCertificate
        fullName: PeerCertificate
        uid: '@azure/abort-controller.tls.PeerCertificate'
  - uid: >-
      @azure/abort-controller.tls.PeerCertificate |
      @azure/abort-controller.tls.DetailedPeerCertificate
    name: DetailedPeerCertificate
    spec.typeScript:
      - name: PeerCertificate
        fullName: PeerCertificate
        uid: '@azure/abort-controller.tls.PeerCertificate'
      - name: ' | '
        fullName: ' | '
      - name: DetailedPeerCertificate
        fullName: DetailedPeerCertificate
        uid: '@azure/abort-controller.tls.DetailedPeerCertificate'
  - uid: '@azure/abort-controller.NodeJS.WritableStream'
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: '@azure/abort-controller.NodeJS.WritableStream'
  - uid: '@azure/abort-controller.BufferEncoding'
    name: BufferEncoding
    spec.typeScript:
      - name: BufferEncoding
        fullName: BufferEncoding
        uid: '@azure/abort-controller.BufferEncoding'
  - uid: '@azure/abort-controller.NodeJS.ReadableStream'
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: '@azure/abort-controller.NodeJS.ReadableStream'
  - uid: '@azure/abort-controller.stream.internal.ReadableOptions'
    name: ReadableOptions
    spec.typeScript:
      - name: ReadableOptions
        fullName: ReadableOptions
        uid: '@azure/abort-controller.stream.internal.ReadableOptions'
  - uid: '@azure/abort-controller.stream.internal.Readable'
    name: Readable
    spec.typeScript:
      - name: Readable
        fullName: Readable
        uid: '@azure/abort-controller.stream.internal.Readable'
  - uid: '@azure/abort-controller.tls.SecureContext'
    name: SecureContext
    spec.typeScript:
      - name: SecureContext
        fullName: SecureContext
        uid: '@azure/abort-controller.tls.SecureContext'
  - uid: undefined | @azure/abort-controller.tls.checkServerIdentity
    name: checkServerIdentity
    spec.typeScript:
      - name: 'undefined | '
        fullName: 'undefined | '
      - name: checkServerIdentity
        fullName: checkServerIdentity
        uid: '@azure/abort-controller.tls.checkServerIdentity'
  - uid: string | Buffer | Array<Buffer | @azure/abort-controller.tls.KeyObject>
    name: KeyObject>
    spec.typeScript:
      - name: 'string | Buffer | Array<Buffer | '
        fullName: 'string | Buffer | Array<Buffer | '
      - name: KeyObject
        fullName: KeyObject
        uid: '@azure/abort-controller.tls.KeyObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.tls.SecureVersion'
    name: SecureVersion
    spec.typeScript:
      - name: SecureVersion
        fullName: SecureVersion
        uid: '@azure/abort-controller.tls.SecureVersion'
  - uid: >-
      string | Buffer | Array<string | Buffer |
      @azure/abort-controller.tls.PxfObject>
    name: PxfObject>
    spec.typeScript:
      - name: 'string | Buffer | Array<string | Buffer | '
        fullName: 'string | Buffer | Array<string | Buffer | '
      - name: PxfObject
        fullName: PxfObject
        uid: '@azure/abort-controller.tls.PxfObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.Buffer'
    name: Buffer
    spec.typeScript:
      - name: Buffer
        fullName: Buffer
        uid: '@azure/abort-controller.Buffer'
  - uid: '@azure/abort-controller.tls.PSKCallbackNegotation | null'
    name: PSKCallbackNegotation | null
    spec.typeScript:
      - name: PSKCallbackNegotation
        fullName: PSKCallbackNegotation
        uid: '@azure/abort-controller.tls.PSKCallbackNegotation'
      - name: ' | null'
        fullName: ' | null'
  - uid: '@azure/abort-controller.tls.Certificate'
    name: Certificate
    spec.typeScript:
      - name: Certificate
        fullName: Certificate
        uid: '@azure/abort-controller.tls.Certificate'
  - uid: DataView | @azure/abort-controller.NodeJS.TypedArray
    name: TypedArray
    spec.typeScript:
      - name: 'DataView | '
        fullName: 'DataView | '
      - name: TypedArray
        fullName: TypedArray
        uid: '@azure/abort-controller.NodeJS.TypedArray'
  - uid: DataView | @azure/abort-controller.NodeJS.TypedArray | null
    name: TypedArray | null
    spec.typeScript:
      - name: 'DataView | '
        fullName: 'DataView | '
      - name: TypedArray
        fullName: TypedArray
        uid: '@azure/abort-controller.NodeJS.TypedArray'
      - name: ' | null'
        fullName: ' | null'
  - uid: '@azure/abort-controller.tls.ConnectionOptions'
    name: ConnectionOptions
    spec.typeScript:
      - name: ConnectionOptions
        fullName: ConnectionOptions
        uid: '@azure/abort-controller.tls.ConnectionOptions'
  - uid: '@azure/abort-controller.tls.SecurePair'
    name: SecurePair
    spec.typeScript:
      - name: SecurePair
        fullName: SecurePair
        uid: '@azure/abort-controller.tls.SecurePair'
  - uid: '@azure/abort-controller.tls.Server'
    name: Server
    spec.typeScript:
      - name: Server
        fullName: Server
        uid: '@azure/abort-controller.tls.Server'
  - uid: '@azure/abort-controller.tls.TlsOptions'
    name: TlsOptions
    spec.typeScript:
      - name: TlsOptions
        fullName: TlsOptions
        uid: '@azure/abort-controller.tls.TlsOptions'
