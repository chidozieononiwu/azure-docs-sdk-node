### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv'
    name: Ajv
    fullName: Ajv
    children:
      - '@azure/ms-rest-azure-env.ajv.Ajv.addFormat'
      - '@azure/ms-rest-azure-env.ajv.Ajv.addKeyword'
      - '@azure/ms-rest-azure-env.ajv.Ajv.addMetaSchema'
      - '@azure/ms-rest-azure-env.ajv.Ajv.addSchema'
      - '@azure/ms-rest-azure-env.ajv.Ajv.compile'
      - '@azure/ms-rest-azure-env.ajv.Ajv.compileAsync'
      - '@azure/ms-rest-azure-env.ajv.Ajv.errors'
      - '@azure/ms-rest-azure-env.ajv.Ajv.errorsText'
      - '@azure/ms-rest-azure-env.ajv.Ajv.getKeyword'
      - '@azure/ms-rest-azure-env.ajv.Ajv.getSchema'
      - '@azure/ms-rest-azure-env.ajv.Ajv.removeKeyword'
      - '@azure/ms-rest-azure-env.ajv.Ajv.removeSchema'
      - '@azure/ms-rest-azure-env.ajv.Ajv.validate'
      - '@azure/ms-rest-azure-env.ajv.Ajv.validateKeyword'
      - '@azure/ms-rest-azure-env.ajv.Ajv.validateSchema'
    langs:
      - typeScript
    type: interface
    summary: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.addFormat'
    name: 'addFormat(string, FormatValidator | FormatDefinition)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add custom format
    syntax:
      content: >-
        function addFormat(name: string, format: FormatValidator |
        FormatDefinition)
      parameters:
        - id: name
          type:
            - string
          description: format name
        - id: format
          type:
            - >-
              @azure/ms-rest-azure-env.ajv.FormatValidator |
              @azure/ms-rest-azure-env.ajv.FormatDefinition
          description: >-
            string is converted to RegExp; function should return boolean (true
            when valid)
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.Ajv'
        description: this for method chaining
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.addKeyword'
    name: 'addKeyword(string, KeywordDefinition)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Define custom keyword
    syntax:
      content: 'function addKeyword(keyword: string, definition: KeywordDefinition)'
      parameters:
        - id: keyword
          type:
            - string
          description: >-
            custom keyword, should be a valid identifier, should be different
            from all standard, custom and macro keywords.
        - id: definition
          type:
            - '@azure/ms-rest-azure-env.ajv.KeywordDefinition'
          description: >-
            keyword definition object with properties `type` (type(s) which the
            keyword applies to), `validate` or `compile`.
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.Ajv'
        description: this for method chaining
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.addMetaSchema'
    name: 'addMetaSchema(object, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Add schema that will be used to validate other schemas
      options in META_IGNORE_OPTIONS are alway set to false
    syntax:
      content: 'function addMetaSchema(schema: object, key?: undefined | string)'
      parameters:
        - id: schema
          type:
            - object
          description: schema object
        - id: key
          type:
            - undefined | string
          description: optional schema key
          optional: true
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.Ajv'
        description: this for method chaining
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.addSchema'
    name: 'addSchema(Array<object> | object, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Adds schema to the instance.
    syntax:
      content: >-
        function addSchema(schema: Array<object> | object, key?: undefined |
        string)
      parameters:
        - id: schema
          type:
            - Array<object> | object
          description: >-
            schema or array of schemas. If array is passed, `key` and other
            parameters will be ignored.
        - id: key
          type:
            - undefined | string
          description: >-
            Optional schema key. Can be passed to `validate` method instead of
            schema object or id/ref. One schema per instance can have empty `id`
            and `key`.
          optional: true
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.Ajv'
        description: this for method chaining
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.compile'
    name: compile(object | boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Create validating function for passed schema.
    syntax:
      content: 'function compile(schema: object | boolean)'
      parameters:
        - id: schema
          type:
            - object | boolean
          description: schema object
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.ValidateFunction'
        description: validating function
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.compileAsync'
    name: >-
      compileAsync(object | boolean, Boolean, undefined | (err: Error, validate:
      ValidateFunction) => any)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates validating function for passed schema with asynchronous loading of
      missing schemas.

      `loadSchema` option should be a function that accepts schema uri and
      node-style callback.
    syntax:
      content: >-
        function compileAsync(schema: object | boolean, meta?: Boolean,
        callback?: undefined | (err: Error, validate: ValidateFunction) => any)
      parameters:
        - id: schema
          type:
            - object | boolean
          description: schema object
        - id: meta
          type:
            - '@azure/ms-rest-azure-env.NodeJS.Global.Boolean'
          description: optional true to compile meta-schema; this parameter can be skipped
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error, validate: ValidateFunction) => any'
          description: >-
            optional node-style callback, it is always called with 2 parameters:
            error (or null) and validating function.
          optional: true
      return:
        type:
          - PromiseLike<@azure/ms-rest-azure-env.ajv.ValidateFunction>
        description: validating function
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.errors'
    name: errors
    fullName: errors
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'errors?: Array<ErrorObject> | null'
      return:
        type:
          - Array<@azure/ms-rest-azure-env.ajv.ErrorObject> | null
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.errorsText'
    name: 'errorsText(Array<ErrorObject> | null, ErrorsTextOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Convert array of error message objects to string
    syntax:
      content: >-
        function errorsText(errors?: Array<ErrorObject> | null, options?:
        ErrorsTextOptions)
      parameters:
        - id: errors
          type:
            - Array<@azure/ms-rest-azure-env.ajv.ErrorObject> | null
          description: >-
            optional array of validation errors, if not passed errors from the
            instance are used.
          optional: true
        - id: options
          type:
            - '@azure/ms-rest-azure-env.ajv.ErrorsTextOptions'
          description: optional options with properties `separator` and `dataVar`.
          optional: true
      return:
        type:
          - string
        description: human readable string with all errors descriptions
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.getKeyword'
    name: getKeyword(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get keyword definition
    syntax:
      content: 'function getKeyword(keyword: string)'
      parameters:
        - id: keyword
          type:
            - string
          description: pre-defined or custom keyword.
      return:
        type:
          - object | boolean
        description: >-
          custom keyword definition, `true` if it is a predefined keyword,
          `false` otherwise.
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.getSchema'
    name: getSchema(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get compiled schema from the instance by `key` or `ref`.
    syntax:
      content: 'function getSchema(keyRef: string)'
      parameters:
        - id: keyRef
          type:
            - string
          description: >-
            `key` that was passed to `addSchema` or full schema reference
            (`schema.id` or resolved id).
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.ValidateFunction'
        description: schema validating function (with property `schema`).
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.removeKeyword'
    name: removeKeyword(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove keyword
    syntax:
      content: 'function removeKeyword(keyword: string)'
      parameters:
        - id: keyword
          type:
            - string
          description: pre-defined or custom keyword.
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.Ajv'
        description: this for method chaining
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.removeSchema'
    name: removeSchema(object | string | RegExp | boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Remove cached schema(s).

      If no parameter is passed all schemas but meta-schemas are removed.

      If RegExp is passed all schemas with key/id matching pattern but
      meta-schemas are removed.

      Even if schema is referenced by other schemas it still can be removed as
      other schemas have local references.
    syntax:
      content: 'function removeSchema(schemaKeyRef?: object | string | RegExp | boolean)'
      parameters:
        - id: schemaKeyRef
          type:
            - object | string | RegExp | boolean
          description: 'key, ref, pattern to match key/ref or schema object'
          optional: true
      return:
        type:
          - '@azure/ms-rest-azure-env.ajv.Ajv'
        description: this for method chaining
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.validate'
    name: 'validate(object | string | boolean, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validate data using schema

      Schema will be compiled and cached (using serialized JSON as key,
      [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify)
      is used to serialize by default).
    syntax:
      content: 'function validate(schemaKeyRef: object | string | boolean, data: any)'
      parameters:
        - id: schemaKeyRef
          type:
            - object | string | boolean
          description: 'key, ref or schema object'
        - id: data
          type:
            - any
          description: to be validated
      return:
        type:
          - boolean | PromiseLike<any>
        description: >-
          validation result. Errors from the last validation will be available
          in `ajv.errors` (and also in compiled schema: `schema.errors`).
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.validateKeyword'
    name: 'validateKeyword(KeywordDefinition, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate keyword
    syntax:
      content: >-
        function validateKeyword(definition: KeywordDefinition, throwError:
        boolean)
      parameters:
        - id: definition
          type:
            - '@azure/ms-rest-azure-env.ajv.KeywordDefinition'
          description: keyword definition object
        - id: throwError
          type:
            - boolean
          description: true to throw exception if definition is invalid
      return:
        type:
          - boolean
        description: validation result
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv.validateSchema'
    name: validateSchema(object | boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Validate schema
    syntax:
      content: 'function validateSchema(schema: object | boolean)'
      parameters:
        - id: schema
          type:
            - object | boolean
          description: schema to validate
      return:
        type:
          - boolean
        description: true if schema is valid
    package: '@azure/ms-rest-azure-env'
references:
  - uid: Array<@azure/ms-rest-azure-env.ajv.ErrorObject> | null
    name: ErrorObject> | null
    spec.typeScript:
      - name: Array<
        fullName: Array<
      - name: ErrorObject
        fullName: ErrorObject
        uid: '@azure/ms-rest-azure-env.ajv.ErrorObject'
      - name: '> | null'
        fullName: '> | null'
  - uid: >-
      @azure/ms-rest-azure-env.ajv.FormatValidator |
      @azure/ms-rest-azure-env.ajv.FormatDefinition
    name: FormatDefinition
    spec.typeScript:
      - name: FormatValidator
        fullName: FormatValidator
        uid: '@azure/ms-rest-azure-env.ajv.FormatValidator'
      - name: ' | '
        fullName: ' | '
      - name: FormatDefinition
        fullName: FormatDefinition
        uid: '@azure/ms-rest-azure-env.ajv.FormatDefinition'
  - uid: '@azure/ms-rest-azure-env.ajv.Ajv'
    name: Ajv
    spec.typeScript:
      - name: Ajv
        fullName: Ajv
        uid: '@azure/ms-rest-azure-env.ajv.Ajv'
  - uid: '@azure/ms-rest-azure-env.ajv.KeywordDefinition'
    name: KeywordDefinition
    spec.typeScript:
      - name: KeywordDefinition
        fullName: KeywordDefinition
        uid: '@azure/ms-rest-azure-env.ajv.KeywordDefinition'
  - uid: '@azure/ms-rest-azure-env.ajv.ValidateFunction'
    name: ValidateFunction
    spec.typeScript:
      - name: ValidateFunction
        fullName: ValidateFunction
        uid: '@azure/ms-rest-azure-env.ajv.ValidateFunction'
  - uid: '@azure/ms-rest-azure-env.NodeJS.Global.Boolean'
    name: Boolean
    spec.typeScript:
      - name: Boolean
        fullName: Boolean
        uid: '@azure/ms-rest-azure-env.NodeJS.Global.Boolean'
  - uid: PromiseLike<@azure/ms-rest-azure-env.ajv.ValidateFunction>
    name: ValidateFunction>
    spec.typeScript:
      - name: PromiseLike<
        fullName: PromiseLike<
      - name: ValidateFunction
        fullName: ValidateFunction
        uid: '@azure/ms-rest-azure-env.ajv.ValidateFunction'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ms-rest-azure-env.ajv.ErrorsTextOptions'
    name: ErrorsTextOptions
    spec.typeScript:
      - name: ErrorsTextOptions
        fullName: ErrorsTextOptions
        uid: '@azure/ms-rest-azure-env.ajv.ErrorsTextOptions'
  - uid: '@azure/ms-rest-azure-env.ajv.Options'
    name: Options
    spec.typeScript:
      - name: Options
        fullName: Options
        uid: '@azure/ms-rest-azure-env.ajv.Options'
  - uid: '@azure/ms-rest-azure-env.ajv.ErrorParameters'
    name: ErrorParameters
    spec.typeScript:
      - name: ErrorParameters
        fullName: ErrorParameters
        uid: '@azure/ms-rest-azure-env.ajv.ErrorParameters'
  - uid: '@azure/ms-rest-azure-env.NodeJS.Global.Array<string>'
    name: Array<string>
    spec.typeScript:
      - name: Array
        fullName: Array
        uid: '@azure/ms-rest-azure-env.NodeJS.Global.Array'
      - name: <string>
        fullName: <string>
  - uid: >-
      @azure/ms-rest-azure-env.ajv.SchemaValidateFunction |
      @azure/ms-rest-azure-env.ajv.ValidateFunction
    name: ValidateFunction
    spec.typeScript:
      - name: SchemaValidateFunction
        fullName: SchemaValidateFunction
        uid: '@azure/ms-rest-azure-env.ajv.SchemaValidateFunction'
      - name: ' | '
        fullName: ' | '
      - name: ValidateFunction
        fullName: ValidateFunction
        uid: '@azure/ms-rest-azure-env.ajv.ValidateFunction'
  - uid: '@azure/ms-rest-azure-env.ajv.NumberFormatValidator'
    name: NumberFormatValidator
    spec.typeScript:
      - name: NumberFormatValidator
        fullName: NumberFormatValidator
        uid: '@azure/ms-rest-azure-env.ajv.NumberFormatValidator'
  - uid: '@azure/ms-rest-azure-env.ajv.CustomLogger | false'
    name: CustomLogger | false
    spec.typeScript:
      - name: CustomLogger
        fullName: CustomLogger
        uid: '@azure/ms-rest-azure-env.ajv.CustomLogger'
      - name: ' | false'
        fullName: ' | false'
  - uid: >-
      @azure/ms-rest-azure-env.NodeJS.Global.Array<@azure/ms-rest-azure-env.ajv.ErrorObject>
    name: ErrorObject>
    spec.typeScript:
      - name: Array
        fullName: Array
        uid: '@azure/ms-rest-azure-env.NodeJS.Global.Array'
      - name: <
        fullName: <
      - name: ErrorObject
        fullName: ErrorObject
        uid: '@azure/ms-rest-azure-env.ajv.ErrorObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ms-rest-azure-env.ajv.FormatValidator'
    name: FormatValidator
    spec.typeScript:
      - name: FormatValidator
        fullName: FormatValidator
        uid: '@azure/ms-rest-azure-env.ajv.FormatValidator'
  - uid: null | Array<@azure/ms-rest-azure-env.ajv.ErrorObject>
    name: ErrorObject>
    spec.typeScript:
      - name: null | Array<
        fullName: null | Array<
      - name: ErrorObject
        fullName: ErrorObject
        uid: '@azure/ms-rest-azure-env.ajv.ErrorObject'
      - name: '>'
        fullName: '>'
  - uid: '@azure/ms-rest-azure-env.NodeJS.Global.Array<any>'
    name: Array<any>
    spec.typeScript:
      - name: Array
        fullName: Array
        uid: '@azure/ms-rest-azure-env.NodeJS.Global.Array'
      - name: <any>
        fullName: <any>
  - uid: '@azure/ms-rest-azure-env.ajv.ValidateFunction | object'
    name: ValidateFunction | object
    spec.typeScript:
      - name: ValidateFunction
        fullName: ValidateFunction
        uid: '@azure/ms-rest-azure-env.ajv.ValidateFunction'
      - name: ' | object'
        fullName: ' | object'
