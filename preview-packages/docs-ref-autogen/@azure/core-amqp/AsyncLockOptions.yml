### YamlMime:UniversalReference
items:
  - uid: tslib.AsyncLockOptions
    name: AsyncLockOptions
    fullName: AsyncLockOptions
    children:
      - tslib.AsyncLockOptions.domainReentrant
      - tslib.AsyncLockOptions.maxPending
      - tslib.AsyncLockOptions.Promise
      - tslib.AsyncLockOptions.timeout
    langs:
      - typeScript
    type: interface
    summary: Describes the options that can be provided to create an async lock.
    package: tslib
  - uid: tslib.AsyncLockOptions.domainReentrant
    name: domainReentrant
    fullName: domainReentrant
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {boolean} [domainReentrant] Whether lock can reenter in the same domain.
      Default is: false.
    optional: true
    syntax:
      content: 'domainReentrant?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.AsyncLockOptions.maxPending
    name: maxPending
    fullName: maxPending
    children: []
    langs:
      - typeScript
    type: property
    summary: '{number} [maxPending] Maximum pending tasks. Default is: 1000.'
    optional: true
    syntax:
      content: 'maxPending?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
  - uid: tslib.AsyncLockOptions.Promise
    name: Promise
    fullName: Promise
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {any} [Promise] Your implementation of the promise. Default is: global
      promise.
    optional: true
    syntax:
      content: 'Promise?: any'
      return:
        type:
          - any
        description: ''
    package: tslib
  - uid: tslib.AsyncLockOptions.timeout
    name: timeout
    fullName: timeout
    children: []
    langs:
      - typeScript
    type: property
    summary: '{number} [timeout] The max timeout. Default is: 0 (never timeout).'
    optional: true
    syntax:
      content: 'timeout?: undefined | number'
      return:
        type:
          - undefined | number
        description: ''
    package: tslib
