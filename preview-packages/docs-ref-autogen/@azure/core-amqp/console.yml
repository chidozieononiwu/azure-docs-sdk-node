### YamlMime:UniversalReference
items:
  - uid: tslib.Console
    name: Console
    fullName: Console
    children:
      - tslib.Console.assert
      - tslib.Console.clear
      - tslib.Console.Console
      - tslib.Console.count
      - tslib.Console.countReset
      - tslib.Console.debug
      - tslib.Console.dir
      - tslib.Console.dirxml
      - tslib.Console.error
      - tslib.Console.group
      - tslib.Console.groupCollapsed
      - tslib.Console.groupEnd
      - tslib.Console.info
      - tslib.Console.log
      - tslib.Console.profile
      - tslib.Console.profileEnd
      - tslib.Console.table
      - tslib.Console.time
      - tslib.Console.timeEnd
      - tslib.Console.timeLog
      - tslib.Console.timeStamp
      - tslib.Console.trace
      - tslib.Console.warn
    langs:
      - typeScript
    type: interface
    summary: ''
    package: tslib
  - uid: tslib.Console.assert
    name: 'assert(any, undefined | string, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      A simple assertion test that verifies whether `value` is truthy.

      If it is not, an `AssertionError` is thrown.

      If provided, the error `message` is formatted using `util.format()` and
      used as the error message.
    syntax:
      content: >-
        function assert(value: any, message?: undefined | string,
        optionalParams: any[])
      parameters:
        - id: value
          type:
            - any
          description: ''
        - id: message
          type:
            - undefined | string
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.clear
    name: clear()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      When `stdout` is a TTY, calling `console.clear()` will attempt to clear
      the TTY.

      When `stdout` is not a TTY, this method does nothing.
    syntax:
      content: function clear()
      parameters: []
    package: tslib
  - uid: tslib.Console.Console
    name: Console
    fullName: Console
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'Console: ConsoleConstructor'
      return:
        type:
          - tslib.NodeJS.ConsoleConstructor
        description: ''
    package: tslib
  - uid: tslib.Console.count
    name: count(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Maintains an internal counter specific to `label` and outputs to `stdout`
      the number of times `console.count()` has been called with the given
      `label`.
    syntax:
      content: 'function count(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.countReset
    name: countReset(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Resets the internal counter specific to `label`.
    syntax:
      content: 'function countReset(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.debug
    name: 'debug(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'The `console.debug()` function is an alias for <xref:console.log()>.'
    syntax:
      content: 'function debug(message?: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.dir
    name: 'dir(any, NodeJS.InspectOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uses <xref:util.inspect()> on `obj` and prints the resulting string to
      `stdout`.

      This function bypasses any custom `inspect()` function defined on `obj`.
    syntax:
      content: 'function dir(obj: any, options?: NodeJS.InspectOptions)'
      parameters:
        - id: obj
          type:
            - any
          description: ''
        - id: options
          type:
            - tslib.NodeJS.InspectOptions
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.dirxml
    name: 'dirxml(any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This method calls <xref:console.log()> passing it the arguments received.
      Please note that this method does not produce any XML formatting
    syntax:
      content: 'function dirxml(data: any[])'
      parameters:
        - id: data
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.error
    name: 'error(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Prints to `stderr` with newline.
    syntax:
      content: 'function error(message?: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.group
    name: 'group(any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Increases indentation of subsequent lines by two spaces.

      If one or more `label`s are provided, those are printed first without the
      additional indentation.
    syntax:
      content: 'function group(label: any[])'
      parameters:
        - id: label
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.groupCollapsed
    name: 'groupCollapsed(any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The `console.groupCollapsed()` function is an alias for
      <xref:console.group()>.
    syntax:
      content: 'function groupCollapsed(label: any[])'
      parameters:
        - id: label
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.groupEnd
    name: groupEnd()
    children: []
    type: method
    langs:
      - typeScript
    summary: Decreases indentation of subsequent lines by two spaces.
    syntax:
      content: function groupEnd()
      parameters: []
    package: tslib
  - uid: tslib.Console.info
    name: 'info(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'The <xref:console.info()> function is an alias for <xref:console.log()>.'
    syntax:
      content: 'function info(message?: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.log
    name: 'log(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Prints to `stdout` with newline.
    syntax:
      content: 'function log(message?: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.profile
    name: profile(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This method does not display anything unless used in the inspector.
       Starts a JavaScript CPU profile with an optional label.
    syntax:
      content: 'function profile(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.profileEnd
    name: profileEnd(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This method does not display anything unless used in the inspector.
       Stops the current JavaScript CPU profiling session if one has been started and prints the report to the Profiles panel of the inspector.
    syntax:
      content: 'function profileEnd(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.table
    name: 'table(any, string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This method does not display anything unless used in the inspector.
       Prints to `stdout` the array `array` formatted as a table.
    syntax:
      content: 'function table(tabularData: any, properties?: string[])'
      parameters:
        - id: tabularData
          type:
            - any
          description: ''
        - id: properties
          type:
            - 'string[]'
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.time
    name: time(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts a timer that can be used to compute the duration of an operation.
      Timers are identified by a unique `label`.
    syntax:
      content: 'function time(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.timeEnd
    name: timeEnd(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Stops a timer that was previously started by calling <xref:console.time()>
      and prints the result to `stdout`.
    syntax:
      content: 'function timeEnd(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.timeLog
    name: 'timeLog(undefined | string, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      For a timer that was previously started by calling <xref:console.time()>,
      prints the elapsed time and other `data` arguments to `stdout`.
    syntax:
      content: 'function timeLog(label?: undefined | string, data: any[])'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
        - id: data
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.timeStamp
    name: timeStamp(undefined | string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This method does not display anything unless used in the inspector.
       Adds an event with the label `label` to the Timeline panel of the inspector.
    syntax:
      content: 'function timeStamp(label?: undefined | string)'
      parameters:
        - id: label
          type:
            - undefined | string
          description: ''
          optional: true
    package: tslib
  - uid: tslib.Console.trace
    name: 'trace(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Prints to `stderr` the string 'Trace :', followed by the
      <xref:util.format()> formatted message and stack trace to the current
      position in the code.
    syntax:
      content: 'function trace(message?: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
  - uid: tslib.Console.warn
    name: 'warn(any, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'The <xref:console.warn()> function is an alias for <xref:console.error()>.'
    syntax:
      content: 'function warn(message?: any, optionalParams: any[])'
      parameters:
        - id: message
          type:
            - any
          description: ''
          optional: true
        - id: optionalParams
          type:
            - 'any[]'
          description: ''
    package: tslib
references:
  - uid: tslib.NodeJS.ConsoleConstructor
    name: ConsoleConstructor
    spec.typeScript:
      - name: ConsoleConstructor
        fullName: ConsoleConstructor
        uid: tslib.NodeJS.ConsoleConstructor
  - uid: tslib.NodeJS.InspectOptions
    name: InspectOptions
    spec.typeScript:
      - name: InspectOptions
        fullName: InspectOptions
        uid: tslib.NodeJS.InspectOptions
