### YamlMime:UniversalReference
items:
  - uid: tslib.repl.ReplOptions
    name: ReplOptions
    fullName: ReplOptions
    children:
      - tslib.repl.ReplOptions.breakEvalOnSigint
      - tslib.repl.ReplOptions.completer
      - tslib.repl.ReplOptions.eval
      - tslib.repl.ReplOptions.ignoreUndefined
      - tslib.repl.ReplOptions.input
      - tslib.repl.ReplOptions.output
      - tslib.repl.ReplOptions.preview
      - tslib.repl.ReplOptions.prompt
      - tslib.repl.ReplOptions.replMode
      - tslib.repl.ReplOptions.terminal
      - tslib.repl.ReplOptions.useColors
      - tslib.repl.ReplOptions.useGlobal
      - tslib.repl.ReplOptions.writer
    langs:
      - typeScript
    type: interface
    summary: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.breakEvalOnSigint
    name: breakEvalOnSigint
    fullName: breakEvalOnSigint
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Stop evaluating the current piece of code when `SIGINT` is received, i.e.
      `Ctrl+C` is

      pressed. This cannot be used together with a custom `eval` function.

      Default: `false`.
    optional: true
    syntax:
      content: 'breakEvalOnSigint?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.completer
    name: completer
    fullName: completer
    children: []
    langs:
      - typeScript
    type: property
    summary: An optional function used for custom Tab auto completion.
    optional: true
    syntax:
      content: 'completer?: Completer | AsyncCompleter'
      return:
        type:
          - tslib.readline.Completer | tslib.readline.AsyncCompleter
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.eval
    name: eval
    fullName: eval
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The function to be used when evaluating each given line of input.

      Default: an async wrapper for the JavaScript `eval()` function. An `eval`
      function can

      error with `repl.Recoverable` to indicate the input was incomplete and
      prompt for

      additional lines.
    optional: true
    syntax:
      content: 'eval?: REPLEval'
      return:
        type:
          - tslib.repl.REPLEval
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.ignoreUndefined
    name: ignoreUndefined
    fullName: ignoreUndefined
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If `true`, specifies that the default writer will not output the return
      value of a

      command if it evaluates to `undefined`.

      Default: `false`.
    optional: true
    syntax:
      content: 'ignoreUndefined?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.input
    name: input
    fullName: input
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The `Readable` stream from which REPL input will be read.
      Default: `process.stdin`
    optional: true
    syntax:
      content: 'input?: NodeJS.ReadableStream'
      return:
        type:
          - tslib.NodeJS.ReadableStream
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.output
    name: output
    fullName: output
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The `Writable` stream to which REPL output will be written.
      Default: `process.stdout`
    optional: true
    syntax:
      content: 'output?: NodeJS.WritableStream'
      return:
        type:
          - tslib.NodeJS.WritableStream
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.preview
    name: preview
    fullName: preview
    children: []
    langs:
      - typeScript
    type: property
    summary: Defines if the repl prints output previews or not.
    optional: true
    syntax:
      content: 'preview?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.prompt
    name: prompt
    fullName: prompt
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      The input prompt to display.
      Default: `"> "`
    optional: true
    syntax:
      content: 'prompt?: undefined | string'
      return:
        type:
          - undefined | string
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.replMode
    name: replMode
    fullName: replMode
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A flag that specifies whether the default evaluator executes all
      JavaScript commands in

      strict mode or default (sloppy) mode.

      Accepted values are:

      - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.

      - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is
      equivalent to
        prefacing every repl statement with `'use strict'`.
    optional: true
    syntax:
      content: 'replMode?: unique symbol | unique symbol'
      return:
        type:
          - unique symbol | unique symbol
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.terminal
    name: terminal
    fullName: terminal
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If `true`, specifies that the output should be treated as a TTY terminal,
      and have

      ANSI/VT100 escape codes written to it.

      Default: checking the value of the `isTTY` property on the output stream
      upon

      instantiation.
    optional: true
    syntax:
      content: 'terminal?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.useColors
    name: useColors
    fullName: useColors
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If `true`, specifies that the default `writer` function should include
      ANSI color

      styling to REPL output. If a custom `writer` function is provided then
      this has no

      effect.

      Default: the REPL instance's `terminal` value.
    optional: true
    syntax:
      content: 'useColors?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.useGlobal
    name: useGlobal
    fullName: useGlobal
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      If `true`, specifies that the default evaluation function will use the
      JavaScript

      `global` as the context as opposed to creating a new separate context for
      the REPL

      instance. The node CLI REPL sets this value to `true`.

      Default: `false`.
    optional: true
    syntax:
      content: 'useGlobal?: undefined | false | true'
      return:
        type:
          - undefined | false | true
        description: ''
    package: tslib
  - uid: tslib.repl.ReplOptions.writer
    name: writer
    fullName: writer
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The function to invoke to format the output of each command before writing
      to `output`.

      Default: a wrapper for `util.inspect`.
    optional: true
    syntax:
      content: 'writer?: REPLWriter'
      return:
        type:
          - tslib.repl.REPLWriter
        description: ''
    package: tslib
references:
  - uid: tslib.readline.Interface
    name: Interface
    spec.typeScript:
      - name: Interface
        fullName: Interface
        uid: tslib.readline.Interface
  - uid: tslib.readline.Completer | tslib.readline.AsyncCompleter
    name: AsyncCompleter
    spec.typeScript:
      - name: Completer
        fullName: Completer
        uid: tslib.readline.Completer
      - name: ' | '
        fullName: ' | '
      - name: AsyncCompleter
        fullName: AsyncCompleter
        uid: tslib.readline.AsyncCompleter
  - uid: tslib.vm.Context
    name: Context
    spec.typeScript:
      - name: Context
        fullName: Context
        uid: tslib.vm.Context
  - uid: tslib.repl.REPLEval
    name: REPLEval
    spec.typeScript:
      - name: REPLEval
        fullName: REPLEval
        uid: tslib.repl.REPLEval
  - uid: tslib.NodeJS.ReadableStream
    name: ReadableStream
    spec.typeScript:
      - name: ReadableStream
        fullName: ReadableStream
        uid: tslib.NodeJS.ReadableStream
  - uid: tslib.NodeJS.WritableStream
    name: WritableStream
    spec.typeScript:
      - name: WritableStream
        fullName: WritableStream
        uid: tslib.NodeJS.WritableStream
  - uid: tslib.repl.REPLWriter
    name: REPLWriter
    spec.typeScript:
      - name: REPLWriter
        fullName: REPLWriter
        uid: tslib.repl.REPLWriter
  - uid: tslib.repl.REPLCommandAction | tslib.repl.REPLCommand
    name: REPLCommand
    spec.typeScript:
      - name: REPLCommandAction
        fullName: REPLCommandAction
        uid: tslib.repl.REPLCommandAction
      - name: ' | '
        fullName: ' | '
      - name: REPLCommand
        fullName: REPLCommand
        uid: tslib.repl.REPLCommand
  - uid: tslib.readline.CursorPos
    name: CursorPos
    spec.typeScript:
      - name: CursorPos
        fullName: CursorPos
        uid: tslib.readline.CursorPos
  - uid: tslib.readline.Key
    name: Key
    spec.typeScript:
      - name: Key
        fullName: Key
        uid: tslib.readline.Key
  - uid: tslib.repl.REPLCommandAction
    name: REPLCommandAction
    spec.typeScript:
      - name: REPLCommandAction
        fullName: REPLCommandAction
        uid: tslib.repl.REPLCommandAction
  - uid: string | tslib.repl.ReplOptions
    name: ReplOptions
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ReplOptions
        fullName: ReplOptions
        uid: tslib.repl.ReplOptions
  - uid: tslib.repl.REPLServer
    name: REPLServer
    spec.typeScript:
      - name: REPLServer
        fullName: REPLServer
        uid: tslib.repl.REPLServer
