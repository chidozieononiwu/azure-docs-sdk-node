### YamlMime:UniversalReference
items:
  - uid: tslib.CanonicalCode
    name: CanonicalCode
    fullName: CanonicalCode
    children:
      - tslib.CanonicalCode.OK
      - tslib.CanonicalCode.CANCELLED
      - tslib.CanonicalCode.UNKNOWN
      - tslib.CanonicalCode.INVALID_ARGUMENT
      - tslib.CanonicalCode.DEADLINE_EXCEEDED
      - tslib.CanonicalCode.NOT_FOUND
      - tslib.CanonicalCode.ALREADY_EXISTS
      - tslib.CanonicalCode.PERMISSION_DENIED
      - tslib.CanonicalCode.RESOURCE_EXHAUSTED
      - tslib.CanonicalCode.FAILED_PRECONDITION
      - tslib.CanonicalCode.ABORTED
      - tslib.CanonicalCode.OUT_OF_RANGE
      - tslib.CanonicalCode.UNIMPLEMENTED
      - tslib.CanonicalCode.INTERNAL
      - tslib.CanonicalCode.UNAVAILABLE
      - tslib.CanonicalCode.DATA_LOSS
      - tslib.CanonicalCode.UNAUTHENTICATED
    langs:
      - typeScript
    type: enum
    summary: An enumeration of canonical status codes.
    package: tslib
  - uid: tslib.CanonicalCode.OK
    name: OK
    children: []
    langs:
      - typeScript
    summary: Not an error; returned on success
    type: field
    numericValue: 0
    package: tslib
  - uid: tslib.CanonicalCode.CANCELLED
    name: CANCELLED
    children: []
    langs:
      - typeScript
    summary: The operation was cancelled (typically by the caller).
    type: field
    numericValue: 1
    package: tslib
  - uid: tslib.CanonicalCode.UNKNOWN
    name: UNKNOWN
    children: []
    langs:
      - typeScript
    summary: |-
      Unknown error.  An example of where this error may be returned is
      if a status value received from another address space belongs to
      an error-space that is not known in this address space.  Also
      errors raised by APIs that do not return enough error information
      may be converted to this error.
    type: field
    numericValue: 2
    package: tslib
  - uid: tslib.CanonicalCode.INVALID_ARGUMENT
    name: INVALID_ARGUMENT
    children: []
    langs:
      - typeScript
    summary: |-
      Client specified an invalid argument.  Note that this differs
      from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
      that are problematic regardless of the state of the system
      (e.g., a malformed file name).
    type: field
    numericValue: 3
    package: tslib
  - uid: tslib.CanonicalCode.DEADLINE_EXCEEDED
    name: DEADLINE_EXCEEDED
    children: []
    langs:
      - typeScript
    summary: |-
      Deadline expired before operation could complete.  For operations
      that change the state of the system, this error may be returned
      even if the operation has completed successfully.  For example, a
      successful response from a server could have been delayed long
      enough for the deadline to expire.
    type: field
    numericValue: 4
    package: tslib
  - uid: tslib.CanonicalCode.NOT_FOUND
    name: NOT_FOUND
    children: []
    langs:
      - typeScript
    summary: 'Some requested entity (e.g., file or directory) was not found.'
    type: field
    numericValue: 5
    package: tslib
  - uid: tslib.CanonicalCode.ALREADY_EXISTS
    name: ALREADY_EXISTS
    children: []
    langs:
      - typeScript
    summary: |-
      Some entity that we attempted to create (e.g., file or directory)
      already exists.
    type: field
    numericValue: 6
    package: tslib
  - uid: tslib.CanonicalCode.PERMISSION_DENIED
    name: PERMISSION_DENIED
    children: []
    langs:
      - typeScript
    summary: |-
      The caller does not have permission to execute the specified
      operation.  PERMISSION_DENIED must not be used for rejections
      caused by exhausting some resource (use RESOURCE_EXHAUSTED
      instead for those errors).  PERMISSION_DENIED must not be
      used if the caller can not be identified (use UNAUTHENTICATED
      instead for those errors).
    type: field
    numericValue: 7
    package: tslib
  - uid: tslib.CanonicalCode.RESOURCE_EXHAUSTED
    name: RESOURCE_EXHAUSTED
    children: []
    langs:
      - typeScript
    summary: |-
      Some resource has been exhausted, perhaps a per-user quota, or
      perhaps the entire file system is out of space.
    type: field
    numericValue: 8
    package: tslib
  - uid: tslib.CanonicalCode.FAILED_PRECONDITION
    name: FAILED_PRECONDITION
    children: []
    langs:
      - typeScript
    summary: |
      Operation was rejected because the system is not in a state
      required for the operation's execution.  For example, directory
      to be deleted may be non-empty, an rmdir operation is applied to
      a non-directory, etc.
      A litmus test that may help a service implementor in deciding
      between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:

       - Use UNAVAILABLE if the client can retry just the failing call.
       - Use ABORTED if the client should retry at a higher-level
         (e.g., restarting a read-modify-write sequence).
       - Use FAILED_PRECONDITION if the client should not retry until
         the system state has been explicitly fixed.  E.g., if an "rmdir"
         fails because the directory is non-empty, FAILED_PRECONDITION
         should be returned since the client should not retry unless
         they have first fixed up the directory by deleting files from it.
       - Use FAILED_PRECONDITION if the client performs conditional
         REST Get/Update/Delete on a resource and the resource on the
         server does not match the condition. E.g., conflicting
         read-modify-write on the same resource.
    type: field
    numericValue: 9
    package: tslib
  - uid: tslib.CanonicalCode.ABORTED
    name: ABORTED
    children: []
    langs:
      - typeScript
    summary: |
      The operation was aborted, typically due to a concurrency issue
      like sequencer check failures, transaction aborts, etc.
      See litmus test above for deciding between FAILED_PRECONDITION,
      ABORTED, and UNAVAILABLE.
    type: field
    numericValue: 10
    package: tslib
  - uid: tslib.CanonicalCode.OUT_OF_RANGE
    name: OUT_OF_RANGE
    children: []
    langs:
      - typeScript
    summary: |
      Operation was attempted past the valid range.  E.g., seeking or
      reading past end of file.
      Unlike INVALID_ARGUMENT, this error indicates a problem that may
      be fixed if the system state changes. For example, a 32-bit file
      system will generate INVALID_ARGUMENT if asked to read at an
      offset that is not in the range [0,2^32-1], but it will generate
      OUT_OF_RANGE if asked to read from an offset past the current
      file size.

      There is a fair bit of overlap between FAILED_PRECONDITION and
      OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
      error) when it applies so that callers who are iterating through
      a space can easily look for an OUT_OF_RANGE error to detect when
      they are done.
    type: field
    numericValue: 11
    package: tslib
  - uid: tslib.CanonicalCode.UNIMPLEMENTED
    name: UNIMPLEMENTED
    children: []
    langs:
      - typeScript
    summary: Operation is not implemented or not supported/enabled in this service.
    type: field
    numericValue: 12
    package: tslib
  - uid: tslib.CanonicalCode.INTERNAL
    name: INTERNAL
    children: []
    langs:
      - typeScript
    summary: |-
      Internal errors.  Means some invariants expected by underlying
      system has been broken.  If you see one of these errors,
      something is very broken.
    type: field
    numericValue: 13
    package: tslib
  - uid: tslib.CanonicalCode.UNAVAILABLE
    name: UNAVAILABLE
    children: []
    langs:
      - typeScript
    summary: |
      The service is currently unavailable.  This is a most likely a
      transient condition and may be corrected by retrying with
      a backoff.
      See litmus test above for deciding between FAILED_PRECONDITION,
      ABORTED, and UNAVAILABLE.
    type: field
    numericValue: 14
    package: tslib
  - uid: tslib.CanonicalCode.DATA_LOSS
    name: DATA_LOSS
    children: []
    langs:
      - typeScript
    summary: Unrecoverable data loss or corruption.
    type: field
    numericValue: 15
    package: tslib
  - uid: tslib.CanonicalCode.UNAUTHENTICATED
    name: UNAUTHENTICATED
    children: []
    langs:
      - typeScript
    summary: |-
      The request does not have valid authentication credentials for the
      operation.
    type: field
    numericValue: 16
    package: tslib
