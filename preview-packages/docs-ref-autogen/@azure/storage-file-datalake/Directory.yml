### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.Directory'
    name: Directory
    fullName: Directory
    children:
      - '@azure/abort-controller.Directory.create_2'
      - '@azure/abort-controller.Directory.create'
      - '@azure/abort-controller.Directory.create_1'
      - '@azure/abort-controller.Directory.deleteMethod_2'
      - '@azure/abort-controller.Directory.deleteMethod'
      - '@azure/abort-controller.Directory.deleteMethod_1'
      - '@azure/abort-controller.Directory.constructor'
      - '@azure/abort-controller.Directory.getAccessControl_2'
      - '@azure/abort-controller.Directory.getAccessControl'
      - '@azure/abort-controller.Directory.getAccessControl_1'
      - '@azure/abort-controller.Directory.rename_2'
      - '@azure/abort-controller.Directory.rename'
      - '@azure/abort-controller.Directory.rename_1'
      - '@azure/abort-controller.Directory.setAccessControl_2'
      - '@azure/abort-controller.Directory.setAccessControl'
      - '@azure/abort-controller.Directory.setAccessControl_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a Directory.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.create_2'
    name: 'create(DirectoryCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(options: DirectoryCreateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.DirectoryCreateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.create'
    name: create(Models.DirectoryCreateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a directory. By default, the destination is overwritten and if the
      destination already

      exists and has a lease the lease is broken. This operation supports
      conditional HTTP requests.

      For more information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

      To fail if the destination already exists, use a conditional request with
      If-None-Match: "*".
    syntax:
      content: 'function create(options?: Models.DirectoryCreateOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.DirectoryCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryCreateResponse>
        description: Promise<Models.DirectoryCreateResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.create_1'
    name: create(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.deleteMethod_2'
    name: >-
      deleteMethod(boolean, DirectoryDeleteMethodOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(recursiveDirectoryDelete: boolean, options:
        DirectoryDeleteMethodOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: recursiveDirectoryDelete
          type:
            - boolean
          description: |-
            If "true", all paths beneath the directory will be deleted. If
            "false" and the directory is non-empty, an error occurs.
        - id: options
          type:
            - '@azure/abort-controller.DirectoryDeleteMethodOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.deleteMethod'
    name: 'deleteMethod(boolean, Models.DirectoryDeleteMethodOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes the directory
    syntax:
      content: >-
        function deleteMethod(recursiveDirectoryDelete: boolean, options?:
        Models.DirectoryDeleteMethodOptionalParams)
      parameters:
        - id: recursiveDirectoryDelete
          type:
            - boolean
          description: |-
            If "true", all paths beneath the directory will be deleted. If
            "false" and the directory is non-empty, an error occurs.
        - id: options
          type:
            - Models.DirectoryDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
        description: Promise<Models.DirectoryDeleteResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.deleteMethod_1'
    name: 'deleteMethod(boolean, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(recursiveDirectoryDelete: boolean, callback:
        ServiceCallback<void>)
      parameters:
        - id: recursiveDirectoryDelete
          type:
            - boolean
          description: |-
            If "true", all paths beneath the directory will be deleted. If
            "false" and the directory is non-empty, an error occurs.
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.constructor'
    name: Directory(StorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Directory.
    syntax:
      content: 'new Directory(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/abort-controller.StorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.getAccessControl_2'
    name: >-
      getAccessControl(DirectoryGetAccessControlOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAccessControl(options:
        DirectoryGetAccessControlOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.DirectoryGetAccessControlOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.getAccessControl'
    name: getAccessControl(Models.DirectoryGetAccessControlOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Get the owner, group, permissions, or access control list for a directory.'
    syntax:
      content: >-
        function getAccessControl(options?:
        Models.DirectoryGetAccessControlOptionalParams)
      parameters:
        - id: options
          type:
            - Models.DirectoryGetAccessControlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryGetAccessControlResponse>
        description: Promise<Models.DirectoryGetAccessControlResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.getAccessControl_1'
    name: getAccessControl(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAccessControl(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.rename_2'
    name: 'rename(string, DirectoryRenameOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function rename(renameSource: string, options:
        DirectoryRenameOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: renameSource
          type:
            - string
          description: >-
            The file or directory to be renamed. The value must have the
            following

            format: "/{filesysystem}/{path}".  If "x-ms-properties" is
            specified, the properties will

            overwrite the existing properties; otherwise, the existing
            properties will be preserved.
        - id: options
          type:
            - '@azure/abort-controller.DirectoryRenameOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.rename'
    name: 'rename(string, Models.DirectoryRenameOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Rename a directory. By default, the destination is overwritten and if the
      destination already

      exists and has a lease the lease is broken. This operation supports
      conditional HTTP requests.

      For more information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

      To fail if the destination already exists, use a conditional request with
      If-None-Match: "*".
    syntax:
      content: >-
        function rename(renameSource: string, options?:
        Models.DirectoryRenameOptionalParams)
      parameters:
        - id: renameSource
          type:
            - string
          description: >-
            The file or directory to be renamed. The value must have the
            following

            format: "/{filesysystem}/{path}".  If "x-ms-properties" is
            specified, the properties will

            overwrite the existing properties; otherwise, the existing
            properties will be preserved.
        - id: options
          type:
            - Models.DirectoryRenameOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryRenameResponse>
        description: Promise<Models.DirectoryRenameResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.rename_1'
    name: 'rename(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rename(renameSource: string, callback: ServiceCallback<void>)'
      parameters:
        - id: renameSource
          type:
            - string
          description: >-
            The file or directory to be renamed. The value must have the
            following

            format: "/{filesysystem}/{path}".  If "x-ms-properties" is
            specified, the properties will

            overwrite the existing properties; otherwise, the existing
            properties will be preserved.
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.setAccessControl_2'
    name: >-
      setAccessControl(DirectorySetAccessControlOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setAccessControl(options:
        DirectorySetAccessControlOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.DirectorySetAccessControlOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.setAccessControl'
    name: setAccessControl(Models.DirectorySetAccessControlOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Set the owner, group, permissions, or access control list for a directory.'
    syntax:
      content: >-
        function setAccessControl(options?:
        Models.DirectorySetAccessControlOptionalParams)
      parameters:
        - id: options
          type:
            - Models.DirectorySetAccessControlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectorySetAccessControlResponse>
        description: Promise<Models.DirectorySetAccessControlResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.Directory.setAccessControl_1'
    name: setAccessControl(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setAccessControl(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.StorageClientContext'
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: '@azure/abort-controller.StorageClientContext'
  - uid: '@azure/abort-controller.ServiceCallback<void>'
    name: ServiceCallback<void>
    spec.typeScript:
      - name: ServiceCallback
        fullName: ServiceCallback
        uid: '@azure/abort-controller.ServiceCallback'
      - name: <void>
        fullName: <void>
  - uid: '@azure/abort-controller.DirectoryCreateOptionalParams'
    name: DirectoryCreateOptionalParams
    spec.typeScript:
      - name: DirectoryCreateOptionalParams
        fullName: DirectoryCreateOptionalParams
        uid: '@azure/abort-controller.DirectoryCreateOptionalParams'
  - uid: '@azure/abort-controller.DirectoryDeleteMethodOptionalParams'
    name: DirectoryDeleteMethodOptionalParams
    spec.typeScript:
      - name: DirectoryDeleteMethodOptionalParams
        fullName: DirectoryDeleteMethodOptionalParams
        uid: '@azure/abort-controller.DirectoryDeleteMethodOptionalParams'
  - uid: '@azure/abort-controller.DirectoryGetAccessControlOptionalParams'
    name: DirectoryGetAccessControlOptionalParams
    spec.typeScript:
      - name: DirectoryGetAccessControlOptionalParams
        fullName: DirectoryGetAccessControlOptionalParams
        uid: '@azure/abort-controller.DirectoryGetAccessControlOptionalParams'
  - uid: '@azure/abort-controller.DirectoryRenameOptionalParams'
    name: DirectoryRenameOptionalParams
    spec.typeScript:
      - name: DirectoryRenameOptionalParams
        fullName: DirectoryRenameOptionalParams
        uid: '@azure/abort-controller.DirectoryRenameOptionalParams'
  - uid: '@azure/abort-controller.DirectorySetAccessControlOptionalParams'
    name: DirectorySetAccessControlOptionalParams
    spec.typeScript:
      - name: DirectorySetAccessControlOptionalParams
        fullName: DirectorySetAccessControlOptionalParams
        uid: '@azure/abort-controller.DirectorySetAccessControlOptionalParams'
