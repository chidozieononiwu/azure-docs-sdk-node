### YamlMime:UniversalReference
items:
  - uid: tslib.ConnectionContextBase
    name: ConnectionContextBase
    langs:
      - typeScript
    fullName: ConnectionContextBase
    children:
      - tslib.ConnectionContextBase.cbsSession
      - tslib.ConnectionContextBase.config
      - tslib.ConnectionContextBase.connection
      - tslib.ConnectionContextBase.connectionId
      - tslib.ConnectionContextBase.connectionLock
      - tslib.ConnectionContextBase.create
      - tslib.ConnectionContextBase.dataTransformer
      - tslib.ConnectionContextBase.negotiateClaimLock
      - tslib.ConnectionContextBase.tokenCredential
      - tslib.ConnectionContextBase.wasConnectionCloseCalled
    type: module
    summary: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.cbsSession
    name: cbsSession
    fullName: cbsSession
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {CbsClient} cbsSession A reference to the cbs session ($cbs endpoint) on
      the

      underlying AMQP connection for the EventHub Client.
    syntax:
      content: 'cbsSession: CbsClient'
      return:
        type:
          - tslib.CbsClient
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.config
    name: config
    fullName: config
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {ConnectionConfig} config The EventHub connection config that is created
      after

      parsing the connection string.
    syntax:
      content: 'config: ConnectionConfig'
      return:
        type:
          - tslib.ConnectionConfig
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.connection
    name: connection
    fullName: connection
    children: []
    langs:
      - typeScript
    type: property
    summary: '{Connection} connection The underlying AMQP connection.'
    syntax:
      content: 'connection: Connection'
      return:
        type:
          - Connection
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.connectionId
    name: connectionId
    fullName: connectionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      {string} connectionId The amqp connection id that uniquely identifies the
      connection within a process.
    syntax:
      content: 'connectionId: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.connectionLock
    name: connectionLock
    fullName: connectionLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} connectionLock The unqiue lock name per connection that is used
      to

      acquire the lock for establishing an aqmp connection per client if one
      does not exist.
    syntax:
      content: 'connectionLock: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.create
    name: create(CreateConnectionContextBaseParameters)
    children: []
    type: function
    langs:
      - typeScript
    summary: Creates the base connection context.
    syntax:
      content: 'function create(parameters: CreateConnectionContextBaseParameters)'
      parameters:
        - id: parameters
          type:
            - tslib.CreateConnectionContextBaseParameters
          description: |
            Parameters to be provided to create
            the base connection context.
      return:
        type:
          - tslib.ConnectionContextBase
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.dataTransformer
    name: dataTransformer
    fullName: dataTransformer
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {DataTransformer} dataTransformer A DataTransformer object that has
      methods named

      - encode Responsible for encoding the AMQP message before sending it on
      the wire.

      - decode Responsible for decoding the received AMQP message before passing
      it to the customer.
    syntax:
      content: 'dataTransformer: DataTransformer'
      return:
        type:
          - tslib.DataTransformer
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.negotiateClaimLock
    name: negotiateClaimLock
    fullName: negotiateClaimLock
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {string} negotiateClaimLock The unqiue lock name per connection that is
      used to

      acquire the lock for negotiating cbs claim by an entity on that
      connection.
    syntax:
      content: 'negotiateClaimLock: string'
      return:
        type:
          - string
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.tokenCredential
    name: tokenCredential
    fullName: tokenCredential
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {SharedKeyCredential | TokenCredential} tokenCredential The credential to
      be used for getting tokens

      for authentication for the EventHub client.
    syntax:
      content: 'tokenCredential: SharedKeyCredential | TokenCredential'
      return:
        type:
          - tslib.SharedKeyCredential | tslib.TokenCredential
        description: ''
    package: tslib
  - uid: tslib.ConnectionContextBase.wasConnectionCloseCalled
    name: wasConnectionCloseCalled
    fullName: wasConnectionCloseCalled
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      {boolean} wasConnectionCloseCalled Indicates whether the close() method
      was

      called on the connection object.
    syntax:
      content: 'wasConnectionCloseCalled: boolean'
      return:
        type:
          - boolean
        description: ''
    package: tslib
references:
  - uid: tslib.CbsClient
    name: CbsClient
    spec.typeScript:
      - name: CbsClient
        fullName: CbsClient
        uid: tslib.CbsClient
  - uid: tslib.ConnectionConfig
    name: ConnectionConfig
    spec.typeScript:
      - name: ConnectionConfig
        fullName: ConnectionConfig
        uid: tslib.ConnectionConfig
  - uid: tslib.DataTransformer
    name: DataTransformer
    spec.typeScript:
      - name: DataTransformer
        fullName: DataTransformer
        uid: tslib.DataTransformer
  - uid: tslib.SharedKeyCredential | tslib.TokenCredential
    name: TokenCredential
    spec.typeScript:
      - name: SharedKeyCredential
        fullName: SharedKeyCredential
        uid: tslib.SharedKeyCredential
      - name: ' | '
        fullName: ' | '
      - name: TokenCredential
        fullName: TokenCredential
        uid: tslib.TokenCredential
  - uid: tslib.CreateConnectionContextBaseParameters
    name: CreateConnectionContextBaseParameters
    spec.typeScript:
      - name: CreateConnectionContextBaseParameters
        fullName: CreateConnectionContextBaseParameters
        uid: tslib.CreateConnectionContextBaseParameters
  - uid: tslib.ConnectionContextBase
    name: ConnectionContextBase
    spec.typeScript:
      - name: ConnectionContextBase
        fullName: ConnectionContextBase
        uid: tslib.ConnectionContextBase
  - uid: tslib.ConnectionContextBase.cbsSession
    name: cbsSession
  - uid: tslib.ConnectionContextBase.config
    name: config
  - uid: tslib.ConnectionContextBase.connection
    name: connection
  - uid: tslib.ConnectionContextBase.connectionId
    name: connectionId
  - uid: tslib.ConnectionContextBase.connectionLock
    name: connectionLock
  - uid: tslib.ConnectionContextBase.create
    name: create
  - uid: tslib.ConnectionContextBase.dataTransformer
    name: dataTransformer
  - uid: tslib.ConnectionContextBase.negotiateClaimLock
    name: negotiateClaimLock
  - uid: tslib.ConnectionContextBase.tokenCredential
    name: tokenCredential
  - uid: tslib.ConnectionContextBase.wasConnectionCloseCalled
    name: wasConnectionCloseCalled
