### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-env.path'
    name: path
    langs:
      - typeScript
    fullName: path
    children:
      - '@azure/ms-rest-azure-env.path.basename'
      - '@azure/ms-rest-azure-env.path.dirname'
      - '@azure/ms-rest-azure-env.path.extname'
      - '@azure/ms-rest-azure-env.path.format'
      - '@azure/ms-rest-azure-env.path.FormatInputPathObject'
      - '@azure/ms-rest-azure-env.path.isAbsolute'
      - '@azure/ms-rest-azure-env.path.join'
      - '@azure/ms-rest-azure-env.path.normalize'
      - '@azure/ms-rest-azure-env.path.parse'
      - '@azure/ms-rest-azure-env.path.ParsedPath'
      - '@azure/ms-rest-azure-env.path.relative'
      - '@azure/ms-rest-azure-env.path.resolve'
    type: module
    summary: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.basename'
    name: 'basename(string, undefined | string)'
    children: []
    type: function
    langs:
      - typeScript
    summary: |-
      Return the last portion of a path. Similar to the Unix basename command.
      Often used to extract the file name from a fully qualified path.
    syntax:
      content: 'function basename(p: string, ext?: undefined | string)'
      parameters:
        - id: p
          type:
            - string
          description: the path to evaluate.
        - id: ext
          type:
            - undefined | string
          description: |
            optionally, an extension to remove from the result.
          optional: true
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.dirname'
    name: dirname(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: Return the directory name of a path. Similar to the Unix dirname command.
    syntax:
      content: 'function dirname(p: string)'
      parameters:
        - id: p
          type:
            - string
          description: |
            the path to evaluate.
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.extname'
    name: extname(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Return the extension of the path, from the last '.' to end of string in
      the last portion of the path.

      If there is no '.' in the last portion of the path or the first character
      of it is '.', then it returns an empty string
    syntax:
      content: 'function extname(p: string)'
      parameters:
        - id: p
          type:
            - string
          description: |
            the path to evaluate.
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.format'
    name: format(FormatInputPathObject)
    children: []
    type: function
    langs:
      - typeScript
    summary: Returns a path string from an object - the opposite of parse().
    syntax:
      content: 'function format(pathObject: FormatInputPathObject)'
      parameters:
        - id: pathObject
          type:
            - '@azure/ms-rest-azure-env.path.FormatInputPathObject'
          description: ''
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.isAbsolute'
    name: isAbsolute(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Determines whether {path} is an absolute path. An absolute path will
      always resolve to the same location, regardless of the working directory.
    syntax:
      content: 'function isAbsolute(path: string)'
      parameters:
        - id: path
          type:
            - string
          description: |
            path to test.
      return:
        type:
          - boolean
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.join'
    name: 'join(string[])'
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Join all arguments together and normalize the resulting path.

      Arguments must be strings. In v0.8, non-string arguments were silently
      ignored. In v0.10 and up, an exception is thrown.
    syntax:
      content: 'function join(paths: string[])'
      parameters:
        - id: paths
          type:
            - 'string[]'
          description: |
            paths to join.
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.normalize'
    name: normalize(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Normalize a string path, reducing '..' and '.' parts.

      When multiple slashes are found, they're replaced by a single one; when
      the path contains a trailing slash, it is preserved. On Windows
      backslashes are used.
    syntax:
      content: 'function normalize(p: string)'
      parameters:
        - id: p
          type:
            - string
          description: |
            string path to normalize.
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.parse'
    name: parse(string)
    children: []
    type: function
    langs:
      - typeScript
    summary: Returns an object from a path string - the opposite of format().
    syntax:
      content: 'function parse(pathString: string)'
      parameters:
        - id: pathString
          type:
            - string
          description: |
            path to evaluate.
      return:
        type:
          - '@azure/ms-rest-azure-env.path.ParsedPath'
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.relative'
    name: 'relative(string, string)'
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Solve the relative path from {from} to {to}.

      At times we have two absolute paths, and we need to derive the relative
      path from one to the other. This is actually the reverse transform of
      path.resolve.
    syntax:
      content: 'function relative(from: string, to: string)'
      parameters:
        - id: from
          type:
            - string
          description: ''
        - id: to
          type:
            - string
          description: ''
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
  - uid: '@azure/ms-rest-azure-env.path.resolve'
    name: 'resolve(string[])'
    children: []
    type: function
    langs:
      - typeScript
    summary: >
      The right-most parameter is considered {to}.  Other parameters are
      considered an array of {from}.

      Starting from leftmost {from} parameter, resolves {to} to an absolute
      path.


      If {to} isn't already absolute, {from} arguments are prepended in right to
      left order, until an absolute path is found. If after using all {from}
      paths still no absolute path is found, the current working directory is
      used as well. The resulting path is normalized, and trailing slashes are
      removed unless the path gets resolved to the root directory.
    syntax:
      content: 'function resolve(pathSegments: string[])'
      parameters:
        - id: pathSegments
          type:
            - 'string[]'
          description: |
            string paths to join.  Non-string arguments are ignored.
      return:
        type:
          - string
        description: ''
    package: '@azure/ms-rest-azure-env'
references:
  - uid: '@azure/ms-rest-azure-env.path.FormatInputPathObject'
    name: FormatInputPathObject
    spec.typeScript:
      - name: FormatInputPathObject
        fullName: FormatInputPathObject
        uid: '@azure/ms-rest-azure-env.path.FormatInputPathObject'
  - uid: '@azure/ms-rest-azure-env.path.ParsedPath'
    name: ParsedPath
    spec.typeScript:
      - name: ParsedPath
        fullName: ParsedPath
        uid: '@azure/ms-rest-azure-env.path.ParsedPath'
  - uid: '@azure/ms-rest-azure-env.path.basename'
    name: basename
  - uid: '@azure/ms-rest-azure-env.path.dirname'
    name: dirname
  - uid: '@azure/ms-rest-azure-env.path.extname'
    name: extname
  - uid: '@azure/ms-rest-azure-env.path.format'
    name: format
  - uid: '@azure/ms-rest-azure-env.path.isAbsolute'
    name: isAbsolute
  - uid: '@azure/ms-rest-azure-env.path.join'
    name: join
  - uid: '@azure/ms-rest-azure-env.path.normalize'
    name: normalize
  - uid: '@azure/ms-rest-azure-env.path.parse'
    name: parse
  - uid: '@azure/ms-rest-azure-env.path.relative'
    name: relative
  - uid: '@azure/ms-rest-azure-env.path.resolve'
    name: resolve
