### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.PathOperations'
    name: PathOperations
    fullName: PathOperations
    children:
      - '@azure/abort-controller.PathOperations.appendData'
      - '@azure/abort-controller.PathOperations.appendData_2'
      - '@azure/abort-controller.PathOperations.appendData_1'
      - '@azure/abort-controller.PathOperations.create'
      - '@azure/abort-controller.PathOperations.create_2'
      - '@azure/abort-controller.PathOperations.create_1'
      - '@azure/abort-controller.PathOperations.deleteMethod'
      - '@azure/abort-controller.PathOperations.deleteMethod_2'
      - '@azure/abort-controller.PathOperations.deleteMethod_1'
      - '@azure/abort-controller.PathOperations.flushData'
      - '@azure/abort-controller.PathOperations.flushData_2'
      - '@azure/abort-controller.PathOperations.flushData_1'
      - '@azure/abort-controller.PathOperations.getProperties'
      - '@azure/abort-controller.PathOperations.getProperties_2'
      - '@azure/abort-controller.PathOperations.getProperties_1'
      - '@azure/abort-controller.PathOperations.lease'
      - '@azure/abort-controller.PathOperations.lease_2'
      - '@azure/abort-controller.PathOperations.lease_1'
      - '@azure/abort-controller.PathOperations.constructor'
      - '@azure/abort-controller.PathOperations.read'
      - '@azure/abort-controller.PathOperations.read_2'
      - '@azure/abort-controller.PathOperations.read_1'
      - '@azure/abort-controller.PathOperations.setAccessControl'
      - '@azure/abort-controller.PathOperations.setAccessControl_2'
      - '@azure/abort-controller.PathOperations.setAccessControl_1'
      - '@azure/abort-controller.PathOperations.update'
      - '@azure/abort-controller.PathOperations.update_2'
      - '@azure/abort-controller.PathOperations.update_1'
    langs:
      - typeScript
    type: class
    summary: Class representing a PathOperations.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.appendData'
    name: 'appendData(coreHttp.HttpRequestBody, Models.PathAppendDataOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Append data to the file.
    syntax:
      content: >-
        function appendData(body: coreHttp.HttpRequestBody, options?:
        Models.PathAppendDataOptionalParams)
      parameters:
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: options
          type:
            - Models.PathAppendDataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathAppendDataResponse>
        description: Promise<Models.PathAppendDataResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.appendData_2'
    name: >-
      appendData(coreHttp.HttpRequestBody, PathAppendDataOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function appendData(body: coreHttp.HttpRequestBody, options:
        PathAppendDataOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: options
          type:
            - '@azure/abort-controller.PathAppendDataOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.appendData_1'
    name: 'appendData(coreHttp.HttpRequestBody, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function appendData(body: coreHttp.HttpRequestBody, callback:
        ServiceCallback<void>)
      parameters:
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.create'
    name: create(Models.PathCreateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create or rename a file or directory.    By default, the destination is
      overwritten and if the

      destination already exists and has a lease the lease is broken.  This
      operation supports

      conditional HTTP requests.  For more information, see [Specifying
      Conditional Headers for Blob

      Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

      To fail if the destination already exists, use a conditional request with
      If-None-Match: "*".
    syntax:
      content: 'function create(options?: Models.PathCreateOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.PathCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathCreateResponse>
        description: Promise<Models.PathCreateResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.create_2'
    name: 'create(PathCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function create(options: PathCreateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.PathCreateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.create_1'
    name: create(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.deleteMethod'
    name: deleteMethod(Models.PathDeleteMethodOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Delete the file or directory. This operation supports conditional HTTP
      requests.  For more

      information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: 'function deleteMethod(options?: Models.PathDeleteMethodOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.PathDeleteMethodOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathDeleteResponse>
        description: Promise<Models.PathDeleteResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.deleteMethod_2'
    name: 'deleteMethod(PathDeleteMethodOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function deleteMethod(options: PathDeleteMethodOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.PathDeleteMethodOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.deleteMethod_1'
    name: deleteMethod(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.flushData'
    name: flushData(Models.PathFlushDataOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Set the owner, group, permissions, or access control list for a path.'
    syntax:
      content: 'function flushData(options?: Models.PathFlushDataOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.PathFlushDataOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathFlushDataResponse>
        description: Promise<Models.PathFlushDataResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.flushData_2'
    name: 'flushData(PathFlushDataOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function flushData(options: PathFlushDataOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.PathFlushDataOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.flushData_1'
    name: flushData(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function flushData(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.getProperties'
    name: getProperties(Models.PathGetPropertiesOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get Properties returns all system and user defined properties for a path.
      Get Status returns all

      system defined properties for a path. Get Access Control List returns the
      access control list

      for a path. This operation supports conditional HTTP requests.  For more
      information, see

      [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: 'function getProperties(options?: Models.PathGetPropertiesOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.PathGetPropertiesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathGetPropertiesResponse>
        description: Promise<Models.PathGetPropertiesResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.getProperties_2'
    name: 'getProperties(PathGetPropertiesOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getProperties(options: PathGetPropertiesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.PathGetPropertiesOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.getProperties_1'
    name: getProperties(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProperties(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.lease'
    name: 'lease(PathLeaseAction, Models.PathLeaseOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create and manage a lease to restrict write and delete access to the path.
      This operation

      supports conditional HTTP requests.  For more information, see [Specifying
      Conditional Headers

      for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function lease(xMsLeaseAction: PathLeaseAction, options?:
        Models.PathLeaseOptionalParams)
      parameters:
        - id: xMsLeaseAction
          type:
            - '@azure/abort-controller.PathLeaseAction'
          description: >-
            There are five lease actions: "acquire", "break", "change", "renew",
            and

            "release". Use "acquire" and specify the "x-ms-proposed-lease-id"
            and "x-ms-lease-duration" to

            acquire a new lease. Use "break" to break an existing lease. When a
            lease is broken, the lease

            break period is allowed to elapse, during which time no lease
            operation except break and release

            can be performed on the file. When a lease is successfully broken,
            the response indicates the

            interval in seconds until a new lease can be acquired. Use "change"
            and specify the current

            lease ID in "x-ms-lease-id" and the new lease ID in
            "x-ms-proposed-lease-id" to change the lease

            ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
            to renew an existing lease.

            Use "release" and specify the "x-ms-lease-id" to release a lease.
            Possible values include:

            'acquire', 'break', 'change', 'renew', 'release'
        - id: options
          type:
            - Models.PathLeaseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathLeaseResponse>
        description: Promise<Models.PathLeaseResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.lease_2'
    name: 'lease(PathLeaseAction, PathLeaseOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function lease(xMsLeaseAction: PathLeaseAction, options:
        PathLeaseOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: xMsLeaseAction
          type:
            - '@azure/abort-controller.PathLeaseAction'
          description: >-
            There are five lease actions: "acquire", "break", "change", "renew",
            and

            "release". Use "acquire" and specify the "x-ms-proposed-lease-id"
            and "x-ms-lease-duration" to

            acquire a new lease. Use "break" to break an existing lease. When a
            lease is broken, the lease

            break period is allowed to elapse, during which time no lease
            operation except break and release

            can be performed on the file. When a lease is successfully broken,
            the response indicates the

            interval in seconds until a new lease can be acquired. Use "change"
            and specify the current

            lease ID in "x-ms-lease-id" and the new lease ID in
            "x-ms-proposed-lease-id" to change the lease

            ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
            to renew an existing lease.

            Use "release" and specify the "x-ms-lease-id" to release a lease.
            Possible values include:

            'acquire', 'break', 'change', 'renew', 'release'
        - id: options
          type:
            - '@azure/abort-controller.PathLeaseOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.lease_1'
    name: 'lease(PathLeaseAction, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function lease(xMsLeaseAction: PathLeaseAction, callback:
        ServiceCallback<void>)
      parameters:
        - id: xMsLeaseAction
          type:
            - '@azure/abort-controller.PathLeaseAction'
          description: >-
            There are five lease actions: "acquire", "break", "change", "renew",
            and

            "release". Use "acquire" and specify the "x-ms-proposed-lease-id"
            and "x-ms-lease-duration" to

            acquire a new lease. Use "break" to break an existing lease. When a
            lease is broken, the lease

            break period is allowed to elapse, during which time no lease
            operation except break and release

            can be performed on the file. When a lease is successfully broken,
            the response indicates the

            interval in seconds until a new lease can be acquired. Use "change"
            and specify the current

            lease ID in "x-ms-lease-id" and the new lease ID in
            "x-ms-proposed-lease-id" to change the lease

            ID of an active lease. Use "renew" and specify the "x-ms-lease-id"
            to renew an existing lease.

            Use "release" and specify the "x-ms-lease-id" to release a lease.
            Possible values include:

            'acquire', 'break', 'change', 'renew', 'release'
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.constructor'
    name: PathOperations(StorageClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a PathOperations.
    syntax:
      content: 'new PathOperations(client: StorageClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/abort-controller.StorageClientContext'
          description: |
            Reference to the service client.
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.read'
    name: read(Models.PathReadOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Read the contents of a file.  For read operations, range requests are
      supported. This operation

      supports conditional HTTP requests.  For more information, see [Specifying
      Conditional Headers

      for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: 'function read(options?: Models.PathReadOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.PathReadOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathReadResponse>
        description: Promise<Models.PathReadResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.read_2'
    name: 'read(PathReadOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function read(options: PathReadOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.PathReadOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.read_1'
    name: read(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function read(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.setAccessControl'
    name: setAccessControl(Models.PathSetAccessControlOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Set the owner, group, permissions, or access control list for a path.'
    syntax:
      content: >-
        function setAccessControl(options?:
        Models.PathSetAccessControlOptionalParams)
      parameters:
        - id: options
          type:
            - Models.PathSetAccessControlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathSetAccessControlResponse>
        description: Promise<Models.PathSetAccessControlResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.setAccessControl_2'
    name: >-
      setAccessControl(PathSetAccessControlOptionalParams,
      ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function setAccessControl(options: PathSetAccessControlOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type:
            - '@azure/abort-controller.PathSetAccessControlOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.setAccessControl_1'
    name: setAccessControl(ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setAccessControl(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.update'
    name: >-
      update(PathUpdateAction, coreHttp.HttpRequestBody,
      Models.PathUpdateOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Uploads data to be appended to a file, flushes (writes) previously
      uploaded data to a file, sets

      properties for a file or directory, or sets access control for a file or
      directory. Data can

      only be appended to a file. This operation supports conditional HTTP
      requests. For more

      information, see [Specifying Conditional Headers for Blob Service

      Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).
    syntax:
      content: >-
        function update(action: PathUpdateAction, body:
        coreHttp.HttpRequestBody, options?: Models.PathUpdateOptionalParams)
      parameters:
        - id: action
          type:
            - '@azure/abort-controller.PathUpdateAction'
          description: >-
            The action must be "append" to upload data to be appended to a file,
            "flush" to

            flush previously uploaded data to a file, "setProperties" to set the
            properties of a file or

            directory, or "setAccessControl" to set the owner, group,
            permissions, or access control list

            for a file or directory.  Note that Hierarchical Namespace must be
            enabled for the account in

            order to use access control.  Also note that the Access Control List
            (ACL) includes permissions

            for the owner, owning group, and others, so the x-ms-permissions and
            x-ms-acl request headers

            are mutually exclusive. Possible values include: 'append', 'flush',
            'setProperties',

            'setAccessControl'
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: options
          type:
            - Models.PathUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.PathUpdateResponse>
        description: Promise<Models.PathUpdateResponse>
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.update_2'
    name: >-
      update(PathUpdateAction, coreHttp.HttpRequestBody,
      PathUpdateOptionalParams, ServiceCallback<void>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(action: PathUpdateAction, body:
        coreHttp.HttpRequestBody, options: PathUpdateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: action
          type:
            - '@azure/abort-controller.PathUpdateAction'
          description: >-
            The action must be "append" to upload data to be appended to a file,
            "flush" to

            flush previously uploaded data to a file, "setProperties" to set the
            properties of a file or

            directory, or "setAccessControl" to set the owner, group,
            permissions, or access control list

            for a file or directory.  Note that Hierarchical Namespace must be
            enabled for the account in

            order to use access control.  Also note that the Access Control List
            (ACL) includes permissions

            for the owner, owning group, and others, so the x-ms-permissions and
            x-ms-acl request headers

            are mutually exclusive. Possible values include: 'append', 'flush',
            'setProperties',

            'setAccessControl'
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: options
          type:
            - '@azure/abort-controller.PathUpdateOptionalParams'
          description: The optional parameters
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.PathOperations.update_1'
    name: 'update(PathUpdateAction, coreHttp.HttpRequestBody, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function update(action: PathUpdateAction, body:
        coreHttp.HttpRequestBody, callback: ServiceCallback<void>)
      parameters:
        - id: action
          type:
            - '@azure/abort-controller.PathUpdateAction'
          description: >-
            The action must be "append" to upload data to be appended to a file,
            "flush" to

            flush previously uploaded data to a file, "setProperties" to set the
            properties of a file or

            directory, or "setAccessControl" to set the owner, group,
            permissions, or access control list

            for a file or directory.  Note that Hierarchical Namespace must be
            enabled for the account in

            order to use access control.  Also note that the Access Control List
            (ACL) includes permissions

            for the owner, owning group, and others, so the x-ms-permissions and
            x-ms-acl request headers

            are mutually exclusive. Possible values include: 'append', 'flush',
            'setProperties',

            'setAccessControl'
        - id: body
          type:
            - coreHttp.HttpRequestBody
          description: Initial data
        - id: callback
          type:
            - '@azure/abort-controller.ServiceCallback<void>'
          description: |
            The callback
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.StorageClientContext'
    name: StorageClientContext
    spec.typeScript:
      - name: StorageClientContext
        fullName: StorageClientContext
        uid: '@azure/abort-controller.StorageClientContext'
  - uid: '@azure/abort-controller.ServiceCallback<void>'
    name: ServiceCallback<void>
    spec.typeScript:
      - name: ServiceCallback
        fullName: ServiceCallback
        uid: '@azure/abort-controller.ServiceCallback'
      - name: <void>
        fullName: <void>
  - uid: '@azure/abort-controller.PathAppendDataOptionalParams'
    name: PathAppendDataOptionalParams
    spec.typeScript:
      - name: PathAppendDataOptionalParams
        fullName: PathAppendDataOptionalParams
        uid: '@azure/abort-controller.PathAppendDataOptionalParams'
  - uid: '@azure/abort-controller.PathCreateOptionalParams'
    name: PathCreateOptionalParams
    spec.typeScript:
      - name: PathCreateOptionalParams
        fullName: PathCreateOptionalParams
        uid: '@azure/abort-controller.PathCreateOptionalParams'
  - uid: '@azure/abort-controller.PathDeleteMethodOptionalParams'
    name: PathDeleteMethodOptionalParams
    spec.typeScript:
      - name: PathDeleteMethodOptionalParams
        fullName: PathDeleteMethodOptionalParams
        uid: '@azure/abort-controller.PathDeleteMethodOptionalParams'
  - uid: '@azure/abort-controller.PathFlushDataOptionalParams'
    name: PathFlushDataOptionalParams
    spec.typeScript:
      - name: PathFlushDataOptionalParams
        fullName: PathFlushDataOptionalParams
        uid: '@azure/abort-controller.PathFlushDataOptionalParams'
  - uid: '@azure/abort-controller.PathGetPropertiesOptionalParams'
    name: PathGetPropertiesOptionalParams
    spec.typeScript:
      - name: PathGetPropertiesOptionalParams
        fullName: PathGetPropertiesOptionalParams
        uid: '@azure/abort-controller.PathGetPropertiesOptionalParams'
  - uid: '@azure/abort-controller.PathLeaseAction'
    name: PathLeaseAction
    spec.typeScript:
      - name: PathLeaseAction
        fullName: PathLeaseAction
        uid: '@azure/abort-controller.PathLeaseAction'
  - uid: '@azure/abort-controller.PathLeaseOptionalParams'
    name: PathLeaseOptionalParams
    spec.typeScript:
      - name: PathLeaseOptionalParams
        fullName: PathLeaseOptionalParams
        uid: '@azure/abort-controller.PathLeaseOptionalParams'
  - uid: '@azure/abort-controller.PathReadOptionalParams'
    name: PathReadOptionalParams
    spec.typeScript:
      - name: PathReadOptionalParams
        fullName: PathReadOptionalParams
        uid: '@azure/abort-controller.PathReadOptionalParams'
  - uid: '@azure/abort-controller.PathSetAccessControlOptionalParams'
    name: PathSetAccessControlOptionalParams
    spec.typeScript:
      - name: PathSetAccessControlOptionalParams
        fullName: PathSetAccessControlOptionalParams
        uid: '@azure/abort-controller.PathSetAccessControlOptionalParams'
  - uid: '@azure/abort-controller.PathUpdateAction'
    name: PathUpdateAction
    spec.typeScript:
      - name: PathUpdateAction
        fullName: PathUpdateAction
        uid: '@azure/abort-controller.PathUpdateAction'
  - uid: '@azure/abort-controller.PathUpdateOptionalParams'
    name: PathUpdateOptionalParams
    spec.typeScript:
      - name: PathUpdateOptionalParams
        fullName: PathUpdateOptionalParams
        uid: '@azure/abort-controller.PathUpdateOptionalParams'
