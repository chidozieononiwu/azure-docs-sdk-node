### YamlMime:UniversalReference
items:
  - uid: '@azure/abort-controller.inspector.Session'
    name: Session
    fullName: Session
    children:
      - '@azure/abort-controller.inspector.Session.addListener_14'
      - '@azure/abort-controller.inspector.Session.addListener_11'
      - '@azure/abort-controller.inspector.Session.addListener_12'
      - '@azure/abort-controller.inspector.Session.addListener_13'
      - '@azure/abort-controller.inspector.Session.addListener_10'
      - '@azure/abort-controller.inspector.Session.addListener_9'
      - '@azure/abort-controller.inspector.Session.addListener_17'
      - '@azure/abort-controller.inspector.Session.addListener_21'
      - '@azure/abort-controller.inspector.Session.addListener_20'
      - '@azure/abort-controller.inspector.Session.addListener_19'
      - '@azure/abort-controller.inspector.Session.addListener_18'
      - '@azure/abort-controller.inspector.Session.addListener_1'
      - '@azure/abort-controller.inspector.Session.addListener_27'
      - '@azure/abort-controller.inspector.Session.addListener_22'
      - '@azure/abort-controller.inspector.Session.addListener_23'
      - '@azure/abort-controller.inspector.Session.addListener_24'
      - '@azure/abort-controller.inspector.Session.addListener_25'
      - '@azure/abort-controller.inspector.Session.addListener_26'
      - '@azure/abort-controller.inspector.Session.addListener_16'
      - '@azure/abort-controller.inspector.Session.addListener_15'
      - '@azure/abort-controller.inspector.Session.addListener_7'
      - '@azure/abort-controller.inspector.Session.addListener_6'
      - '@azure/abort-controller.inspector.Session.addListener_5'
      - '@azure/abort-controller.inspector.Session.addListener_2'
      - '@azure/abort-controller.inspector.Session.addListener_3'
      - '@azure/abort-controller.inspector.Session.addListener_4'
      - '@azure/abort-controller.inspector.Session.addListener_8'
      - '@azure/abort-controller.inspector.Session.addListener'
      - '@azure/abort-controller.inspector.Session.connect'
      - '@azure/abort-controller.inspector.Session.defaultMaxListeners'
      - '@azure/abort-controller.inspector.Session.disconnect'
      - '@azure/abort-controller.inspector.Session.emit_14'
      - '@azure/abort-controller.inspector.Session.emit_11'
      - '@azure/abort-controller.inspector.Session.emit_12'
      - '@azure/abort-controller.inspector.Session.emit_13'
      - '@azure/abort-controller.inspector.Session.emit_10'
      - '@azure/abort-controller.inspector.Session.emit_9'
      - '@azure/abort-controller.inspector.Session.emit_17'
      - '@azure/abort-controller.inspector.Session.emit_21'
      - '@azure/abort-controller.inspector.Session.emit_20'
      - '@azure/abort-controller.inspector.Session.emit_19'
      - '@azure/abort-controller.inspector.Session.emit_18'
      - '@azure/abort-controller.inspector.Session.emit_1'
      - '@azure/abort-controller.inspector.Session.emit_27'
      - '@azure/abort-controller.inspector.Session.emit_22'
      - '@azure/abort-controller.inspector.Session.emit_23'
      - '@azure/abort-controller.inspector.Session.emit_24'
      - '@azure/abort-controller.inspector.Session.emit_25'
      - '@azure/abort-controller.inspector.Session.emit_26'
      - '@azure/abort-controller.inspector.Session.emit_16'
      - '@azure/abort-controller.inspector.Session.emit_15'
      - '@azure/abort-controller.inspector.Session.emit_7'
      - '@azure/abort-controller.inspector.Session.emit_6'
      - '@azure/abort-controller.inspector.Session.emit_5'
      - '@azure/abort-controller.inspector.Session.emit_2'
      - '@azure/abort-controller.inspector.Session.emit_3'
      - '@azure/abort-controller.inspector.Session.emit_4'
      - '@azure/abort-controller.inspector.Session.emit_8'
      - '@azure/abort-controller.inspector.Session.emit'
      - '@azure/abort-controller.inspector.Session.eventNames'
      - '@azure/abort-controller.inspector.Session.getMaxListeners'
      - '@azure/abort-controller.inspector.Session.listenerCount'
      - '@azure/abort-controller.inspector.Session.listenerCount'
      - '@azure/abort-controller.inspector.Session.listeners'
      - '@azure/abort-controller.inspector.Session.off'
      - '@azure/abort-controller.inspector.Session.on_14'
      - '@azure/abort-controller.inspector.Session.on_11'
      - '@azure/abort-controller.inspector.Session.on_12'
      - '@azure/abort-controller.inspector.Session.on_13'
      - '@azure/abort-controller.inspector.Session.on_10'
      - '@azure/abort-controller.inspector.Session.on_9'
      - '@azure/abort-controller.inspector.Session.on_17'
      - '@azure/abort-controller.inspector.Session.on_21'
      - '@azure/abort-controller.inspector.Session.on_20'
      - '@azure/abort-controller.inspector.Session.on_19'
      - '@azure/abort-controller.inspector.Session.on_18'
      - '@azure/abort-controller.inspector.Session.on_1'
      - '@azure/abort-controller.inspector.Session.on_27'
      - '@azure/abort-controller.inspector.Session.on_22'
      - '@azure/abort-controller.inspector.Session.on_23'
      - '@azure/abort-controller.inspector.Session.on_24'
      - '@azure/abort-controller.inspector.Session.on_25'
      - '@azure/abort-controller.inspector.Session.on_26'
      - '@azure/abort-controller.inspector.Session.on_16'
      - '@azure/abort-controller.inspector.Session.on_15'
      - '@azure/abort-controller.inspector.Session.on_7'
      - '@azure/abort-controller.inspector.Session.on_6'
      - '@azure/abort-controller.inspector.Session.on_5'
      - '@azure/abort-controller.inspector.Session.on_2'
      - '@azure/abort-controller.inspector.Session.on_3'
      - '@azure/abort-controller.inspector.Session.on_4'
      - '@azure/abort-controller.inspector.Session.on_8'
      - '@azure/abort-controller.inspector.Session.on'
      - '@azure/abort-controller.inspector.Session.once_14'
      - '@azure/abort-controller.inspector.Session.once_11'
      - '@azure/abort-controller.inspector.Session.once_12'
      - '@azure/abort-controller.inspector.Session.once_13'
      - '@azure/abort-controller.inspector.Session.once_10'
      - '@azure/abort-controller.inspector.Session.once_9'
      - '@azure/abort-controller.inspector.Session.once_17'
      - '@azure/abort-controller.inspector.Session.once_21'
      - '@azure/abort-controller.inspector.Session.once_20'
      - '@azure/abort-controller.inspector.Session.once_19'
      - '@azure/abort-controller.inspector.Session.once_18'
      - '@azure/abort-controller.inspector.Session.once_1'
      - '@azure/abort-controller.inspector.Session.once_27'
      - '@azure/abort-controller.inspector.Session.once_22'
      - '@azure/abort-controller.inspector.Session.once_23'
      - '@azure/abort-controller.inspector.Session.once_24'
      - '@azure/abort-controller.inspector.Session.once_25'
      - '@azure/abort-controller.inspector.Session.once_26'
      - '@azure/abort-controller.inspector.Session.once_16'
      - '@azure/abort-controller.inspector.Session.once_15'
      - '@azure/abort-controller.inspector.Session.once_7'
      - '@azure/abort-controller.inspector.Session.once_6'
      - '@azure/abort-controller.inspector.Session.once_5'
      - '@azure/abort-controller.inspector.Session.once_2'
      - '@azure/abort-controller.inspector.Session.once_3'
      - '@azure/abort-controller.inspector.Session.once_4'
      - '@azure/abort-controller.inspector.Session.once_8'
      - '@azure/abort-controller.inspector.Session.once'
      - '@azure/abort-controller.inspector.Session.post_80'
      - '@azure/abort-controller.inspector.Session.post_79'
      - '@azure/abort-controller.inspector.Session.post_78'
      - '@azure/abort-controller.inspector.Session.post_43'
      - '@azure/abort-controller.inspector.Session.post_44'
      - '@azure/abort-controller.inspector.Session.post_30'
      - '@azure/abort-controller.inspector.Session.post_29'
      - '@azure/abort-controller.inspector.Session.post_66'
      - '@azure/abort-controller.inspector.Session.post_67'
      - '@azure/abort-controller.inspector.Session.post_41'
      - '@azure/abort-controller.inspector.Session.post_42'
      - '@azure/abort-controller.inspector.Session.post_62'
      - '@azure/abort-controller.inspector.Session.post_63'
      - '@azure/abort-controller.inspector.Session.post_54'
      - '@azure/abort-controller.inspector.Session.post_55'
      - '@azure/abort-controller.inspector.Session.post_51'
      - '@azure/abort-controller.inspector.Session.post_45'
      - '@azure/abort-controller.inspector.Session.post_46'
      - '@azure/abort-controller.inspector.Session.post_39'
      - '@azure/abort-controller.inspector.Session.post_40'
      - '@azure/abort-controller.inspector.Session.post_60'
      - '@azure/abort-controller.inspector.Session.post_61'
      - '@azure/abort-controller.inspector.Session.post_53'
      - '@azure/abort-controller.inspector.Session.post_52'
      - '@azure/abort-controller.inspector.Session.post_56'
      - '@azure/abort-controller.inspector.Session.post_57'
      - '@azure/abort-controller.inspector.Session.post_72'
      - '@azure/abort-controller.inspector.Session.post_73'
      - '@azure/abort-controller.inspector.Session.post_76'
      - '@azure/abort-controller.inspector.Session.post_77'
      - '@azure/abort-controller.inspector.Session.post_74'
      - '@azure/abort-controller.inspector.Session.post_75'
      - '@azure/abort-controller.inspector.Session.post_37'
      - '@azure/abort-controller.inspector.Session.post_38'
      - '@azure/abort-controller.inspector.Session.post_35'
      - '@azure/abort-controller.inspector.Session.post_36'
      - '@azure/abort-controller.inspector.Session.post_31'
      - '@azure/abort-controller.inspector.Session.post_32'
      - '@azure/abort-controller.inspector.Session.post_64'
      - '@azure/abort-controller.inspector.Session.post_65'
      - '@azure/abort-controller.inspector.Session.post_70'
      - '@azure/abort-controller.inspector.Session.post_71'
      - '@azure/abort-controller.inspector.Session.post_58'
      - '@azure/abort-controller.inspector.Session.post_59'
      - '@azure/abort-controller.inspector.Session.post_33'
      - '@azure/abort-controller.inspector.Session.post_34'
      - '@azure/abort-controller.inspector.Session.post_68'
      - '@azure/abort-controller.inspector.Session.post_69'
      - '@azure/abort-controller.inspector.Session.post_48'
      - '@azure/abort-controller.inspector.Session.post_49'
      - '@azure/abort-controller.inspector.Session.post_50'
      - '@azure/abort-controller.inspector.Session.post_47'
      - '@azure/abort-controller.inspector.Session.post_106'
      - '@azure/abort-controller.inspector.Session.post_107'
      - '@azure/abort-controller.inspector.Session.post_103'
      - '@azure/abort-controller.inspector.Session.post_96'
      - '@azure/abort-controller.inspector.Session.post_95'
      - '@azure/abort-controller.inspector.Session.post_108'
      - '@azure/abort-controller.inspector.Session.post_109'
      - '@azure/abort-controller.inspector.Session.post_104'
      - '@azure/abort-controller.inspector.Session.post_105'
      - '@azure/abort-controller.inspector.Session.post_113'
      - '@azure/abort-controller.inspector.Session.post_110'
      - '@azure/abort-controller.inspector.Session.post_111'
      - '@azure/abort-controller.inspector.Session.post_97'
      - '@azure/abort-controller.inspector.Session.post_98'
      - '@azure/abort-controller.inspector.Session.post_112'
      - '@azure/abort-controller.inspector.Session.post_99'
      - '@azure/abort-controller.inspector.Session.post_100'
      - '@azure/abort-controller.inspector.Session.post_101'
      - '@azure/abort-controller.inspector.Session.post_102'
      - '@azure/abort-controller.inspector.Session.post_125'
      - '@azure/abort-controller.inspector.Session.post_126'
      - '@azure/abort-controller.inspector.Session.post_114'
      - '@azure/abort-controller.inspector.Session.post_115'
      - '@azure/abort-controller.inspector.Session.post_116'
      - '@azure/abort-controller.inspector.Session.post_117'
      - '@azure/abort-controller.inspector.Session.post_123'
      - '@azure/abort-controller.inspector.Session.post_124'
      - '@azure/abort-controller.inspector.Session.post_122'
      - '@azure/abort-controller.inspector.Session.post_120'
      - '@azure/abort-controller.inspector.Session.post_121'
      - '@azure/abort-controller.inspector.Session.post_118'
      - '@azure/abort-controller.inspector.Session.post_119'
      - '@azure/abort-controller.inspector.Session.post_82'
      - '@azure/abort-controller.inspector.Session.post_81'
      - '@azure/abort-controller.inspector.Session.post_91'
      - '@azure/abort-controller.inspector.Session.post_83'
      - '@azure/abort-controller.inspector.Session.post_84'
      - '@azure/abort-controller.inspector.Session.post_85'
      - '@azure/abort-controller.inspector.Session.post_87'
      - '@azure/abort-controller.inspector.Session.post_88'
      - '@azure/abort-controller.inspector.Session.post_92'
      - '@azure/abort-controller.inspector.Session.post_86'
      - '@azure/abort-controller.inspector.Session.post_89'
      - '@azure/abort-controller.inspector.Session.post_93'
      - '@azure/abort-controller.inspector.Session.post_90'
      - '@azure/abort-controller.inspector.Session.post_94'
      - '@azure/abort-controller.inspector.Session.post_5'
      - '@azure/abort-controller.inspector.Session.post_6'
      - '@azure/abort-controller.inspector.Session.post_7'
      - '@azure/abort-controller.inspector.Session.post_8'
      - '@azure/abort-controller.inspector.Session.post_21'
      - '@azure/abort-controller.inspector.Session.post_22'
      - '@azure/abort-controller.inspector.Session.post_17'
      - '@azure/abort-controller.inspector.Session.post_18'
      - '@azure/abort-controller.inspector.Session.post_16'
      - '@azure/abort-controller.inspector.Session.post_3'
      - '@azure/abort-controller.inspector.Session.post_4'
      - '@azure/abort-controller.inspector.Session.post_9'
      - '@azure/abort-controller.inspector.Session.post_10'
      - '@azure/abort-controller.inspector.Session.post_27'
      - '@azure/abort-controller.inspector.Session.post_28'
      - '@azure/abort-controller.inspector.Session.post_25'
      - '@azure/abort-controller.inspector.Session.post_26'
      - '@azure/abort-controller.inspector.Session.post_11'
      - '@azure/abort-controller.inspector.Session.post_12'
      - '@azure/abort-controller.inspector.Session.post_13'
      - '@azure/abort-controller.inspector.Session.post_14'
      - '@azure/abort-controller.inspector.Session.post_15'
      - '@azure/abort-controller.inspector.Session.post_23'
      - '@azure/abort-controller.inspector.Session.post_24'
      - '@azure/abort-controller.inspector.Session.post_19'
      - '@azure/abort-controller.inspector.Session.post_20'
      - '@azure/abort-controller.inspector.Session.post_2'
      - '@azure/abort-controller.inspector.Session.post_1'
      - '@azure/abort-controller.inspector.Session.post'
      - '@azure/abort-controller.inspector.Session.prependListener_14'
      - '@azure/abort-controller.inspector.Session.prependListener_11'
      - '@azure/abort-controller.inspector.Session.prependListener_12'
      - '@azure/abort-controller.inspector.Session.prependListener_13'
      - '@azure/abort-controller.inspector.Session.prependListener_10'
      - '@azure/abort-controller.inspector.Session.prependListener_9'
      - '@azure/abort-controller.inspector.Session.prependListener_17'
      - '@azure/abort-controller.inspector.Session.prependListener_21'
      - '@azure/abort-controller.inspector.Session.prependListener_20'
      - '@azure/abort-controller.inspector.Session.prependListener_19'
      - '@azure/abort-controller.inspector.Session.prependListener_18'
      - '@azure/abort-controller.inspector.Session.prependListener_1'
      - '@azure/abort-controller.inspector.Session.prependListener_27'
      - '@azure/abort-controller.inspector.Session.prependListener_22'
      - '@azure/abort-controller.inspector.Session.prependListener_23'
      - '@azure/abort-controller.inspector.Session.prependListener_24'
      - '@azure/abort-controller.inspector.Session.prependListener_25'
      - '@azure/abort-controller.inspector.Session.prependListener_26'
      - '@azure/abort-controller.inspector.Session.prependListener_16'
      - '@azure/abort-controller.inspector.Session.prependListener_15'
      - '@azure/abort-controller.inspector.Session.prependListener_7'
      - '@azure/abort-controller.inspector.Session.prependListener_6'
      - '@azure/abort-controller.inspector.Session.prependListener_5'
      - '@azure/abort-controller.inspector.Session.prependListener_2'
      - '@azure/abort-controller.inspector.Session.prependListener_3'
      - '@azure/abort-controller.inspector.Session.prependListener_4'
      - '@azure/abort-controller.inspector.Session.prependListener_8'
      - '@azure/abort-controller.inspector.Session.prependListener'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_14'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_11'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_12'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_13'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_10'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_9'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_17'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_21'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_20'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_19'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_18'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_1'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_27'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_22'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_23'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_24'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_25'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_26'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_16'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_15'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_7'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_6'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_5'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_2'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_3'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_4'
      - '@azure/abort-controller.inspector.Session.prependOnceListener_8'
      - '@azure/abort-controller.inspector.Session.prependOnceListener'
      - '@azure/abort-controller.inspector.Session.rawListeners'
      - '@azure/abort-controller.inspector.Session.removeAllListeners'
      - '@azure/abort-controller.inspector.Session.removeListener'
      - '@azure/abort-controller.inspector.Session.constructor'
      - '@azure/abort-controller.inspector.Session.setMaxListeners'
    langs:
      - typeScript
    type: class
    summary: >-
      The inspector.Session is used for dispatching messages to the V8 inspector
      back-end and receiving message responses and notifications.
    extends:
      name: '@azure/abort-controller.events.EventEmitter.EventEmitter'
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_14'
    name: >-
      addListener("Console.messageAdded", (message:
      InspectorNotification<MessageAddedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new console message is added.
    syntax:
      content: >-
        function addListener(event: "Console.messageAdded", listener: (message:
        InspectorNotification<MessageAddedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Console.messageAdded"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<MessageAddedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_11'
    name: >-
      addListener("Debugger.breakpointResolved", (message:
      InspectorNotification<BreakpointResolvedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when breakpoint is resolved to an actual script and location.
    syntax:
      content: >-
        function addListener(event: "Debugger.breakpointResolved", listener:
        (message: InspectorNotification<BreakpointResolvedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Debugger.breakpointResolved"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<BreakpointResolvedEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_12'
    name: >-
      addListener("Debugger.paused", (message:
      InspectorNotification<PausedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when the virtual machine stopped on breakpoint or exception or any
      other stop criteria.
    syntax:
      content: >-
        function addListener(event: "Debugger.paused", listener: (message:
        InspectorNotification<PausedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.paused"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<PausedEventDataType>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_13'
    name: 'addListener("Debugger.resumed", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when the virtual machine resumed execution.
    syntax:
      content: 'function addListener(event: "Debugger.resumed", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"Debugger.resumed"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_10'
    name: >-
      addListener("Debugger.scriptFailedToParse", (message:
      InspectorNotification<ScriptFailedToParseEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when virtual machine fails to parse the script.
    syntax:
      content: >-
        function addListener(event: "Debugger.scriptFailedToParse", listener:
        (message: InspectorNotification<ScriptFailedToParseEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptFailedToParse"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptFailedToParseEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_9'
    name: >-
      addListener("Debugger.scriptParsed", (message:
      InspectorNotification<ScriptParsedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when virtual machine parses script. This event is also fired for all
      known and uncollected scripts upon enabling debugger.
    syntax:
      content: >-
        function addListener(event: "Debugger.scriptParsed", listener: (message:
        InspectorNotification<ScriptParsedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptParsed"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptParsedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_17'
    name: >-
      addListener("HeapProfiler.addHeapSnapshotChunk", (message:
      InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "HeapProfiler.addHeapSnapshotChunk",
        listener: (message:
        InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.addHeapSnapshotChunk"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_21'
    name: >-
      addListener("HeapProfiler.heapStatsUpdate", (message:
      InspectorNotification<HeapStatsUpdateEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend may send update for
      one or more fragments
    syntax:
      content: >-
        function addListener(event: "HeapProfiler.heapStatsUpdate", listener:
        (message: InspectorNotification<HeapStatsUpdateEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.heapStatsUpdate"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<HeapStatsUpdateEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_20'
    name: >-
      addListener("HeapProfiler.lastSeenObjectId", (message:
      InspectorNotification<LastSeenObjectIdEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend regularly sends a
      current value for last seen object id and corresponding timestamp. If the
      were changes in the heap since last event then one or more heapStatsUpdate
      events will be sent before a new lastSeenObjectId event.
    syntax:
      content: >-
        function addListener(event: "HeapProfiler.lastSeenObjectId", listener:
        (message: InspectorNotification<LastSeenObjectIdEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.lastSeenObjectId"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<LastSeenObjectIdEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_19'
    name: >-
      addListener("HeapProfiler.reportHeapSnapshotProgress", (message:
      InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "HeapProfiler.reportHeapSnapshotProgress",
        listener: (message:
        InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.reportHeapSnapshotProgress"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReportHeapSnapshotProgressEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_18'
    name: 'addListener("HeapProfiler.resetProfiles", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "HeapProfiler.resetProfiles", listener: ()
        => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.resetProfiles"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_1'
    name: >-
      addListener("inspectorNotification", (message:
      InspectorNotification<__type>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Emitted when any notification from the V8 Inspector is received.
    syntax:
      content: >-
        function addListener(event: "inspectorNotification", listener: (message:
        InspectorNotification<__type>) => void)
      parameters:
        - id: event
          type:
            - '"inspectorNotification"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<__type>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_27'
    name: 'addListener("NodeRuntime.waitingForDisconnect", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This event is fired instead of `Runtime.executionContextDestroyed` when
      enabled.
      It is fired when the Node process finished all code execution and is
      waiting for all frontends to disconnect.
    syntax:
      content: >-
        function addListener(event: "NodeRuntime.waitingForDisconnect",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"NodeRuntime.waitingForDisconnect"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_22'
    name: >-
      addListener("NodeTracing.dataCollected", (message:
      InspectorNotification<DataCollectedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Contains an bucket of collected trace events.
    syntax:
      content: >-
        function addListener(event: "NodeTracing.dataCollected", listener:
        (message: InspectorNotification<DataCollectedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.dataCollected"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DataCollectedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_23'
    name: 'addListener("NodeTracing.tracingComplete", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Signals that tracing is stopped and there is no trace buffers pending
      flush, all data were

      delivered via dataCollected events.
    syntax:
      content: >-
        function addListener(event: "NodeTracing.tracingComplete", listener: ()
        => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.tracingComplete"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_24'
    name: >-
      addListener("NodeWorker.attachedToWorker", (message:
      InspectorNotification<AttachedToWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when attached to a worker.
    syntax:
      content: >-
        function addListener(event: "NodeWorker.attachedToWorker", listener:
        (message: InspectorNotification<AttachedToWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.attachedToWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<AttachedToWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_25'
    name: >-
      addListener("NodeWorker.detachedFromWorker", (message:
      InspectorNotification<DetachedFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when detached from the worker.
    syntax:
      content: >-
        function addListener(event: "NodeWorker.detachedFromWorker", listener:
        (message: InspectorNotification<DetachedFromWorkerEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.detachedFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DetachedFromWorkerEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_26'
    name: >-
      addListener("NodeWorker.receivedMessageFromWorker", (message:
      InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Notifies about a new protocol message received from the session
      (session ID is provided in attachedToWorker notification).
    syntax:
      content: >-
        function addListener(event: "NodeWorker.receivedMessageFromWorker",
        listener: (message:
        InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.receivedMessageFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReceivedMessageFromWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_16'
    name: >-
      addListener("Profiler.consoleProfileFinished", (message:
      InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function addListener(event: "Profiler.consoleProfileFinished", listener:
        (message: InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileFinished"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_15'
    name: >-
      addListener("Profiler.consoleProfileStarted", (message:
      InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sent when new profile recording is started using console.profile() call.
    syntax:
      content: >-
        function addListener(event: "Profiler.consoleProfileStarted", listener:
        (message: InspectorNotification<ConsoleProfileStartedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileStarted"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileStartedEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_7'
    name: >-
      addListener("Runtime.consoleAPICalled", (message:
      InspectorNotification<ConsoleAPICalledEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when console API was called.
    syntax:
      content: >-
        function addListener(event: "Runtime.consoleAPICalled", listener:
        (message: InspectorNotification<ConsoleAPICalledEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.consoleAPICalled"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ConsoleAPICalledEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_6'
    name: >-
      addListener("Runtime.exceptionRevoked", (message:
      InspectorNotification<ExceptionRevokedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when unhandled exception was revoked.
    syntax:
      content: >-
        function addListener(event: "Runtime.exceptionRevoked", listener:
        (message: InspectorNotification<ExceptionRevokedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionRevoked"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionRevokedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_5'
    name: >-
      addListener("Runtime.exceptionThrown", (message:
      InspectorNotification<ExceptionThrownEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when exception was thrown and unhandled.
    syntax:
      content: >-
        function addListener(event: "Runtime.exceptionThrown", listener:
        (message: InspectorNotification<ExceptionThrownEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionThrown"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionThrownEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_2'
    name: >-
      addListener("Runtime.executionContextCreated", (message:
      InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new execution context is created.
    syntax:
      content: >-
        function addListener(event: "Runtime.executionContextCreated", listener:
        (message: InspectorNotification<ExecutionContextCreatedEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextCreated"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextCreatedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_3'
    name: >-
      addListener("Runtime.executionContextDestroyed", (message:
      InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when execution context is destroyed.
    syntax:
      content: >-
        function addListener(event: "Runtime.executionContextDestroyed",
        listener: (message:
        InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextDestroyed"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextDestroyedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_4'
    name: 'addListener("Runtime.executionContextsCleared", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when all executionContexts were cleared in browser
    syntax:
      content: >-
        function addListener(event: "Runtime.executionContextsCleared",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextsCleared"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener_8'
    name: >-
      addListener("Runtime.inspectRequested", (message:
      InspectorNotification<InspectRequestedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Issued when object should be inspected (for example, as a result of
      inspect() command line API call).
    syntax:
      content: >-
        function addListener(event: "Runtime.inspectRequested", listener:
        (message: InspectorNotification<InspectRequestedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.inspectRequested"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<InspectRequestedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.addListener'
    name: 'addListener(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addListener(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.connect'
    name: connect()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Connects a session to the inspector back-end.

      An exception will be thrown if there is already a connected session
      established either

      through the API or by a front-end connected to the Inspector WebSocket
      port.
    syntax:
      content: function connect()
      parameters: []
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.defaultMaxListeners'
    name: defaultMaxListeners
    fullName: defaultMaxListeners
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.disconnect'
    name: disconnect()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Immediately close the session. All pending message callbacks will be
      called with an error.

      session.connect() will need to be called to be able to send messages
      again.

      Reconnected session will lose all inspector state, such as enabled agents
      or configured breakpoints.
    syntax:
      content: function disconnect()
      parameters: []
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_14'
    name: >-
      emit("Console.messageAdded",
      InspectorNotification<MessageAddedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Console.messageAdded", message:
        InspectorNotification<MessageAddedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Console.messageAdded"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Console.MessageAddedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_11'
    name: >-
      emit("Debugger.breakpointResolved",
      InspectorNotification<BreakpointResolvedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Debugger.breakpointResolved", message:
        InspectorNotification<BreakpointResolvedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Debugger.breakpointResolved"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.BreakpointResolvedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_12'
    name: 'emit("Debugger.paused", InspectorNotification<PausedEventDataType>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Debugger.paused", message:
        InspectorNotification<PausedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Debugger.paused"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.PausedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_13'
    name: emit("Debugger.resumed")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "Debugger.resumed")'
      parameters:
        - id: event
          type:
            - '"Debugger.resumed"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_10'
    name: >-
      emit("Debugger.scriptFailedToParse",
      InspectorNotification<ScriptFailedToParseEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Debugger.scriptFailedToParse", message:
        InspectorNotification<ScriptFailedToParseEventDataType>)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptFailedToParse"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.ScriptFailedToParseEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_9'
    name: >-
      emit("Debugger.scriptParsed",
      InspectorNotification<ScriptParsedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Debugger.scriptParsed", message:
        InspectorNotification<ScriptParsedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptParsed"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.ScriptParsedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_17'
    name: >-
      emit("HeapProfiler.addHeapSnapshotChunk",
      InspectorNotification<AddHeapSnapshotChunkEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "HeapProfiler.addHeapSnapshotChunk", message:
        InspectorNotification<AddHeapSnapshotChunkEventDataType>)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.addHeapSnapshotChunk"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.AddHeapSnapshotChunkEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_21'
    name: >-
      emit("HeapProfiler.heapStatsUpdate",
      InspectorNotification<HeapStatsUpdateEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "HeapProfiler.heapStatsUpdate", message:
        InspectorNotification<HeapStatsUpdateEventDataType>)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.heapStatsUpdate"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.HeapStatsUpdateEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_20'
    name: >-
      emit("HeapProfiler.lastSeenObjectId",
      InspectorNotification<LastSeenObjectIdEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "HeapProfiler.lastSeenObjectId", message:
        InspectorNotification<LastSeenObjectIdEventDataType>)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.lastSeenObjectId"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.LastSeenObjectIdEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_19'
    name: >-
      emit("HeapProfiler.reportHeapSnapshotProgress",
      InspectorNotification<ReportHeapSnapshotProgressEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "HeapProfiler.reportHeapSnapshotProgress", message:
        InspectorNotification<ReportHeapSnapshotProgressEventDataType>)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.reportHeapSnapshotProgress"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.ReportHeapSnapshotProgressEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_18'
    name: emit("HeapProfiler.resetProfiles")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "HeapProfiler.resetProfiles")'
      parameters:
        - id: event
          type:
            - '"HeapProfiler.resetProfiles"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_1'
    name: 'emit("inspectorNotification", InspectorNotification<__type>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "inspectorNotification", message:
        InspectorNotification<__type>)
      parameters:
        - id: event
          type:
            - '"inspectorNotification"'
          description: ''
        - id: message
          type:
            - '@azure/abort-controller.inspector.InspectorNotification<__type>'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_27'
    name: emit("NodeRuntime.waitingForDisconnect")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "NodeRuntime.waitingForDisconnect")'
      parameters:
        - id: event
          type:
            - '"NodeRuntime.waitingForDisconnect"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_22'
    name: >-
      emit("NodeTracing.dataCollected",
      InspectorNotification<DataCollectedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "NodeTracing.dataCollected", message:
        InspectorNotification<DataCollectedEventDataType>)
      parameters:
        - id: event
          type:
            - '"NodeTracing.dataCollected"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeTracing.DataCollectedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_23'
    name: emit("NodeTracing.tracingComplete")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "NodeTracing.tracingComplete")'
      parameters:
        - id: event
          type:
            - '"NodeTracing.tracingComplete"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_24'
    name: >-
      emit("NodeWorker.attachedToWorker",
      InspectorNotification<AttachedToWorkerEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "NodeWorker.attachedToWorker", message:
        InspectorNotification<AttachedToWorkerEventDataType>)
      parameters:
        - id: event
          type:
            - '"NodeWorker.attachedToWorker"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeWorker.AttachedToWorkerEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_25'
    name: >-
      emit("NodeWorker.detachedFromWorker",
      InspectorNotification<DetachedFromWorkerEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "NodeWorker.detachedFromWorker", message:
        InspectorNotification<DetachedFromWorkerEventDataType>)
      parameters:
        - id: event
          type:
            - '"NodeWorker.detachedFromWorker"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeWorker.DetachedFromWorkerEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_26'
    name: >-
      emit("NodeWorker.receivedMessageFromWorker",
      InspectorNotification<ReceivedMessageFromWorkerEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "NodeWorker.receivedMessageFromWorker", message:
        InspectorNotification<ReceivedMessageFromWorkerEventDataType>)
      parameters:
        - id: event
          type:
            - '"NodeWorker.receivedMessageFromWorker"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeWorker.ReceivedMessageFromWorkerEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_16'
    name: >-
      emit("Profiler.consoleProfileFinished",
      InspectorNotification<ConsoleProfileFinishedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Profiler.consoleProfileFinished", message:
        InspectorNotification<ConsoleProfileFinishedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileFinished"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Profiler.ConsoleProfileFinishedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_15'
    name: >-
      emit("Profiler.consoleProfileStarted",
      InspectorNotification<ConsoleProfileStartedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Profiler.consoleProfileStarted", message:
        InspectorNotification<ConsoleProfileStartedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileStarted"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Profiler.ConsoleProfileStartedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_7'
    name: >-
      emit("Runtime.consoleAPICalled",
      InspectorNotification<ConsoleAPICalledEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Runtime.consoleAPICalled", message:
        InspectorNotification<ConsoleAPICalledEventDataType>)
      parameters:
        - id: event
          type:
            - '"Runtime.consoleAPICalled"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ConsoleAPICalledEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_6'
    name: >-
      emit("Runtime.exceptionRevoked",
      InspectorNotification<ExceptionRevokedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Runtime.exceptionRevoked", message:
        InspectorNotification<ExceptionRevokedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionRevoked"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExceptionRevokedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_5'
    name: >-
      emit("Runtime.exceptionThrown",
      InspectorNotification<ExceptionThrownEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Runtime.exceptionThrown", message:
        InspectorNotification<ExceptionThrownEventDataType>)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionThrown"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExceptionThrownEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_2'
    name: >-
      emit("Runtime.executionContextCreated",
      InspectorNotification<ExecutionContextCreatedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Runtime.executionContextCreated", message:
        InspectorNotification<ExecutionContextCreatedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextCreated"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExecutionContextCreatedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_3'
    name: >-
      emit("Runtime.executionContextDestroyed",
      InspectorNotification<ExecutionContextDestroyedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Runtime.executionContextDestroyed", message:
        InspectorNotification<ExecutionContextDestroyedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextDestroyed"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExecutionContextDestroyedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_4'
    name: emit("Runtime.executionContextsCleared")
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: "Runtime.executionContextsCleared")'
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextsCleared"'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit_8'
    name: >-
      emit("Runtime.inspectRequested",
      InspectorNotification<InspectRequestedEventDataType>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function emit(event: "Runtime.inspectRequested", message:
        InspectorNotification<InspectRequestedEventDataType>)
      parameters:
        - id: event
          type:
            - '"Runtime.inspectRequested"'
          description: ''
        - id: message
          type:
            - >-
              @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.InspectRequestedEventDataType>
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.emit'
    name: 'emit(string | symbol, any[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: args
          type:
            - 'any[]'
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.eventNames'
    name: eventNames()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function eventNames()
      parameters: []
      return:
        type:
          - Array<string | symbol>
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.getMaxListeners'
    name: getMaxListeners()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getMaxListeners()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.listenerCount'
    name: 'listenerCount(EventEmitter, string | symbol)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, event: string |
        symbol)
      parameters:
        - id: emitter
          type:
            - '@azure/abort-controller.events.EventEmitter.EventEmitter'
          description: ''
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
    deprecated:
      content: since v4.0.0
  - uid: '@azure/abort-controller.inspector.Session.listenerCount'
    name: listenerCount(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listenerCount(type: string | symbol)'
      parameters:
        - id: type
          type:
            - string | symbol
          description: ''
      return:
        type:
          - number
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.listeners'
    name: listeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.off'
    name: 'off(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function off(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_14'
    name: >-
      on("Console.messageAdded", (message:
      InspectorNotification<MessageAddedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new console message is added.
    syntax:
      content: >-
        function on(event: "Console.messageAdded", listener: (message:
        InspectorNotification<MessageAddedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Console.messageAdded"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<MessageAddedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_11'
    name: >-
      on("Debugger.breakpointResolved", (message:
      InspectorNotification<BreakpointResolvedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when breakpoint is resolved to an actual script and location.
    syntax:
      content: >-
        function on(event: "Debugger.breakpointResolved", listener: (message:
        InspectorNotification<BreakpointResolvedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.breakpointResolved"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<BreakpointResolvedEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_12'
    name: >-
      on("Debugger.paused", (message:
      InspectorNotification<PausedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when the virtual machine stopped on breakpoint or exception or any
      other stop criteria.
    syntax:
      content: >-
        function on(event: "Debugger.paused", listener: (message:
        InspectorNotification<PausedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.paused"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<PausedEventDataType>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_13'
    name: 'on("Debugger.resumed", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when the virtual machine resumed execution.
    syntax:
      content: 'function on(event: "Debugger.resumed", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"Debugger.resumed"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_10'
    name: >-
      on("Debugger.scriptFailedToParse", (message:
      InspectorNotification<ScriptFailedToParseEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when virtual machine fails to parse the script.
    syntax:
      content: >-
        function on(event: "Debugger.scriptFailedToParse", listener: (message:
        InspectorNotification<ScriptFailedToParseEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptFailedToParse"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptFailedToParseEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_9'
    name: >-
      on("Debugger.scriptParsed", (message:
      InspectorNotification<ScriptParsedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when virtual machine parses script. This event is also fired for all
      known and uncollected scripts upon enabling debugger.
    syntax:
      content: >-
        function on(event: "Debugger.scriptParsed", listener: (message:
        InspectorNotification<ScriptParsedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptParsed"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptParsedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_17'
    name: >-
      on("HeapProfiler.addHeapSnapshotChunk", (message:
      InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "HeapProfiler.addHeapSnapshotChunk", listener:
        (message: InspectorNotification<AddHeapSnapshotChunkEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.addHeapSnapshotChunk"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_21'
    name: >-
      on("HeapProfiler.heapStatsUpdate", (message:
      InspectorNotification<HeapStatsUpdateEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend may send update for
      one or more fragments
    syntax:
      content: >-
        function on(event: "HeapProfiler.heapStatsUpdate", listener: (message:
        InspectorNotification<HeapStatsUpdateEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.heapStatsUpdate"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<HeapStatsUpdateEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_20'
    name: >-
      on("HeapProfiler.lastSeenObjectId", (message:
      InspectorNotification<LastSeenObjectIdEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend regularly sends a
      current value for last seen object id and corresponding timestamp. If the
      were changes in the heap since last event then one or more heapStatsUpdate
      events will be sent before a new lastSeenObjectId event.
    syntax:
      content: >-
        function on(event: "HeapProfiler.lastSeenObjectId", listener: (message:
        InspectorNotification<LastSeenObjectIdEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.lastSeenObjectId"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<LastSeenObjectIdEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_19'
    name: >-
      on("HeapProfiler.reportHeapSnapshotProgress", (message:
      InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "HeapProfiler.reportHeapSnapshotProgress", listener:
        (message:
        InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.reportHeapSnapshotProgress"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReportHeapSnapshotProgressEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_18'
    name: 'on("HeapProfiler.resetProfiles", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: "HeapProfiler.resetProfiles", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"HeapProfiler.resetProfiles"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_1'
    name: >-
      on("inspectorNotification", (message: InspectorNotification<__type>) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Emitted when any notification from the V8 Inspector is received.
    syntax:
      content: >-
        function on(event: "inspectorNotification", listener: (message:
        InspectorNotification<__type>) => void)
      parameters:
        - id: event
          type:
            - '"inspectorNotification"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<__type>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_27'
    name: 'on("NodeRuntime.waitingForDisconnect", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This event is fired instead of `Runtime.executionContextDestroyed` when
      enabled.
      It is fired when the Node process finished all code execution and is
      waiting for all frontends to disconnect.
    syntax:
      content: >-
        function on(event: "NodeRuntime.waitingForDisconnect", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"NodeRuntime.waitingForDisconnect"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_22'
    name: >-
      on("NodeTracing.dataCollected", (message:
      InspectorNotification<DataCollectedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Contains an bucket of collected trace events.
    syntax:
      content: >-
        function on(event: "NodeTracing.dataCollected", listener: (message:
        InspectorNotification<DataCollectedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.dataCollected"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DataCollectedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_23'
    name: 'on("NodeTracing.tracingComplete", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Signals that tracing is stopped and there is no trace buffers pending
      flush, all data were

      delivered via dataCollected events.
    syntax:
      content: 'function on(event: "NodeTracing.tracingComplete", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"NodeTracing.tracingComplete"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_24'
    name: >-
      on("NodeWorker.attachedToWorker", (message:
      InspectorNotification<AttachedToWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when attached to a worker.
    syntax:
      content: >-
        function on(event: "NodeWorker.attachedToWorker", listener: (message:
        InspectorNotification<AttachedToWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.attachedToWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<AttachedToWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_25'
    name: >-
      on("NodeWorker.detachedFromWorker", (message:
      InspectorNotification<DetachedFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when detached from the worker.
    syntax:
      content: >-
        function on(event: "NodeWorker.detachedFromWorker", listener: (message:
        InspectorNotification<DetachedFromWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.detachedFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DetachedFromWorkerEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_26'
    name: >-
      on("NodeWorker.receivedMessageFromWorker", (message:
      InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Notifies about a new protocol message received from the session
      (session ID is provided in attachedToWorker notification).
    syntax:
      content: >-
        function on(event: "NodeWorker.receivedMessageFromWorker", listener:
        (message: InspectorNotification<ReceivedMessageFromWorkerEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.receivedMessageFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReceivedMessageFromWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_16'
    name: >-
      on("Profiler.consoleProfileFinished", (message:
      InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function on(event: "Profiler.consoleProfileFinished", listener:
        (message: InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileFinished"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_15'
    name: >-
      on("Profiler.consoleProfileStarted", (message:
      InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sent when new profile recording is started using console.profile() call.
    syntax:
      content: >-
        function on(event: "Profiler.consoleProfileStarted", listener: (message:
        InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileStarted"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileStartedEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_7'
    name: >-
      on("Runtime.consoleAPICalled", (message:
      InspectorNotification<ConsoleAPICalledEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when console API was called.
    syntax:
      content: >-
        function on(event: "Runtime.consoleAPICalled", listener: (message:
        InspectorNotification<ConsoleAPICalledEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.consoleAPICalled"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ConsoleAPICalledEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_6'
    name: >-
      on("Runtime.exceptionRevoked", (message:
      InspectorNotification<ExceptionRevokedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when unhandled exception was revoked.
    syntax:
      content: >-
        function on(event: "Runtime.exceptionRevoked", listener: (message:
        InspectorNotification<ExceptionRevokedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionRevoked"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionRevokedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_5'
    name: >-
      on("Runtime.exceptionThrown", (message:
      InspectorNotification<ExceptionThrownEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when exception was thrown and unhandled.
    syntax:
      content: >-
        function on(event: "Runtime.exceptionThrown", listener: (message:
        InspectorNotification<ExceptionThrownEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionThrown"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionThrownEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_2'
    name: >-
      on("Runtime.executionContextCreated", (message:
      InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new execution context is created.
    syntax:
      content: >-
        function on(event: "Runtime.executionContextCreated", listener:
        (message: InspectorNotification<ExecutionContextCreatedEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextCreated"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextCreatedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_3'
    name: >-
      on("Runtime.executionContextDestroyed", (message:
      InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when execution context is destroyed.
    syntax:
      content: >-
        function on(event: "Runtime.executionContextDestroyed", listener:
        (message: InspectorNotification<ExecutionContextDestroyedEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextDestroyed"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextDestroyedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_4'
    name: 'on("Runtime.executionContextsCleared", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when all executionContexts were cleared in browser
    syntax:
      content: >-
        function on(event: "Runtime.executionContextsCleared", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextsCleared"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on_8'
    name: >-
      on("Runtime.inspectRequested", (message:
      InspectorNotification<InspectRequestedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Issued when object should be inspected (for example, as a result of
      inspect() command line API call).
    syntax:
      content: >-
        function on(event: "Runtime.inspectRequested", listener: (message:
        InspectorNotification<InspectRequestedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.inspectRequested"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<InspectRequestedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.on'
    name: 'on(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function on(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_14'
    name: >-
      once("Console.messageAdded", (message:
      InspectorNotification<MessageAddedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new console message is added.
    syntax:
      content: >-
        function once(event: "Console.messageAdded", listener: (message:
        InspectorNotification<MessageAddedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Console.messageAdded"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<MessageAddedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_11'
    name: >-
      once("Debugger.breakpointResolved", (message:
      InspectorNotification<BreakpointResolvedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when breakpoint is resolved to an actual script and location.
    syntax:
      content: >-
        function once(event: "Debugger.breakpointResolved", listener: (message:
        InspectorNotification<BreakpointResolvedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.breakpointResolved"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<BreakpointResolvedEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_12'
    name: >-
      once("Debugger.paused", (message:
      InspectorNotification<PausedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when the virtual machine stopped on breakpoint or exception or any
      other stop criteria.
    syntax:
      content: >-
        function once(event: "Debugger.paused", listener: (message:
        InspectorNotification<PausedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.paused"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<PausedEventDataType>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_13'
    name: 'once("Debugger.resumed", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when the virtual machine resumed execution.
    syntax:
      content: 'function once(event: "Debugger.resumed", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"Debugger.resumed"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_10'
    name: >-
      once("Debugger.scriptFailedToParse", (message:
      InspectorNotification<ScriptFailedToParseEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when virtual machine fails to parse the script.
    syntax:
      content: >-
        function once(event: "Debugger.scriptFailedToParse", listener: (message:
        InspectorNotification<ScriptFailedToParseEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptFailedToParse"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptFailedToParseEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_9'
    name: >-
      once("Debugger.scriptParsed", (message:
      InspectorNotification<ScriptParsedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when virtual machine parses script. This event is also fired for all
      known and uncollected scripts upon enabling debugger.
    syntax:
      content: >-
        function once(event: "Debugger.scriptParsed", listener: (message:
        InspectorNotification<ScriptParsedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptParsed"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptParsedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_17'
    name: >-
      once("HeapProfiler.addHeapSnapshotChunk", (message:
      InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "HeapProfiler.addHeapSnapshotChunk", listener:
        (message: InspectorNotification<AddHeapSnapshotChunkEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.addHeapSnapshotChunk"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_21'
    name: >-
      once("HeapProfiler.heapStatsUpdate", (message:
      InspectorNotification<HeapStatsUpdateEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend may send update for
      one or more fragments
    syntax:
      content: >-
        function once(event: "HeapProfiler.heapStatsUpdate", listener: (message:
        InspectorNotification<HeapStatsUpdateEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.heapStatsUpdate"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<HeapStatsUpdateEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_20'
    name: >-
      once("HeapProfiler.lastSeenObjectId", (message:
      InspectorNotification<LastSeenObjectIdEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend regularly sends a
      current value for last seen object id and corresponding timestamp. If the
      were changes in the heap since last event then one or more heapStatsUpdate
      events will be sent before a new lastSeenObjectId event.
    syntax:
      content: >-
        function once(event: "HeapProfiler.lastSeenObjectId", listener:
        (message: InspectorNotification<LastSeenObjectIdEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.lastSeenObjectId"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<LastSeenObjectIdEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_19'
    name: >-
      once("HeapProfiler.reportHeapSnapshotProgress", (message:
      InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "HeapProfiler.reportHeapSnapshotProgress",
        listener: (message:
        InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.reportHeapSnapshotProgress"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReportHeapSnapshotProgressEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_18'
    name: 'once("HeapProfiler.resetProfiles", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: "HeapProfiler.resetProfiles", listener: () => void)'
      parameters:
        - id: event
          type:
            - '"HeapProfiler.resetProfiles"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_1'
    name: >-
      once("inspectorNotification", (message: InspectorNotification<__type>) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Emitted when any notification from the V8 Inspector is received.
    syntax:
      content: >-
        function once(event: "inspectorNotification", listener: (message:
        InspectorNotification<__type>) => void)
      parameters:
        - id: event
          type:
            - '"inspectorNotification"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<__type>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_27'
    name: 'once("NodeRuntime.waitingForDisconnect", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This event is fired instead of `Runtime.executionContextDestroyed` when
      enabled.
      It is fired when the Node process finished all code execution and is
      waiting for all frontends to disconnect.
    syntax:
      content: >-
        function once(event: "NodeRuntime.waitingForDisconnect", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"NodeRuntime.waitingForDisconnect"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_22'
    name: >-
      once("NodeTracing.dataCollected", (message:
      InspectorNotification<DataCollectedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Contains an bucket of collected trace events.
    syntax:
      content: >-
        function once(event: "NodeTracing.dataCollected", listener: (message:
        InspectorNotification<DataCollectedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.dataCollected"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DataCollectedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_23'
    name: 'once("NodeTracing.tracingComplete", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Signals that tracing is stopped and there is no trace buffers pending
      flush, all data were

      delivered via dataCollected events.
    syntax:
      content: >-
        function once(event: "NodeTracing.tracingComplete", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.tracingComplete"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_24'
    name: >-
      once("NodeWorker.attachedToWorker", (message:
      InspectorNotification<AttachedToWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when attached to a worker.
    syntax:
      content: >-
        function once(event: "NodeWorker.attachedToWorker", listener: (message:
        InspectorNotification<AttachedToWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.attachedToWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<AttachedToWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_25'
    name: >-
      once("NodeWorker.detachedFromWorker", (message:
      InspectorNotification<DetachedFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when detached from the worker.
    syntax:
      content: >-
        function once(event: "NodeWorker.detachedFromWorker", listener:
        (message: InspectorNotification<DetachedFromWorkerEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.detachedFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DetachedFromWorkerEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_26'
    name: >-
      once("NodeWorker.receivedMessageFromWorker", (message:
      InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Notifies about a new protocol message received from the session
      (session ID is provided in attachedToWorker notification).
    syntax:
      content: >-
        function once(event: "NodeWorker.receivedMessageFromWorker", listener:
        (message: InspectorNotification<ReceivedMessageFromWorkerEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.receivedMessageFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReceivedMessageFromWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_16'
    name: >-
      once("Profiler.consoleProfileFinished", (message:
      InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function once(event: "Profiler.consoleProfileFinished", listener:
        (message: InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileFinished"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_15'
    name: >-
      once("Profiler.consoleProfileStarted", (message:
      InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sent when new profile recording is started using console.profile() call.
    syntax:
      content: >-
        function once(event: "Profiler.consoleProfileStarted", listener:
        (message: InspectorNotification<ConsoleProfileStartedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileStarted"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileStartedEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_7'
    name: >-
      once("Runtime.consoleAPICalled", (message:
      InspectorNotification<ConsoleAPICalledEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when console API was called.
    syntax:
      content: >-
        function once(event: "Runtime.consoleAPICalled", listener: (message:
        InspectorNotification<ConsoleAPICalledEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.consoleAPICalled"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ConsoleAPICalledEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_6'
    name: >-
      once("Runtime.exceptionRevoked", (message:
      InspectorNotification<ExceptionRevokedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when unhandled exception was revoked.
    syntax:
      content: >-
        function once(event: "Runtime.exceptionRevoked", listener: (message:
        InspectorNotification<ExceptionRevokedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionRevoked"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionRevokedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_5'
    name: >-
      once("Runtime.exceptionThrown", (message:
      InspectorNotification<ExceptionThrownEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when exception was thrown and unhandled.
    syntax:
      content: >-
        function once(event: "Runtime.exceptionThrown", listener: (message:
        InspectorNotification<ExceptionThrownEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionThrown"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionThrownEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_2'
    name: >-
      once("Runtime.executionContextCreated", (message:
      InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new execution context is created.
    syntax:
      content: >-
        function once(event: "Runtime.executionContextCreated", listener:
        (message: InspectorNotification<ExecutionContextCreatedEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextCreated"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextCreatedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_3'
    name: >-
      once("Runtime.executionContextDestroyed", (message:
      InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when execution context is destroyed.
    syntax:
      content: >-
        function once(event: "Runtime.executionContextDestroyed", listener:
        (message: InspectorNotification<ExecutionContextDestroyedEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextDestroyed"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextDestroyedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_4'
    name: 'once("Runtime.executionContextsCleared", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when all executionContexts were cleared in browser
    syntax:
      content: >-
        function once(event: "Runtime.executionContextsCleared", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextsCleared"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once_8'
    name: >-
      once("Runtime.inspectRequested", (message:
      InspectorNotification<InspectRequestedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Issued when object should be inspected (for example, as a result of
      inspect() command line API call).
    syntax:
      content: >-
        function once(event: "Runtime.inspectRequested", listener: (message:
        InspectorNotification<InspectRequestedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.inspectRequested"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<InspectRequestedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.once'
    name: 'once(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function once(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_80'
    name: 'post("Console.clearMessages", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Does nothing.
    syntax:
      content: >-
        function post(method: "Console.clearMessages", callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Console.clearMessages"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_79'
    name: 'post("Console.disable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disables console domain, prevents further console messages from being
      reported to the client.
    syntax:
      content: >-
        function post(method: "Console.disable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Console.disable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_78'
    name: 'post("Console.enable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables console domain, sends the messages collected so far to the client
      by means of the <code>messageAdded</code> notification.
    syntax:
      content: >-
        function post(method: "Console.enable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Console.enable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_43'
    name: >-
      post("Debugger.continueToLocation",
      Debugger.ContinueToLocationParameterType, undefined | (err: Error | null)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Continues execution until specific location is reached.
    syntax:
      content: >-
        function post(method: "Debugger.continueToLocation", params?:
        Debugger.ContinueToLocationParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.continueToLocation"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.ContinueToLocationParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_44'
    name: >-
      post("Debugger.continueToLocation", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.continueToLocation", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.continueToLocation"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_30'
    name: 'post("Debugger.disable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Disables debugger for given page.
    syntax:
      content: >-
        function post(method: "Debugger.disable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.disable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_29'
    name: >-
      post("Debugger.enable", undefined | (err: Error | null, params:
      EnableReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables debugger for the given page. Clients should not assume that the
      debugging has been enabled until the result for this command is received.
    syntax:
      content: >-
        function post(method: "Debugger.enable", callback?: undefined | (err:
        Error | null, params: EnableReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.enable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null, params: EnableReturnType) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_66'
    name: >-
      post("Debugger.evaluateOnCallFrame",
      Debugger.EvaluateOnCallFrameParameterType, undefined | (err: Error | null,
      params: EvaluateOnCallFrameReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Evaluates expression on a given call frame.
    syntax:
      content: >-
        function post(method: "Debugger.evaluateOnCallFrame", params?:
        Debugger.EvaluateOnCallFrameParameterType, callback?: undefined | (err:
        Error | null, params: EvaluateOnCallFrameReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.evaluateOnCallFrame"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.EvaluateOnCallFrameParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              EvaluateOnCallFrameReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_67'
    name: >-
      post("Debugger.evaluateOnCallFrame", undefined | (err: Error | null,
      params: EvaluateOnCallFrameReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.evaluateOnCallFrame", callback?:
        undefined | (err: Error | null, params: EvaluateOnCallFrameReturnType)
        => void)
      parameters:
        - id: method
          type:
            - '"Debugger.evaluateOnCallFrame"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              EvaluateOnCallFrameReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_41'
    name: >-
      post("Debugger.getPossibleBreakpoints",
      Debugger.GetPossibleBreakpointsParameterType, undefined | (err: Error |
      null, params: GetPossibleBreakpointsReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns possible locations for breakpoint. scriptId in start and end range
      locations should be the same.
    syntax:
      content: >-
        function post(method: "Debugger.getPossibleBreakpoints", params?:
        Debugger.GetPossibleBreakpointsParameterType, callback?: undefined |
        (err: Error | null, params: GetPossibleBreakpointsReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.getPossibleBreakpoints"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.GetPossibleBreakpointsParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GetPossibleBreakpointsReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_42'
    name: >-
      post("Debugger.getPossibleBreakpoints", undefined | (err: Error | null,
      params: GetPossibleBreakpointsReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.getPossibleBreakpoints", callback?:
        undefined | (err: Error | null, params:
        GetPossibleBreakpointsReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.getPossibleBreakpoints"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GetPossibleBreakpointsReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_62'
    name: >-
      post("Debugger.getScriptSource", Debugger.GetScriptSourceParameterType,
      undefined | (err: Error | null, params: GetScriptSourceReturnType) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns source for the script with given id.
    syntax:
      content: >-
        function post(method: "Debugger.getScriptSource", params?:
        Debugger.GetScriptSourceParameterType, callback?: undefined | (err:
        Error | null, params: GetScriptSourceReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.getScriptSource"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.GetScriptSourceParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetScriptSourceReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_63'
    name: >-
      post("Debugger.getScriptSource", undefined | (err: Error | null, params:
      GetScriptSourceReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.getScriptSource", callback?: undefined |
        (err: Error | null, params: GetScriptSourceReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.getScriptSource"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetScriptSourceReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_54'
    name: >-
      post("Debugger.getStackTrace", Debugger.GetStackTraceParameterType,
      undefined | (err: Error | null, params: GetStackTraceReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns stack trace with given <code>stackTraceId</code>.
    syntax:
      content: >-
        function post(method: "Debugger.getStackTrace", params?:
        Debugger.GetStackTraceParameterType, callback?: undefined | (err: Error
        | null, params: GetStackTraceReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.getStackTrace"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.GetStackTraceParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetStackTraceReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_55'
    name: >-
      post("Debugger.getStackTrace", undefined | (err: Error | null, params:
      GetStackTraceReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.getStackTrace", callback?: undefined |
        (err: Error | null, params: GetStackTraceReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.getStackTrace"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetStackTraceReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_51'
    name: 'post("Debugger.pause", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Stops on the next JavaScript statement.
    syntax:
      content: >-
        function post(method: "Debugger.pause", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.pause"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_45'
    name: >-
      post("Debugger.pauseOnAsyncCall", Debugger.PauseOnAsyncCallParameterType,
      undefined | (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.pauseOnAsyncCall", params?:
        Debugger.PauseOnAsyncCallParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.pauseOnAsyncCall"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.PauseOnAsyncCallParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_46'
    name: 'post("Debugger.pauseOnAsyncCall", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.pauseOnAsyncCall", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.pauseOnAsyncCall"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_39'
    name: >-
      post("Debugger.removeBreakpoint", Debugger.RemoveBreakpointParameterType,
      undefined | (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes JavaScript breakpoint.
    syntax:
      content: >-
        function post(method: "Debugger.removeBreakpoint", params?:
        Debugger.RemoveBreakpointParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.removeBreakpoint"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.RemoveBreakpointParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_40'
    name: 'post("Debugger.removeBreakpoint", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.removeBreakpoint", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.removeBreakpoint"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_60'
    name: >-
      post("Debugger.restartFrame", Debugger.RestartFrameParameterType,
      undefined | (err: Error | null, params: RestartFrameReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Restarts particular call frame from the beginning.
    syntax:
      content: >-
        function post(method: "Debugger.restartFrame", params?:
        Debugger.RestartFrameParameterType, callback?: undefined | (err: Error |
        null, params: RestartFrameReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.restartFrame"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.RestartFrameParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: RestartFrameReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_61'
    name: >-
      post("Debugger.restartFrame", undefined | (err: Error | null, params:
      RestartFrameReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.restartFrame", callback?: undefined |
        (err: Error | null, params: RestartFrameReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.restartFrame"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: RestartFrameReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_53'
    name: 'post("Debugger.resume", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Resumes JavaScript execution.
    syntax:
      content: >-
        function post(method: "Debugger.resume", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.resume"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_52'
    name: >-
      post("Debugger.scheduleStepIntoAsync", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This method is deprecated - use Debugger.stepInto with breakOnAsyncCall
      and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async
      task if any is scheduled before next pause. Returns success when async
      task is actually scheduled, returns error if no task were scheduled or
      another scheduleStepIntoAsync was called.
    syntax:
      content: >-
        function post(method: "Debugger.scheduleStepIntoAsync", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.scheduleStepIntoAsync"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_56'
    name: >-
      post("Debugger.searchInContent", Debugger.SearchInContentParameterType,
      undefined | (err: Error | null, params: SearchInContentReturnType) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Searches for given string in script content.
    syntax:
      content: >-
        function post(method: "Debugger.searchInContent", params?:
        Debugger.SearchInContentParameterType, callback?: undefined | (err:
        Error | null, params: SearchInContentReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.searchInContent"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SearchInContentParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: SearchInContentReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_57'
    name: >-
      post("Debugger.searchInContent", undefined | (err: Error | null, params:
      SearchInContentReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.searchInContent", callback?: undefined |
        (err: Error | null, params: SearchInContentReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.searchInContent"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: SearchInContentReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_72'
    name: >-
      post("Debugger.setAsyncCallStackDepth",
      Debugger.SetAsyncCallStackDepthParameterType, undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Enables or disables async call stacks tracking.
    syntax:
      content: >-
        function post(method: "Debugger.setAsyncCallStackDepth", params?:
        Debugger.SetAsyncCallStackDepthParameterType, callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setAsyncCallStackDepth"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetAsyncCallStackDepthParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_73'
    name: >-
      post("Debugger.setAsyncCallStackDepth", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setAsyncCallStackDepth", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setAsyncCallStackDepth"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_76'
    name: >-
      post("Debugger.setBlackboxedRanges",
      Debugger.SetBlackboxedRangesParameterType, undefined | (err: Error | null)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Makes backend skip steps in the script in blackboxed ranges. VM will try
      leave blacklisted scripts by performing 'step in' several times, finally
      resorting to 'step out' if unsuccessful. Positions array contains
      positions where blackbox state is changed. First interval isn't
      blackboxed. Array should be sorted.
    syntax:
      content: >-
        function post(method: "Debugger.setBlackboxedRanges", params?:
        Debugger.SetBlackboxedRangesParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBlackboxedRanges"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetBlackboxedRangesParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_77'
    name: >-
      post("Debugger.setBlackboxedRanges", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setBlackboxedRanges", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBlackboxedRanges"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_74'
    name: >-
      post("Debugger.setBlackboxPatterns",
      Debugger.SetBlackboxPatternsParameterType, undefined | (err: Error | null)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Replace previous blackbox patterns with passed ones. Forces backend to
      skip stepping/pausing in scripts with url matching one of the patterns. VM
      will try to leave blackboxed script by performing 'step in' several times,
      finally resorting to 'step out' if unsuccessful.
    syntax:
      content: >-
        function post(method: "Debugger.setBlackboxPatterns", params?:
        Debugger.SetBlackboxPatternsParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBlackboxPatterns"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetBlackboxPatternsParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_75'
    name: >-
      post("Debugger.setBlackboxPatterns", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setBlackboxPatterns", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBlackboxPatterns"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_37'
    name: >-
      post("Debugger.setBreakpoint", Debugger.SetBreakpointParameterType,
      undefined | (err: Error | null, params: SetBreakpointReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sets JavaScript breakpoint at a given location.
    syntax:
      content: >-
        function post(method: "Debugger.setBreakpoint", params?:
        Debugger.SetBreakpointParameterType, callback?: undefined | (err: Error
        | null, params: SetBreakpointReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBreakpoint"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetBreakpointParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: SetBreakpointReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_38'
    name: >-
      post("Debugger.setBreakpoint", undefined | (err: Error | null, params:
      SetBreakpointReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setBreakpoint", callback?: undefined |
        (err: Error | null, params: SetBreakpointReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBreakpoint"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: SetBreakpointReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_35'
    name: >-
      post("Debugger.setBreakpointByUrl",
      Debugger.SetBreakpointByUrlParameterType, undefined | (err: Error | null,
      params: SetBreakpointByUrlReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets JavaScript breakpoint at given location specified either by URL or
      URL regex. Once this command is issued, all existing parsed scripts will
      have breakpoints resolved and returned in <code>locations</code> property.
      Further matching script parsing will result in subsequent
      <code>breakpointResolved</code> events issued. This logical breakpoint
      will survive page reloads.
    syntax:
      content: >-
        function post(method: "Debugger.setBreakpointByUrl", params?:
        Debugger.SetBreakpointByUrlParameterType, callback?: undefined | (err:
        Error | null, params: SetBreakpointByUrlReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBreakpointByUrl"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetBreakpointByUrlParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              SetBreakpointByUrlReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_36'
    name: >-
      post("Debugger.setBreakpointByUrl", undefined | (err: Error | null,
      params: SetBreakpointByUrlReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setBreakpointByUrl", callback?:
        undefined | (err: Error | null, params: SetBreakpointByUrlReturnType) =>
        void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBreakpointByUrl"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              SetBreakpointByUrlReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_31'
    name: >-
      post("Debugger.setBreakpointsActive",
      Debugger.SetBreakpointsActiveParameterType, undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Activates / deactivates all breakpoints on the page.
    syntax:
      content: >-
        function post(method: "Debugger.setBreakpointsActive", params?:
        Debugger.SetBreakpointsActiveParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBreakpointsActive"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetBreakpointsActiveParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_32'
    name: >-
      post("Debugger.setBreakpointsActive", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setBreakpointsActive", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setBreakpointsActive"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_64'
    name: >-
      post("Debugger.setPauseOnExceptions",
      Debugger.SetPauseOnExceptionsParameterType, undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Defines pause on exceptions state. Can be set to stop on all exceptions,
      uncaught exceptions or no exceptions. Initial pause on exceptions state is
      <code>none</code>.
    syntax:
      content: >-
        function post(method: "Debugger.setPauseOnExceptions", params?:
        Debugger.SetPauseOnExceptionsParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setPauseOnExceptions"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetPauseOnExceptionsParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_65'
    name: >-
      post("Debugger.setPauseOnExceptions", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setPauseOnExceptions", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setPauseOnExceptions"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_70'
    name: >-
      post("Debugger.setReturnValue", Debugger.SetReturnValueParameterType,
      undefined | (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Changes return value in top frame. Available only at return break
      position.
    syntax:
      content: >-
        function post(method: "Debugger.setReturnValue", params?:
        Debugger.SetReturnValueParameterType, callback?: undefined | (err: Error
        | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setReturnValue"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetReturnValueParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_71'
    name: 'post("Debugger.setReturnValue", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setReturnValue", callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setReturnValue"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_58'
    name: >-
      post("Debugger.setScriptSource", Debugger.SetScriptSourceParameterType,
      undefined | (err: Error | null, params: SetScriptSourceReturnType) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Edits JavaScript source live.
    syntax:
      content: >-
        function post(method: "Debugger.setScriptSource", params?:
        Debugger.SetScriptSourceParameterType, callback?: undefined | (err:
        Error | null, params: SetScriptSourceReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setScriptSource"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetScriptSourceParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: SetScriptSourceReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_59'
    name: >-
      post("Debugger.setScriptSource", undefined | (err: Error | null, params:
      SetScriptSourceReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setScriptSource", callback?: undefined |
        (err: Error | null, params: SetScriptSourceReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setScriptSource"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: SetScriptSourceReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_33'
    name: >-
      post("Debugger.setSkipAllPauses", Debugger.SetSkipAllPausesParameterType,
      undefined | (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Makes page not interrupt on any pauses (breakpoint, exception, dom
      exception etc).
    syntax:
      content: >-
        function post(method: "Debugger.setSkipAllPauses", params?:
        Debugger.SetSkipAllPausesParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setSkipAllPauses"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetSkipAllPausesParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_34'
    name: 'post("Debugger.setSkipAllPauses", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setSkipAllPauses", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setSkipAllPauses"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_68'
    name: >-
      post("Debugger.setVariableValue", Debugger.SetVariableValueParameterType,
      undefined | (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Changes value of variable in a callframe. Object-based scopes are not
      supported and must be mutated manually.
    syntax:
      content: >-
        function post(method: "Debugger.setVariableValue", params?:
        Debugger.SetVariableValueParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setVariableValue"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Debugger.SetVariableValueParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_69'
    name: 'post("Debugger.setVariableValue", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.setVariableValue", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.setVariableValue"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_48'
    name: >-
      post("Debugger.stepInto", Debugger.StepIntoParameterType, undefined |
      (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Steps into the function call.
    syntax:
      content: >-
        function post(method: "Debugger.stepInto", params?:
        Debugger.StepIntoParameterType, callback?: undefined | (err: Error |
        null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.stepInto"'
          description: ''
        - id: params
          type:
            - '@azure/abort-controller.inspector.Debugger.StepIntoParameterType'
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_49'
    name: 'post("Debugger.stepInto", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Debugger.stepInto", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.stepInto"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_50'
    name: 'post("Debugger.stepOut", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Steps out of the function call.
    syntax:
      content: >-
        function post(method: "Debugger.stepOut", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.stepOut"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_47'
    name: 'post("Debugger.stepOver", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Steps over the statement.
    syntax:
      content: >-
        function post(method: "Debugger.stepOver", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Debugger.stepOver"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_106'
    name: >-
      post("HeapProfiler.addInspectedHeapObject",
      HeapProfiler.AddInspectedHeapObjectParameterType, undefined | (err: Error
      | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables console to refer to the node with given id via $x (see Command
      Line API for more details $x functions).
    syntax:
      content: >-
        function post(method: "HeapProfiler.addInspectedHeapObject", params?:
        HeapProfiler.AddInspectedHeapObjectParameterType, callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.addInspectedHeapObject"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.AddInspectedHeapObjectParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_107'
    name: >-
      post("HeapProfiler.addInspectedHeapObject", undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.addInspectedHeapObject", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.addInspectedHeapObject"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_103'
    name: >-
      post("HeapProfiler.collectGarbage", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.collectGarbage", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.collectGarbage"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_96'
    name: 'post("HeapProfiler.disable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.disable", callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.disable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_95'
    name: 'post("HeapProfiler.enable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.enable", callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.enable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_108'
    name: >-
      post("HeapProfiler.getHeapObjectId",
      HeapProfiler.GetHeapObjectIdParameterType, undefined | (err: Error | null,
      params: GetHeapObjectIdReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.getHeapObjectId", params?:
        HeapProfiler.GetHeapObjectIdParameterType, callback?: undefined | (err:
        Error | null, params: GetHeapObjectIdReturnType) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.getHeapObjectId"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.GetHeapObjectIdParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetHeapObjectIdReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_109'
    name: >-
      post("HeapProfiler.getHeapObjectId", undefined | (err: Error | null,
      params: GetHeapObjectIdReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.getHeapObjectId", callback?:
        undefined | (err: Error | null, params: GetHeapObjectIdReturnType) =>
        void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.getHeapObjectId"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetHeapObjectIdReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_104'
    name: >-
      post("HeapProfiler.getObjectByHeapObjectId",
      HeapProfiler.GetObjectByHeapObjectIdParameterType, undefined | (err: Error
      | null, params: GetObjectByHeapObjectIdReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.getObjectByHeapObjectId", params?:
        HeapProfiler.GetObjectByHeapObjectIdParameterType, callback?: undefined
        | (err: Error | null, params: GetObjectByHeapObjectIdReturnType) =>
        void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.getObjectByHeapObjectId"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.GetObjectByHeapObjectIdParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GetObjectByHeapObjectIdReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_105'
    name: >-
      post("HeapProfiler.getObjectByHeapObjectId", undefined | (err: Error |
      null, params: GetObjectByHeapObjectIdReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.getObjectByHeapObjectId", callback?:
        undefined | (err: Error | null, params:
        GetObjectByHeapObjectIdReturnType) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.getObjectByHeapObjectId"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GetObjectByHeapObjectIdReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_113'
    name: >-
      post("HeapProfiler.getSamplingProfile", undefined | (err: Error | null,
      params: GetSamplingProfileReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.getSamplingProfile", callback?:
        undefined | (err: Error | null, params: GetSamplingProfileReturnType) =>
        void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.getSamplingProfile"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GetSamplingProfileReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_110'
    name: >-
      post("HeapProfiler.startSampling",
      HeapProfiler.StartSamplingParameterType, undefined | (err: Error | null)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.startSampling", params?:
        HeapProfiler.StartSamplingParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.startSampling"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.StartSamplingParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_111'
    name: >-
      post("HeapProfiler.startSampling", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.startSampling", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.startSampling"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_97'
    name: >-
      post("HeapProfiler.startTrackingHeapObjects",
      HeapProfiler.StartTrackingHeapObjectsParameterType, undefined | (err:
      Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.startTrackingHeapObjects", params?:
        HeapProfiler.StartTrackingHeapObjectsParameterType, callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.startTrackingHeapObjects"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.StartTrackingHeapObjectsParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_98'
    name: >-
      post("HeapProfiler.startTrackingHeapObjects", undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.startTrackingHeapObjects",
        callback?: undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.startTrackingHeapObjects"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_112'
    name: >-
      post("HeapProfiler.stopSampling", undefined | (err: Error | null, params:
      StopSamplingReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.stopSampling", callback?: undefined
        | (err: Error | null, params: StopSamplingReturnType) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.stopSampling"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: StopSamplingReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_99'
    name: >-
      post("HeapProfiler.stopTrackingHeapObjects",
      HeapProfiler.StopTrackingHeapObjectsParameterType, undefined | (err: Error
      | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.stopTrackingHeapObjects", params?:
        HeapProfiler.StopTrackingHeapObjectsParameterType, callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.stopTrackingHeapObjects"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.StopTrackingHeapObjectsParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_100'
    name: >-
      post("HeapProfiler.stopTrackingHeapObjects", undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.stopTrackingHeapObjects", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.stopTrackingHeapObjects"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_101'
    name: >-
      post("HeapProfiler.takeHeapSnapshot",
      HeapProfiler.TakeHeapSnapshotParameterType, undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.takeHeapSnapshot", params?:
        HeapProfiler.TakeHeapSnapshotParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.takeHeapSnapshot"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.HeapProfiler.TakeHeapSnapshotParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_102'
    name: >-
      post("HeapProfiler.takeHeapSnapshot", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "HeapProfiler.takeHeapSnapshot", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"HeapProfiler.takeHeapSnapshot"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_125'
    name: >-
      post("NodeRuntime.notifyWhenWaitingForDisconnect",
      NodeRuntime.NotifyWhenWaitingForDisconnectParameterType, undefined | (err:
      Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Enable the `NodeRuntime.waitingForDisconnect`.
    syntax:
      content: >-
        function post(method: "NodeRuntime.notifyWhenWaitingForDisconnect",
        params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType,
        callback?: undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeRuntime.notifyWhenWaitingForDisconnect"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.NodeRuntime.NotifyWhenWaitingForDisconnectParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_126'
    name: >-
      post("NodeRuntime.notifyWhenWaitingForDisconnect", undefined | (err: Error
      | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "NodeRuntime.notifyWhenWaitingForDisconnect",
        callback?: undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeRuntime.notifyWhenWaitingForDisconnect"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_114'
    name: >-
      post("NodeTracing.getCategories", undefined | (err: Error | null, params:
      GetCategoriesReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets supported tracing categories.
    syntax:
      content: >-
        function post(method: "NodeTracing.getCategories", callback?: undefined
        | (err: Error | null, params: GetCategoriesReturnType) => void)
      parameters:
        - id: method
          type:
            - '"NodeTracing.getCategories"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetCategoriesReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_115'
    name: >-
      post("NodeTracing.start", NodeTracing.StartParameterType, undefined |
      (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Start trace events collection.
    syntax:
      content: >-
        function post(method: "NodeTracing.start", params?:
        NodeTracing.StartParameterType, callback?: undefined | (err: Error |
        null) => void)
      parameters:
        - id: method
          type:
            - '"NodeTracing.start"'
          description: ''
        - id: params
          type:
            - '@azure/abort-controller.inspector.NodeTracing.StartParameterType'
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_116'
    name: 'post("NodeTracing.start", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "NodeTracing.start", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeTracing.start"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_117'
    name: 'post("NodeTracing.stop", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Stop trace events collection. Remaining collected events will be sent as a
      sequence of

      dataCollected events followed by tracingComplete event.
    syntax:
      content: >-
        function post(method: "NodeTracing.stop", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeTracing.stop"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_123'
    name: >-
      post("NodeWorker.detach", NodeWorker.DetachParameterType, undefined |
      (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Detached from the worker with given sessionId.
    syntax:
      content: >-
        function post(method: "NodeWorker.detach", params?:
        NodeWorker.DetachParameterType, callback?: undefined | (err: Error |
        null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.detach"'
          description: ''
        - id: params
          type:
            - '@azure/abort-controller.inspector.NodeWorker.DetachParameterType'
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_124'
    name: 'post("NodeWorker.detach", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "NodeWorker.detach", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.detach"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_122'
    name: 'post("NodeWorker.disable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Detaches from all running workers and disables attaching to new workers as
      they are started.
    syntax:
      content: >-
        function post(method: "NodeWorker.disable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.disable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_120'
    name: >-
      post("NodeWorker.enable", NodeWorker.EnableParameterType, undefined |
      (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Instructs the inspector to attach to running workers. Will also attach to
      new workers

      as they start
    syntax:
      content: >-
        function post(method: "NodeWorker.enable", params?:
        NodeWorker.EnableParameterType, callback?: undefined | (err: Error |
        null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.enable"'
          description: ''
        - id: params
          type:
            - '@azure/abort-controller.inspector.NodeWorker.EnableParameterType'
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_121'
    name: 'post("NodeWorker.enable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "NodeWorker.enable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.enable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_118'
    name: >-
      post("NodeWorker.sendMessageToWorker",
      NodeWorker.SendMessageToWorkerParameterType, undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sends protocol message over session with given id.
    syntax:
      content: >-
        function post(method: "NodeWorker.sendMessageToWorker", params?:
        NodeWorker.SendMessageToWorkerParameterType, callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.sendMessageToWorker"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.NodeWorker.SendMessageToWorkerParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_119'
    name: >-
      post("NodeWorker.sendMessageToWorker", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "NodeWorker.sendMessageToWorker", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"NodeWorker.sendMessageToWorker"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_82'
    name: 'post("Profiler.disable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Profiler.disable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.disable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_81'
    name: 'post("Profiler.enable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Profiler.enable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.enable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_91'
    name: >-
      post("Profiler.getBestEffortCoverage", undefined | (err: Error | null,
      params: GetBestEffortCoverageReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Collect coverage data for the current isolate. The coverage data may be
      incomplete due to garbage collection.
    syntax:
      content: >-
        function post(method: "Profiler.getBestEffortCoverage", callback?:
        undefined | (err: Error | null, params: GetBestEffortCoverageReturnType)
        => void)
      parameters:
        - id: method
          type:
            - '"Profiler.getBestEffortCoverage"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GetBestEffortCoverageReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_83'
    name: >-
      post("Profiler.setSamplingInterval",
      Profiler.SetSamplingIntervalParameterType, undefined | (err: Error | null)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Changes CPU profiler sampling interval. Must be called before CPU profiles
      recording started.
    syntax:
      content: >-
        function post(method: "Profiler.setSamplingInterval", params?:
        Profiler.SetSamplingIntervalParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.setSamplingInterval"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Profiler.SetSamplingIntervalParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_84'
    name: >-
      post("Profiler.setSamplingInterval", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Profiler.setSamplingInterval", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.setSamplingInterval"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_85'
    name: 'post("Profiler.start", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Profiler.start", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.start"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_87'
    name: >-
      post("Profiler.startPreciseCoverage",
      Profiler.StartPreciseCoverageParameterType, undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enable precise code coverage. Coverage data for JavaScript executed before
      enabling precise code coverage may be incomplete. Enabling prevents
      running optimized code and resets execution counters.
    syntax:
      content: >-
        function post(method: "Profiler.startPreciseCoverage", params?:
        Profiler.StartPreciseCoverageParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.startPreciseCoverage"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Profiler.StartPreciseCoverageParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_88'
    name: >-
      post("Profiler.startPreciseCoverage", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Profiler.startPreciseCoverage", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.startPreciseCoverage"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_92'
    name: 'post("Profiler.startTypeProfile", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Enable type profile.
    syntax:
      content: >-
        function post(method: "Profiler.startTypeProfile", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.startTypeProfile"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_86'
    name: >-
      post("Profiler.stop", undefined | (err: Error | null, params:
      StopReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Profiler.stop", callback?: undefined | (err:
        Error | null, params: StopReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.stop"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null, params: StopReturnType) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_89'
    name: >-
      post("Profiler.stopPreciseCoverage", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disable precise code coverage. Disabling releases unnecessary execution
      count records and allows executing optimized code.
    syntax:
      content: >-
        function post(method: "Profiler.stopPreciseCoverage", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.stopPreciseCoverage"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_93'
    name: 'post("Profiler.stopTypeProfile", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Disable type profile. Disabling releases type profile data collected so
      far.
    syntax:
      content: >-
        function post(method: "Profiler.stopTypeProfile", callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.stopTypeProfile"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_90'
    name: >-
      post("Profiler.takePreciseCoverage", undefined | (err: Error | null,
      params: TakePreciseCoverageReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Collect coverage data for the current isolate, and resets execution
      counters. Precise code coverage needs to have started.
    syntax:
      content: >-
        function post(method: "Profiler.takePreciseCoverage", callback?:
        undefined | (err: Error | null, params: TakePreciseCoverageReturnType)
        => void)
      parameters:
        - id: method
          type:
            - '"Profiler.takePreciseCoverage"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              TakePreciseCoverageReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_94'
    name: >-
      post("Profiler.takeTypeProfile", undefined | (err: Error | null, params:
      TakeTypeProfileReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Collect type profile.
    syntax:
      content: >-
        function post(method: "Profiler.takeTypeProfile", callback?: undefined |
        (err: Error | null, params: TakeTypeProfileReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Profiler.takeTypeProfile"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: TakeTypeProfileReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_5'
    name: >-
      post("Runtime.awaitPromise", Runtime.AwaitPromiseParameterType, undefined
      | (err: Error | null, params: AwaitPromiseReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Add handler to promise with given promise object id.
    syntax:
      content: >-
        function post(method: "Runtime.awaitPromise", params?:
        Runtime.AwaitPromiseParameterType, callback?: undefined | (err: Error |
        null, params: AwaitPromiseReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.awaitPromise"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.AwaitPromiseParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: AwaitPromiseReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_6'
    name: >-
      post("Runtime.awaitPromise", undefined | (err: Error | null, params:
      AwaitPromiseReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.awaitPromise", callback?: undefined |
        (err: Error | null, params: AwaitPromiseReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.awaitPromise"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: AwaitPromiseReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_7'
    name: >-
      post("Runtime.callFunctionOn", Runtime.CallFunctionOnParameterType,
      undefined | (err: Error | null, params: CallFunctionOnReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Calls function with given declaration on the given object. Object group of
      the result is inherited from the target object.
    syntax:
      content: >-
        function post(method: "Runtime.callFunctionOn", params?:
        Runtime.CallFunctionOnParameterType, callback?: undefined | (err: Error
        | null, params: CallFunctionOnReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.callFunctionOn"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.CallFunctionOnParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: CallFunctionOnReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_8'
    name: >-
      post("Runtime.callFunctionOn", undefined | (err: Error | null, params:
      CallFunctionOnReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.callFunctionOn", callback?: undefined |
        (err: Error | null, params: CallFunctionOnReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.callFunctionOn"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: CallFunctionOnReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_21'
    name: >-
      post("Runtime.compileScript", Runtime.CompileScriptParameterType,
      undefined | (err: Error | null, params: CompileScriptReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Compiles expression.
    syntax:
      content: >-
        function post(method: "Runtime.compileScript", params?:
        Runtime.CompileScriptParameterType, callback?: undefined | (err: Error |
        null, params: CompileScriptReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.compileScript"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.CompileScriptParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: CompileScriptReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_22'
    name: >-
      post("Runtime.compileScript", undefined | (err: Error | null, params:
      CompileScriptReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.compileScript", callback?: undefined |
        (err: Error | null, params: CompileScriptReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.compileScript"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: CompileScriptReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_17'
    name: 'post("Runtime.disable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Disables reporting of execution contexts creation.
    syntax:
      content: >-
        function post(method: "Runtime.disable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.disable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_18'
    name: >-
      post("Runtime.discardConsoleEntries", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Discards collected exceptions and console API calls.
    syntax:
      content: >-
        function post(method: "Runtime.discardConsoleEntries", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.discardConsoleEntries"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_16'
    name: 'post("Runtime.enable", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Enables reporting of execution contexts creation by means of
      <code>executionContextCreated</code> event. When the reporting gets
      enabled the event will be sent immediately for each existing execution
      context.
    syntax:
      content: >-
        function post(method: "Runtime.enable", callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.enable"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_3'
    name: >-
      post("Runtime.evaluate", Runtime.EvaluateParameterType, undefined | (err:
      Error | null, params: EvaluateReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Evaluates expression on global object.
    syntax:
      content: >-
        function post(method: "Runtime.evaluate", params?:
        Runtime.EvaluateParameterType, callback?: undefined | (err: Error |
        null, params: EvaluateReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.evaluate"'
          description: ''
        - id: params
          type:
            - '@azure/abort-controller.inspector.Runtime.EvaluateParameterType'
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: EvaluateReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_4'
    name: >-
      post("Runtime.evaluate", undefined | (err: Error | null, params:
      EvaluateReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.evaluate", callback?: undefined | (err:
        Error | null, params: EvaluateReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.evaluate"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: EvaluateReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_9'
    name: >-
      post("Runtime.getProperties", Runtime.GetPropertiesParameterType,
      undefined | (err: Error | null, params: GetPropertiesReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns properties of a given object. Object group of the result is
      inherited from the target object.
    syntax:
      content: >-
        function post(method: "Runtime.getProperties", params?:
        Runtime.GetPropertiesParameterType, callback?: undefined | (err: Error |
        null, params: GetPropertiesReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.getProperties"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.GetPropertiesParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetPropertiesReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_10'
    name: >-
      post("Runtime.getProperties", undefined | (err: Error | null, params:
      GetPropertiesReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.getProperties", callback?: undefined |
        (err: Error | null, params: GetPropertiesReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.getProperties"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetPropertiesReturnType)
              => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_27'
    name: >-
      post("Runtime.globalLexicalScopeNames",
      Runtime.GlobalLexicalScopeNamesParameterType, undefined | (err: Error |
      null, params: GlobalLexicalScopeNamesReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Returns all let, const and class variables from global scope.'
    syntax:
      content: >-
        function post(method: "Runtime.globalLexicalScopeNames", params?:
        Runtime.GlobalLexicalScopeNamesParameterType, callback?: undefined |
        (err: Error | null, params: GlobalLexicalScopeNamesReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.globalLexicalScopeNames"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.GlobalLexicalScopeNamesParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GlobalLexicalScopeNamesReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_28'
    name: >-
      post("Runtime.globalLexicalScopeNames", undefined | (err: Error | null,
      params: GlobalLexicalScopeNamesReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.globalLexicalScopeNames", callback?:
        undefined | (err: Error | null, params:
        GlobalLexicalScopeNamesReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.globalLexicalScopeNames"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params:
              GlobalLexicalScopeNamesReturnType) => void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_25'
    name: >-
      post("Runtime.queryObjects", Runtime.QueryObjectsParameterType, undefined
      | (err: Error | null, params: QueryObjectsReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.queryObjects", params?:
        Runtime.QueryObjectsParameterType, callback?: undefined | (err: Error |
        null, params: QueryObjectsReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.queryObjects"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.QueryObjectsParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: QueryObjectsReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_26'
    name: >-
      post("Runtime.queryObjects", undefined | (err: Error | null, params:
      QueryObjectsReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.queryObjects", callback?: undefined |
        (err: Error | null, params: QueryObjectsReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.queryObjects"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: QueryObjectsReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_11'
    name: >-
      post("Runtime.releaseObject", Runtime.ReleaseObjectParameterType,
      undefined | (err: Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Releases remote object with given id.
    syntax:
      content: >-
        function post(method: "Runtime.releaseObject", params?:
        Runtime.ReleaseObjectParameterType, callback?: undefined | (err: Error |
        null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.releaseObject"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.ReleaseObjectParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_12'
    name: 'post("Runtime.releaseObject", undefined | (err: Error | null) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.releaseObject", callback?: undefined |
        (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.releaseObject"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_13'
    name: >-
      post("Runtime.releaseObjectGroup",
      Runtime.ReleaseObjectGroupParameterType, undefined | (err: Error | null)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Releases all remote objects that belong to a given group.
    syntax:
      content: >-
        function post(method: "Runtime.releaseObjectGroup", params?:
        Runtime.ReleaseObjectGroupParameterType, callback?: undefined | (err:
        Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.releaseObjectGroup"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.ReleaseObjectGroupParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_14'
    name: >-
      post("Runtime.releaseObjectGroup", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.releaseObjectGroup", callback?: undefined
        | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.releaseObjectGroup"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_15'
    name: >-
      post("Runtime.runIfWaitingForDebugger", undefined | (err: Error | null) =>
      void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Tells inspected instance to run if it was waiting for debugger to attach.
    syntax:
      content: >-
        function post(method: "Runtime.runIfWaitingForDebugger", callback?:
        undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.runIfWaitingForDebugger"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_23'
    name: >-
      post("Runtime.runScript", Runtime.RunScriptParameterType, undefined |
      (err: Error | null, params: RunScriptReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Runs script with given id in a given context.
    syntax:
      content: >-
        function post(method: "Runtime.runScript", params?:
        Runtime.RunScriptParameterType, callback?: undefined | (err: Error |
        null, params: RunScriptReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.runScript"'
          description: ''
        - id: params
          type:
            - '@azure/abort-controller.inspector.Runtime.RunScriptParameterType'
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: RunScriptReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_24'
    name: >-
      post("Runtime.runScript", undefined | (err: Error | null, params:
      RunScriptReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.runScript", callback?: undefined | (err:
        Error | null, params: RunScriptReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.runScript"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: RunScriptReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_19'
    name: >-
      post("Runtime.setCustomObjectFormatterEnabled",
      Runtime.SetCustomObjectFormatterEnabledParameterType, undefined | (err:
      Error | null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.setCustomObjectFormatterEnabled",
        params?: Runtime.SetCustomObjectFormatterEnabledParameterType,
        callback?: undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.setCustomObjectFormatterEnabled"'
          description: ''
        - id: params
          type:
            - >-
              @azure/abort-controller.inspector.Runtime.SetCustomObjectFormatterEnabledParameterType
          description: ''
          optional: true
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_20'
    name: >-
      post("Runtime.setCustomObjectFormatterEnabled", undefined | (err: Error |
      null) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: "Runtime.setCustomObjectFormatterEnabled",
        callback?: undefined | (err: Error | null) => void)
      parameters:
        - id: method
          type:
            - '"Runtime.setCustomObjectFormatterEnabled"'
          description: ''
        - id: callback
          type:
            - 'undefined | (err: Error | null) => void'
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_2'
    name: >-
      post("Schema.getDomains", undefined | (err: Error | null, params:
      GetDomainsReturnType) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns supported domains.
    syntax:
      content: >-
        function post(method: "Schema.getDomains", callback?: undefined | (err:
        Error | null, params: GetDomainsReturnType) => void)
      parameters:
        - id: method
          type:
            - '"Schema.getDomains"'
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params: GetDomainsReturnType) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post_1'
    name: >-
      post(string, undefined | (err: Error | null, params?: undefined | __type)
      => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function post(method: string, callback?: undefined | (err: Error | null,
        params?: undefined | __type) => void)
      parameters:
        - id: method
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params?: undefined | __type) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.post'
    name: >-
      post(string, undefined | __type, undefined | (err: Error | null, params?:
      undefined | __type) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Posts a message to the inspector back-end. callback will be notified when
      a response is received.

      callback is a function that accepts two optional arguments - error and
      message-specific result.
    syntax:
      content: >-
        function post(method: string, params?: undefined | __type, callback?:
        undefined | (err: Error | null, params?: undefined | __type) => void)
      parameters:
        - id: method
          type:
            - string
          description: ''
        - id: params
          type:
            - undefined | __type
          description: ''
          optional: true
        - id: callback
          type:
            - >-
              undefined | (err: Error | null, params?: undefined | __type) =>
              void
          description: ''
          optional: true
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_14'
    name: >-
      prependListener("Console.messageAdded", (message:
      InspectorNotification<MessageAddedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new console message is added.
    syntax:
      content: >-
        function prependListener(event: "Console.messageAdded", listener:
        (message: InspectorNotification<MessageAddedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Console.messageAdded"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<MessageAddedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_11'
    name: >-
      prependListener("Debugger.breakpointResolved", (message:
      InspectorNotification<BreakpointResolvedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when breakpoint is resolved to an actual script and location.
    syntax:
      content: >-
        function prependListener(event: "Debugger.breakpointResolved", listener:
        (message: InspectorNotification<BreakpointResolvedEventDataType>) =>
        void)
      parameters:
        - id: event
          type:
            - '"Debugger.breakpointResolved"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<BreakpointResolvedEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_12'
    name: >-
      prependListener("Debugger.paused", (message:
      InspectorNotification<PausedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when the virtual machine stopped on breakpoint or exception or any
      other stop criteria.
    syntax:
      content: >-
        function prependListener(event: "Debugger.paused", listener: (message:
        InspectorNotification<PausedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.paused"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<PausedEventDataType>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_13'
    name: 'prependListener("Debugger.resumed", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when the virtual machine resumed execution.
    syntax:
      content: >-
        function prependListener(event: "Debugger.resumed", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"Debugger.resumed"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_10'
    name: >-
      prependListener("Debugger.scriptFailedToParse", (message:
      InspectorNotification<ScriptFailedToParseEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when virtual machine fails to parse the script.
    syntax:
      content: >-
        function prependListener(event: "Debugger.scriptFailedToParse",
        listener: (message:
        InspectorNotification<ScriptFailedToParseEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptFailedToParse"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptFailedToParseEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_9'
    name: >-
      prependListener("Debugger.scriptParsed", (message:
      InspectorNotification<ScriptParsedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when virtual machine parses script. This event is also fired for all
      known and uncollected scripts upon enabling debugger.
    syntax:
      content: >-
        function prependListener(event: "Debugger.scriptParsed", listener:
        (message: InspectorNotification<ScriptParsedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptParsed"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptParsedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_17'
    name: >-
      prependListener("HeapProfiler.addHeapSnapshotChunk", (message:
      InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "HeapProfiler.addHeapSnapshotChunk",
        listener: (message:
        InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.addHeapSnapshotChunk"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_21'
    name: >-
      prependListener("HeapProfiler.heapStatsUpdate", (message:
      InspectorNotification<HeapStatsUpdateEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend may send update for
      one or more fragments
    syntax:
      content: >-
        function prependListener(event: "HeapProfiler.heapStatsUpdate",
        listener: (message: InspectorNotification<HeapStatsUpdateEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.heapStatsUpdate"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<HeapStatsUpdateEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_20'
    name: >-
      prependListener("HeapProfiler.lastSeenObjectId", (message:
      InspectorNotification<LastSeenObjectIdEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend regularly sends a
      current value for last seen object id and corresponding timestamp. If the
      were changes in the heap since last event then one or more heapStatsUpdate
      events will be sent before a new lastSeenObjectId event.
    syntax:
      content: >-
        function prependListener(event: "HeapProfiler.lastSeenObjectId",
        listener: (message:
        InspectorNotification<LastSeenObjectIdEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.lastSeenObjectId"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<LastSeenObjectIdEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_19'
    name: >-
      prependListener("HeapProfiler.reportHeapSnapshotProgress", (message:
      InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event:
        "HeapProfiler.reportHeapSnapshotProgress", listener: (message:
        InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.reportHeapSnapshotProgress"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReportHeapSnapshotProgressEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_18'
    name: 'prependListener("HeapProfiler.resetProfiles", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "HeapProfiler.resetProfiles", listener:
        () => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.resetProfiles"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_1'
    name: >-
      prependListener("inspectorNotification", (message:
      InspectorNotification<__type>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Emitted when any notification from the V8 Inspector is received.
    syntax:
      content: >-
        function prependListener(event: "inspectorNotification", listener:
        (message: InspectorNotification<__type>) => void)
      parameters:
        - id: event
          type:
            - '"inspectorNotification"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<__type>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_27'
    name: 'prependListener("NodeRuntime.waitingForDisconnect", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This event is fired instead of `Runtime.executionContextDestroyed` when
      enabled.
      It is fired when the Node process finished all code execution and is
      waiting for all frontends to disconnect.
    syntax:
      content: >-
        function prependListener(event: "NodeRuntime.waitingForDisconnect",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"NodeRuntime.waitingForDisconnect"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_22'
    name: >-
      prependListener("NodeTracing.dataCollected", (message:
      InspectorNotification<DataCollectedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Contains an bucket of collected trace events.
    syntax:
      content: >-
        function prependListener(event: "NodeTracing.dataCollected", listener:
        (message: InspectorNotification<DataCollectedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.dataCollected"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DataCollectedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_23'
    name: 'prependListener("NodeTracing.tracingComplete", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Signals that tracing is stopped and there is no trace buffers pending
      flush, all data were

      delivered via dataCollected events.
    syntax:
      content: >-
        function prependListener(event: "NodeTracing.tracingComplete", listener:
        () => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.tracingComplete"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_24'
    name: >-
      prependListener("NodeWorker.attachedToWorker", (message:
      InspectorNotification<AttachedToWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when attached to a worker.
    syntax:
      content: >-
        function prependListener(event: "NodeWorker.attachedToWorker", listener:
        (message: InspectorNotification<AttachedToWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.attachedToWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<AttachedToWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_25'
    name: >-
      prependListener("NodeWorker.detachedFromWorker", (message:
      InspectorNotification<DetachedFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when detached from the worker.
    syntax:
      content: >-
        function prependListener(event: "NodeWorker.detachedFromWorker",
        listener: (message:
        InspectorNotification<DetachedFromWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.detachedFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DetachedFromWorkerEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_26'
    name: >-
      prependListener("NodeWorker.receivedMessageFromWorker", (message:
      InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Notifies about a new protocol message received from the session
      (session ID is provided in attachedToWorker notification).
    syntax:
      content: >-
        function prependListener(event: "NodeWorker.receivedMessageFromWorker",
        listener: (message:
        InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.receivedMessageFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReceivedMessageFromWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_16'
    name: >-
      prependListener("Profiler.consoleProfileFinished", (message:
      InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependListener(event: "Profiler.consoleProfileFinished",
        listener: (message:
        InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileFinished"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_15'
    name: >-
      prependListener("Profiler.consoleProfileStarted", (message:
      InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sent when new profile recording is started using console.profile() call.
    syntax:
      content: >-
        function prependListener(event: "Profiler.consoleProfileStarted",
        listener: (message:
        InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileStarted"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileStartedEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_7'
    name: >-
      prependListener("Runtime.consoleAPICalled", (message:
      InspectorNotification<ConsoleAPICalledEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when console API was called.
    syntax:
      content: >-
        function prependListener(event: "Runtime.consoleAPICalled", listener:
        (message: InspectorNotification<ConsoleAPICalledEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.consoleAPICalled"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ConsoleAPICalledEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_6'
    name: >-
      prependListener("Runtime.exceptionRevoked", (message:
      InspectorNotification<ExceptionRevokedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when unhandled exception was revoked.
    syntax:
      content: >-
        function prependListener(event: "Runtime.exceptionRevoked", listener:
        (message: InspectorNotification<ExceptionRevokedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionRevoked"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionRevokedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_5'
    name: >-
      prependListener("Runtime.exceptionThrown", (message:
      InspectorNotification<ExceptionThrownEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when exception was thrown and unhandled.
    syntax:
      content: >-
        function prependListener(event: "Runtime.exceptionThrown", listener:
        (message: InspectorNotification<ExceptionThrownEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionThrown"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionThrownEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_2'
    name: >-
      prependListener("Runtime.executionContextCreated", (message:
      InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new execution context is created.
    syntax:
      content: >-
        function prependListener(event: "Runtime.executionContextCreated",
        listener: (message:
        InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextCreated"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextCreatedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_3'
    name: >-
      prependListener("Runtime.executionContextDestroyed", (message:
      InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when execution context is destroyed.
    syntax:
      content: >-
        function prependListener(event: "Runtime.executionContextDestroyed",
        listener: (message:
        InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextDestroyed"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextDestroyedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_4'
    name: 'prependListener("Runtime.executionContextsCleared", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when all executionContexts were cleared in browser
    syntax:
      content: >-
        function prependListener(event: "Runtime.executionContextsCleared",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextsCleared"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener_8'
    name: >-
      prependListener("Runtime.inspectRequested", (message:
      InspectorNotification<InspectRequestedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Issued when object should be inspected (for example, as a result of
      inspect() command line API call).
    syntax:
      content: >-
        function prependListener(event: "Runtime.inspectRequested", listener:
        (message: InspectorNotification<InspectRequestedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.inspectRequested"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<InspectRequestedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependListener'
    name: 'prependListener(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function prependListener(event: string, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_14'
    name: >-
      prependOnceListener("Console.messageAdded", (message:
      InspectorNotification<MessageAddedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new console message is added.
    syntax:
      content: >-
        function prependOnceListener(event: "Console.messageAdded", listener:
        (message: InspectorNotification<MessageAddedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Console.messageAdded"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<MessageAddedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_11'
    name: >-
      prependOnceListener("Debugger.breakpointResolved", (message:
      InspectorNotification<BreakpointResolvedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when breakpoint is resolved to an actual script and location.
    syntax:
      content: >-
        function prependOnceListener(event: "Debugger.breakpointResolved",
        listener: (message:
        InspectorNotification<BreakpointResolvedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.breakpointResolved"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<BreakpointResolvedEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_12'
    name: >-
      prependOnceListener("Debugger.paused", (message:
      InspectorNotification<PausedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when the virtual machine stopped on breakpoint or exception or any
      other stop criteria.
    syntax:
      content: >-
        function prependOnceListener(event: "Debugger.paused", listener:
        (message: InspectorNotification<PausedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.paused"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<PausedEventDataType>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_13'
    name: 'prependOnceListener("Debugger.resumed", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when the virtual machine resumed execution.
    syntax:
      content: >-
        function prependOnceListener(event: "Debugger.resumed", listener: () =>
        void)
      parameters:
        - id: event
          type:
            - '"Debugger.resumed"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_10'
    name: >-
      prependOnceListener("Debugger.scriptFailedToParse", (message:
      InspectorNotification<ScriptFailedToParseEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Fired when virtual machine fails to parse the script.
    syntax:
      content: >-
        function prependOnceListener(event: "Debugger.scriptFailedToParse",
        listener: (message:
        InspectorNotification<ScriptFailedToParseEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptFailedToParse"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptFailedToParseEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_9'
    name: >-
      prependOnceListener("Debugger.scriptParsed", (message:
      InspectorNotification<ScriptParsedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Fired when virtual machine parses script. This event is also fired for all
      known and uncollected scripts upon enabling debugger.
    syntax:
      content: >-
        function prependOnceListener(event: "Debugger.scriptParsed", listener:
        (message: InspectorNotification<ScriptParsedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Debugger.scriptParsed"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ScriptParsedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_17'
    name: >-
      prependOnceListener("HeapProfiler.addHeapSnapshotChunk", (message:
      InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "HeapProfiler.addHeapSnapshotChunk",
        listener: (message:
        InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.addHeapSnapshotChunk"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<AddHeapSnapshotChunkEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_21'
    name: >-
      prependOnceListener("HeapProfiler.heapStatsUpdate", (message:
      InspectorNotification<HeapStatsUpdateEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend may send update for
      one or more fragments
    syntax:
      content: >-
        function prependOnceListener(event: "HeapProfiler.heapStatsUpdate",
        listener: (message: InspectorNotification<HeapStatsUpdateEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.heapStatsUpdate"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<HeapStatsUpdateEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_20'
    name: >-
      prependOnceListener("HeapProfiler.lastSeenObjectId", (message:
      InspectorNotification<LastSeenObjectIdEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      If heap objects tracking has been started then backend regularly sends a
      current value for last seen object id and corresponding timestamp. If the
      were changes in the heap since last event then one or more heapStatsUpdate
      events will be sent before a new lastSeenObjectId event.
    syntax:
      content: >-
        function prependOnceListener(event: "HeapProfiler.lastSeenObjectId",
        listener: (message:
        InspectorNotification<LastSeenObjectIdEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.lastSeenObjectId"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<LastSeenObjectIdEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_19'
    name: >-
      prependOnceListener("HeapProfiler.reportHeapSnapshotProgress", (message:
      InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event:
        "HeapProfiler.reportHeapSnapshotProgress", listener: (message:
        InspectorNotification<ReportHeapSnapshotProgressEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.reportHeapSnapshotProgress"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReportHeapSnapshotProgressEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_18'
    name: 'prependOnceListener("HeapProfiler.resetProfiles", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "HeapProfiler.resetProfiles",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"HeapProfiler.resetProfiles"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_1'
    name: >-
      prependOnceListener("inspectorNotification", (message:
      InspectorNotification<__type>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Emitted when any notification from the V8 Inspector is received.
    syntax:
      content: >-
        function prependOnceListener(event: "inspectorNotification", listener:
        (message: InspectorNotification<__type>) => void)
      parameters:
        - id: event
          type:
            - '"inspectorNotification"'
          description: ''
        - id: listener
          type:
            - '(message: InspectorNotification<__type>) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_27'
    name: 'prependOnceListener("NodeRuntime.waitingForDisconnect", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      This event is fired instead of `Runtime.executionContextDestroyed` when
      enabled.
      It is fired when the Node process finished all code execution and is
      waiting for all frontends to disconnect.
    syntax:
      content: >-
        function prependOnceListener(event: "NodeRuntime.waitingForDisconnect",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"NodeRuntime.waitingForDisconnect"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_22'
    name: >-
      prependOnceListener("NodeTracing.dataCollected", (message:
      InspectorNotification<DataCollectedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Contains an bucket of collected trace events.
    syntax:
      content: >-
        function prependOnceListener(event: "NodeTracing.dataCollected",
        listener: (message: InspectorNotification<DataCollectedEventDataType>)
        => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.dataCollected"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DataCollectedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_23'
    name: 'prependOnceListener("NodeTracing.tracingComplete", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Signals that tracing is stopped and there is no trace buffers pending
      flush, all data were

      delivered via dataCollected events.
    syntax:
      content: >-
        function prependOnceListener(event: "NodeTracing.tracingComplete",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"NodeTracing.tracingComplete"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_24'
    name: >-
      prependOnceListener("NodeWorker.attachedToWorker", (message:
      InspectorNotification<AttachedToWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when attached to a worker.
    syntax:
      content: >-
        function prependOnceListener(event: "NodeWorker.attachedToWorker",
        listener: (message:
        InspectorNotification<AttachedToWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.attachedToWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<AttachedToWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_25'
    name: >-
      prependOnceListener("NodeWorker.detachedFromWorker", (message:
      InspectorNotification<DetachedFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when detached from the worker.
    syntax:
      content: >-
        function prependOnceListener(event: "NodeWorker.detachedFromWorker",
        listener: (message:
        InspectorNotification<DetachedFromWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.detachedFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<DetachedFromWorkerEventDataType>)
              => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_26'
    name: >-
      prependOnceListener("NodeWorker.receivedMessageFromWorker", (message:
      InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Notifies about a new protocol message received from the session
      (session ID is provided in attachedToWorker notification).
    syntax:
      content: >-
        function prependOnceListener(event:
        "NodeWorker.receivedMessageFromWorker", listener: (message:
        InspectorNotification<ReceivedMessageFromWorkerEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"NodeWorker.receivedMessageFromWorker"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ReceivedMessageFromWorkerEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_16'
    name: >-
      prependOnceListener("Profiler.consoleProfileFinished", (message:
      InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: "Profiler.consoleProfileFinished",
        listener: (message:
        InspectorNotification<ConsoleProfileFinishedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileFinished"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileFinishedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_15'
    name: >-
      prependOnceListener("Profiler.consoleProfileStarted", (message:
      InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Sent when new profile recording is started using console.profile() call.
    syntax:
      content: >-
        function prependOnceListener(event: "Profiler.consoleProfileStarted",
        listener: (message:
        InspectorNotification<ConsoleProfileStartedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Profiler.consoleProfileStarted"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ConsoleProfileStartedEventDataType>) => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_7'
    name: >-
      prependOnceListener("Runtime.consoleAPICalled", (message:
      InspectorNotification<ConsoleAPICalledEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when console API was called.
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.consoleAPICalled",
        listener: (message:
        InspectorNotification<ConsoleAPICalledEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.consoleAPICalled"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ConsoleAPICalledEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_6'
    name: >-
      prependOnceListener("Runtime.exceptionRevoked", (message:
      InspectorNotification<ExceptionRevokedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when unhandled exception was revoked.
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.exceptionRevoked",
        listener: (message:
        InspectorNotification<ExceptionRevokedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionRevoked"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionRevokedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_5'
    name: >-
      prependOnceListener("Runtime.exceptionThrown", (message:
      InspectorNotification<ExceptionThrownEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when exception was thrown and unhandled.
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.exceptionThrown", listener:
        (message: InspectorNotification<ExceptionThrownEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.exceptionThrown"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<ExceptionThrownEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_2'
    name: >-
      prependOnceListener("Runtime.executionContextCreated", (message:
      InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when new execution context is created.
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.executionContextCreated",
        listener: (message:
        InspectorNotification<ExecutionContextCreatedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextCreated"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextCreatedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_3'
    name: >-
      prependOnceListener("Runtime.executionContextDestroyed", (message:
      InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when execution context is destroyed.
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.executionContextDestroyed",
        listener: (message:
        InspectorNotification<ExecutionContextDestroyedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextDestroyed"'
          description: ''
        - id: listener
          type:
            - >-
              (message:
              InspectorNotification<ExecutionContextDestroyedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_4'
    name: 'prependOnceListener("Runtime.executionContextsCleared", () => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Issued when all executionContexts were cleared in browser
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.executionContextsCleared",
        listener: () => void)
      parameters:
        - id: event
          type:
            - '"Runtime.executionContextsCleared"'
          description: ''
        - id: listener
          type:
            - () => void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener_8'
    name: >-
      prependOnceListener("Runtime.inspectRequested", (message:
      InspectorNotification<InspectRequestedEventDataType>) => void)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Issued when object should be inspected (for example, as a result of
      inspect() command line API call).
    syntax:
      content: >-
        function prependOnceListener(event: "Runtime.inspectRequested",
        listener: (message:
        InspectorNotification<InspectRequestedEventDataType>) => void)
      parameters:
        - id: event
          type:
            - '"Runtime.inspectRequested"'
          description: ''
        - id: listener
          type:
            - >-
              (message: InspectorNotification<InspectRequestedEventDataType>) =>
              void
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.prependOnceListener'
    name: 'prependOnceListener(string, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function prependOnceListener(event: string, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type:
            - string
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.rawListeners'
    name: rawListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function rawListeners(event: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
      return:
        type:
          - 'Function[]'
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.removeAllListeners'
    name: removeAllListeners(string | symbol)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
          optional: true
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.removeListener'
    name: 'removeListener(string | symbol, (args: any[]) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type:
            - string | symbol
          description: ''
        - id: listener
          type:
            - '(args: any[]) => void'
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.constructor'
    name: Session()
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      Create a new instance of the inspector.Session class.

      The inspector session needs to be connected through session.connect()
      before the messages can be dispatched to the inspector backend.
    syntax:
      content: new Session()
      parameters: []
    package: '@azure/abort-controller'
  - uid: '@azure/abort-controller.inspector.Session.setMaxListeners'
    name: setMaxListeners(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type:
            - number
          description: ''
      return:
        type:
          - this
        description: ''
    package: '@azure/abort-controller'
references:
  - uid: '@azure/abort-controller.inspector.Console.ConsoleMessage'
    name: ConsoleMessage
    spec.typeScript:
      - name: ConsoleMessage
        fullName: ConsoleMessage
        uid: '@azure/abort-controller.inspector.Console.ConsoleMessage'
  - uid: '@azure/abort-controller.inspector.Runtime.ScriptId'
    name: ScriptId
    spec.typeScript:
      - name: ScriptId
        fullName: ScriptId
        uid: '@azure/abort-controller.inspector.Runtime.ScriptId'
  - uid: '@azure/abort-controller.inspector.Debugger.BreakpointId'
    name: BreakpointId
    spec.typeScript:
      - name: BreakpointId
        fullName: BreakpointId
        uid: '@azure/abort-controller.inspector.Debugger.BreakpointId'
  - uid: '@azure/abort-controller.inspector.Debugger.Location'
    name: Location
    spec.typeScript:
      - name: Location
        fullName: Location
        uid: '@azure/abort-controller.inspector.Debugger.Location'
  - uid: '@azure/abort-controller.inspector.Debugger.CallFrameId'
    name: CallFrameId
    spec.typeScript:
      - name: CallFrameId
        fullName: CallFrameId
        uid: '@azure/abort-controller.inspector.Debugger.CallFrameId'
  - uid: '@azure/abort-controller.inspector.Runtime.RemoteObject'
    name: RemoteObject
    spec.typeScript:
      - name: RemoteObject
        fullName: RemoteObject
        uid: '@azure/abort-controller.inspector.Runtime.RemoteObject'
  - uid: '@azure/abort-controller.inspector.Debugger.Scope[]'
    name: 'Scope[]'
    spec.typeScript:
      - name: Scope
        fullName: Scope
        uid: '@azure/abort-controller.inspector.Debugger.Scope'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.UniqueDebuggerId'
    name: UniqueDebuggerId
    spec.typeScript:
      - name: UniqueDebuggerId
        fullName: UniqueDebuggerId
        uid: '@azure/abort-controller.inspector.Runtime.UniqueDebuggerId'
  - uid: '@azure/abort-controller.inspector.Runtime.ExceptionDetails'
    name: ExceptionDetails
    spec.typeScript:
      - name: ExceptionDetails
        fullName: ExceptionDetails
        uid: '@azure/abort-controller.inspector.Runtime.ExceptionDetails'
  - uid: '@azure/abort-controller.inspector.Debugger.BreakLocation[]'
    name: 'BreakLocation[]'
    spec.typeScript:
      - name: BreakLocation
        fullName: BreakLocation
        uid: '@azure/abort-controller.inspector.Debugger.BreakLocation'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.StackTraceId'
    name: StackTraceId
    spec.typeScript:
      - name: StackTraceId
        fullName: StackTraceId
        uid: '@azure/abort-controller.inspector.Runtime.StackTraceId'
  - uid: '@azure/abort-controller.inspector.Runtime.StackTrace'
    name: StackTrace
    spec.typeScript:
      - name: StackTrace
        fullName: StackTrace
        uid: '@azure/abort-controller.inspector.Runtime.StackTrace'
  - uid: '@azure/abort-controller.inspector.Debugger.CallFrame[]'
    name: 'CallFrame[]'
    spec.typeScript:
      - name: CallFrame
        fullName: CallFrame
        uid: '@azure/abort-controller.inspector.Debugger.CallFrame'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.ExecutionContextId'
    name: ExecutionContextId
    spec.typeScript:
      - name: ExecutionContextId
        fullName: ExecutionContextId
        uid: '@azure/abort-controller.inspector.Runtime.ExecutionContextId'
  - uid: '@azure/abort-controller.inspector.Debugger.SearchMatch[]'
    name: 'SearchMatch[]'
    spec.typeScript:
      - name: SearchMatch
        fullName: SearchMatch
        uid: '@azure/abort-controller.inspector.Debugger.SearchMatch'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Debugger.ScriptPosition[]'
    name: 'ScriptPosition[]'
    spec.typeScript:
      - name: ScriptPosition
        fullName: ScriptPosition
        uid: '@azure/abort-controller.inspector.Debugger.ScriptPosition'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Debugger.Location[]'
    name: 'Location[]'
    spec.typeScript:
      - name: Location
        fullName: Location
        uid: '@azure/abort-controller.inspector.Debugger.Location'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.CallArgument'
    name: CallArgument
    spec.typeScript:
      - name: CallArgument
        fullName: CallArgument
        uid: '@azure/abort-controller.inspector.Runtime.CallArgument'
  - uid: '@azure/abort-controller.inspector.HeapProfiler.HeapSnapshotObjectId'
    name: HeapSnapshotObjectId
    spec.typeScript:
      - name: HeapSnapshotObjectId
        fullName: HeapSnapshotObjectId
        uid: '@azure/abort-controller.inspector.HeapProfiler.HeapSnapshotObjectId'
  - uid: '@azure/abort-controller.inspector.Runtime.RemoteObjectId'
    name: RemoteObjectId
    spec.typeScript:
      - name: RemoteObjectId
        fullName: RemoteObjectId
        uid: '@azure/abort-controller.inspector.Runtime.RemoteObjectId'
  - uid: '@azure/abort-controller.inspector.HeapProfiler.SamplingHeapProfile'
    name: SamplingHeapProfile
    spec.typeScript:
      - name: SamplingHeapProfile
        fullName: SamplingHeapProfile
        uid: '@azure/abort-controller.inspector.HeapProfiler.SamplingHeapProfile'
  - uid: '@azure/abort-controller.inspector.HeapProfiler.SamplingHeapProfileNode'
    name: SamplingHeapProfileNode
    spec.typeScript:
      - name: SamplingHeapProfileNode
        fullName: SamplingHeapProfileNode
        uid: '@azure/abort-controller.inspector.HeapProfiler.SamplingHeapProfileNode'
  - uid: '@azure/abort-controller.inspector.Runtime.CallFrame'
    name: CallFrame
    spec.typeScript:
      - name: CallFrame
        fullName: CallFrame
        uid: '@azure/abort-controller.inspector.Runtime.CallFrame'
  - uid: '@azure/abort-controller.inspector.HeapProfiler.SamplingHeapProfileNode[]'
    name: 'SamplingHeapProfileNode[]'
    spec.typeScript:
      - name: SamplingHeapProfileNode
        fullName: SamplingHeapProfileNode
        uid: '@azure/abort-controller.inspector.HeapProfiler.SamplingHeapProfileNode'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.NodeTracing.TraceConfig'
    name: TraceConfig
    spec.typeScript:
      - name: TraceConfig
        fullName: TraceConfig
        uid: '@azure/abort-controller.inspector.NodeTracing.TraceConfig'
  - uid: '@azure/abort-controller.inspector.NodeWorker.SessionID'
    name: SessionID
    spec.typeScript:
      - name: SessionID
        fullName: SessionID
        uid: '@azure/abort-controller.inspector.NodeWorker.SessionID'
  - uid: '@azure/abort-controller.inspector.NodeWorker.WorkerInfo'
    name: WorkerInfo
    spec.typeScript:
      - name: WorkerInfo
        fullName: WorkerInfo
        uid: '@azure/abort-controller.inspector.NodeWorker.WorkerInfo'
  - uid: '@azure/abort-controller.inspector.NodeWorker.WorkerID'
    name: WorkerID
    spec.typeScript:
      - name: WorkerID
        fullName: WorkerID
        uid: '@azure/abort-controller.inspector.NodeWorker.WorkerID'
  - uid: '@azure/abort-controller.inspector.Profiler.Profile'
    name: Profile
    spec.typeScript:
      - name: Profile
        fullName: Profile
        uid: '@azure/abort-controller.inspector.Profiler.Profile'
  - uid: '@azure/abort-controller.inspector.Profiler.CoverageRange[]'
    name: 'CoverageRange[]'
    spec.typeScript:
      - name: CoverageRange
        fullName: CoverageRange
        uid: '@azure/abort-controller.inspector.Profiler.CoverageRange'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.ScriptCoverage[]'
    name: 'ScriptCoverage[]'
    spec.typeScript:
      - name: ScriptCoverage
        fullName: ScriptCoverage
        uid: '@azure/abort-controller.inspector.Profiler.ScriptCoverage'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.ProfileNode[]'
    name: 'ProfileNode[]'
    spec.typeScript:
      - name: ProfileNode
        fullName: ProfileNode
        uid: '@azure/abort-controller.inspector.Profiler.ProfileNode'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.PositionTickInfo[]'
    name: 'PositionTickInfo[]'
    spec.typeScript:
      - name: PositionTickInfo
        fullName: PositionTickInfo
        uid: '@azure/abort-controller.inspector.Profiler.PositionTickInfo'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.FunctionCoverage[]'
    name: 'FunctionCoverage[]'
    spec.typeScript:
      - name: FunctionCoverage
        fullName: FunctionCoverage
        uid: '@azure/abort-controller.inspector.Profiler.FunctionCoverage'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.TypeProfileEntry[]'
    name: 'TypeProfileEntry[]'
    spec.typeScript:
      - name: TypeProfileEntry
        fullName: TypeProfileEntry
        uid: '@azure/abort-controller.inspector.Profiler.TypeProfileEntry'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.ScriptTypeProfile[]'
    name: 'ScriptTypeProfile[]'
    spec.typeScript:
      - name: ScriptTypeProfile
        fullName: ScriptTypeProfile
        uid: '@azure/abort-controller.inspector.Profiler.ScriptTypeProfile'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Profiler.TypeObject[]'
    name: 'TypeObject[]'
    spec.typeScript:
      - name: TypeObject
        fullName: TypeObject
        uid: '@azure/abort-controller.inspector.Profiler.TypeObject'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.UnserializableValue'
    name: UnserializableValue
    spec.typeScript:
      - name: UnserializableValue
        fullName: UnserializableValue
        uid: '@azure/abort-controller.inspector.Runtime.UnserializableValue'
  - uid: '@azure/abort-controller.inspector.Runtime.CallArgument[]'
    name: 'CallArgument[]'
    spec.typeScript:
      - name: CallArgument
        fullName: CallArgument
        uid: '@azure/abort-controller.inspector.Runtime.CallArgument'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.RemoteObject[]'
    name: 'RemoteObject[]'
    spec.typeScript:
      - name: RemoteObject
        fullName: RemoteObject
        uid: '@azure/abort-controller.inspector.Runtime.RemoteObject'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.Timestamp'
    name: Timestamp
    spec.typeScript:
      - name: Timestamp
        fullName: Timestamp
        uid: '@azure/abort-controller.inspector.Runtime.Timestamp'
  - uid: '@azure/abort-controller.inspector.Runtime.ObjectPreview'
    name: ObjectPreview
    spec.typeScript:
      - name: ObjectPreview
        fullName: ObjectPreview
        uid: '@azure/abort-controller.inspector.Runtime.ObjectPreview'
  - uid: '@azure/abort-controller.inspector.Runtime.ExecutionContextDescription'
    name: ExecutionContextDescription
    spec.typeScript:
      - name: ExecutionContextDescription
        fullName: ExecutionContextDescription
        uid: '@azure/abort-controller.inspector.Runtime.ExecutionContextDescription'
  - uid: '@azure/abort-controller.inspector.Runtime.InternalPropertyDescriptor[]'
    name: 'InternalPropertyDescriptor[]'
    spec.typeScript:
      - name: InternalPropertyDescriptor
        fullName: InternalPropertyDescriptor
        uid: '@azure/abort-controller.inspector.Runtime.InternalPropertyDescriptor'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.PropertyDescriptor[]'
    name: 'PropertyDescriptor[]'
    spec.typeScript:
      - name: PropertyDescriptor
        fullName: PropertyDescriptor
        uid: '@azure/abort-controller.inspector.Runtime.PropertyDescriptor'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.EntryPreview[]'
    name: 'EntryPreview[]'
    spec.typeScript:
      - name: EntryPreview
        fullName: EntryPreview
        uid: '@azure/abort-controller.inspector.Runtime.EntryPreview'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.PropertyPreview[]'
    name: 'PropertyPreview[]'
    spec.typeScript:
      - name: PropertyPreview
        fullName: PropertyPreview
        uid: '@azure/abort-controller.inspector.Runtime.PropertyPreview'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Runtime.CustomPreview'
    name: CustomPreview
    spec.typeScript:
      - name: CustomPreview
        fullName: CustomPreview
        uid: '@azure/abort-controller.inspector.Runtime.CustomPreview'
  - uid: '@azure/abort-controller.inspector.Runtime.CallFrame[]'
    name: 'CallFrame[]'
    spec.typeScript:
      - name: CallFrame
        fullName: CallFrame
        uid: '@azure/abort-controller.inspector.Runtime.CallFrame'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.inspector.Schema.Domain[]'
    name: 'Domain[]'
    spec.typeScript:
      - name: Domain
        fullName: Domain
        uid: '@azure/abort-controller.inspector.Schema.Domain'
      - name: '[]'
        fullName: '[]'
  - uid: '@azure/abort-controller.events.EventEmitter.EventEmitter'
    name: EventEmitter
    spec.typeScript:
      - name: EventEmitter
        fullName: EventEmitter
        uid: '@azure/abort-controller.events.EventEmitter.EventEmitter'
  - uid: '@azure/abort-controller.inspector.InspectorNotification<__type>'
    name: InspectorNotification<__type>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <__type>
        fullName: <__type>
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExecutionContextCreatedEventDataType>
    name: ExecutionContextCreatedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ExecutionContextCreatedEventDataType
        fullName: ExecutionContextCreatedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Runtime.ExecutionContextCreatedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExecutionContextDestroyedEventDataType>
    name: ExecutionContextDestroyedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ExecutionContextDestroyedEventDataType
        fullName: ExecutionContextDestroyedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Runtime.ExecutionContextDestroyedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExceptionThrownEventDataType>
    name: ExceptionThrownEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ExceptionThrownEventDataType
        fullName: ExceptionThrownEventDataType
        uid: '@azure/abort-controller.inspector.Runtime.ExceptionThrownEventDataType'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ExceptionRevokedEventDataType>
    name: ExceptionRevokedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ExceptionRevokedEventDataType
        fullName: ExceptionRevokedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Runtime.ExceptionRevokedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.ConsoleAPICalledEventDataType>
    name: ConsoleAPICalledEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ConsoleAPICalledEventDataType
        fullName: ConsoleAPICalledEventDataType
        uid: >-
          @azure/abort-controller.inspector.Runtime.ConsoleAPICalledEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Runtime.InspectRequestedEventDataType>
    name: InspectRequestedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: InspectRequestedEventDataType
        fullName: InspectRequestedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Runtime.InspectRequestedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.ScriptParsedEventDataType>
    name: ScriptParsedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ScriptParsedEventDataType
        fullName: ScriptParsedEventDataType
        uid: '@azure/abort-controller.inspector.Debugger.ScriptParsedEventDataType'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.ScriptFailedToParseEventDataType>
    name: ScriptFailedToParseEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ScriptFailedToParseEventDataType
        fullName: ScriptFailedToParseEventDataType
        uid: >-
          @azure/abort-controller.inspector.Debugger.ScriptFailedToParseEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.BreakpointResolvedEventDataType>
    name: BreakpointResolvedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: BreakpointResolvedEventDataType
        fullName: BreakpointResolvedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Debugger.BreakpointResolvedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Debugger.PausedEventDataType>
    name: PausedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: PausedEventDataType
        fullName: PausedEventDataType
        uid: '@azure/abort-controller.inspector.Debugger.PausedEventDataType'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Console.MessageAddedEventDataType>
    name: MessageAddedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: MessageAddedEventDataType
        fullName: MessageAddedEventDataType
        uid: '@azure/abort-controller.inspector.Console.MessageAddedEventDataType'
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Profiler.ConsoleProfileStartedEventDataType>
    name: ConsoleProfileStartedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ConsoleProfileStartedEventDataType
        fullName: ConsoleProfileStartedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Profiler.ConsoleProfileStartedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.Profiler.ConsoleProfileFinishedEventDataType>
    name: ConsoleProfileFinishedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ConsoleProfileFinishedEventDataType
        fullName: ConsoleProfileFinishedEventDataType
        uid: >-
          @azure/abort-controller.inspector.Profiler.ConsoleProfileFinishedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.AddHeapSnapshotChunkEventDataType>
    name: AddHeapSnapshotChunkEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: AddHeapSnapshotChunkEventDataType
        fullName: AddHeapSnapshotChunkEventDataType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.AddHeapSnapshotChunkEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.ReportHeapSnapshotProgressEventDataType>
    name: ReportHeapSnapshotProgressEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ReportHeapSnapshotProgressEventDataType
        fullName: ReportHeapSnapshotProgressEventDataType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.ReportHeapSnapshotProgressEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.LastSeenObjectIdEventDataType>
    name: LastSeenObjectIdEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: LastSeenObjectIdEventDataType
        fullName: LastSeenObjectIdEventDataType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.LastSeenObjectIdEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.HeapProfiler.HeapStatsUpdateEventDataType>
    name: HeapStatsUpdateEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: HeapStatsUpdateEventDataType
        fullName: HeapStatsUpdateEventDataType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.HeapStatsUpdateEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeTracing.DataCollectedEventDataType>
    name: DataCollectedEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: DataCollectedEventDataType
        fullName: DataCollectedEventDataType
        uid: >-
          @azure/abort-controller.inspector.NodeTracing.DataCollectedEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeWorker.AttachedToWorkerEventDataType>
    name: AttachedToWorkerEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: AttachedToWorkerEventDataType
        fullName: AttachedToWorkerEventDataType
        uid: >-
          @azure/abort-controller.inspector.NodeWorker.AttachedToWorkerEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeWorker.DetachedFromWorkerEventDataType>
    name: DetachedFromWorkerEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: DetachedFromWorkerEventDataType
        fullName: DetachedFromWorkerEventDataType
        uid: >-
          @azure/abort-controller.inspector.NodeWorker.DetachedFromWorkerEventDataType
      - name: '>'
        fullName: '>'
  - uid: >-
      @azure/abort-controller.inspector.InspectorNotification<@azure/abort-controller.inspector.NodeWorker.ReceivedMessageFromWorkerEventDataType>
    name: ReceivedMessageFromWorkerEventDataType>
    spec.typeScript:
      - name: InspectorNotification
        fullName: InspectorNotification
        uid: '@azure/abort-controller.inspector.InspectorNotification'
      - name: <
        fullName: <
      - name: ReceivedMessageFromWorkerEventDataType
        fullName: ReceivedMessageFromWorkerEventDataType
        uid: >-
          @azure/abort-controller.inspector.NodeWorker.ReceivedMessageFromWorkerEventDataType
      - name: '>'
        fullName: '>'
  - uid: '@azure/abort-controller.inspector.Runtime.EvaluateParameterType'
    name: EvaluateParameterType
    spec.typeScript:
      - name: EvaluateParameterType
        fullName: EvaluateParameterType
        uid: '@azure/abort-controller.inspector.Runtime.EvaluateParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.AwaitPromiseParameterType'
    name: AwaitPromiseParameterType
    spec.typeScript:
      - name: AwaitPromiseParameterType
        fullName: AwaitPromiseParameterType
        uid: '@azure/abort-controller.inspector.Runtime.AwaitPromiseParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.CallFunctionOnParameterType'
    name: CallFunctionOnParameterType
    spec.typeScript:
      - name: CallFunctionOnParameterType
        fullName: CallFunctionOnParameterType
        uid: '@azure/abort-controller.inspector.Runtime.CallFunctionOnParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.GetPropertiesParameterType'
    name: GetPropertiesParameterType
    spec.typeScript:
      - name: GetPropertiesParameterType
        fullName: GetPropertiesParameterType
        uid: '@azure/abort-controller.inspector.Runtime.GetPropertiesParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.ReleaseObjectParameterType'
    name: ReleaseObjectParameterType
    spec.typeScript:
      - name: ReleaseObjectParameterType
        fullName: ReleaseObjectParameterType
        uid: '@azure/abort-controller.inspector.Runtime.ReleaseObjectParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.ReleaseObjectGroupParameterType'
    name: ReleaseObjectGroupParameterType
    spec.typeScript:
      - name: ReleaseObjectGroupParameterType
        fullName: ReleaseObjectGroupParameterType
        uid: >-
          @azure/abort-controller.inspector.Runtime.ReleaseObjectGroupParameterType
  - uid: >-
      @azure/abort-controller.inspector.Runtime.SetCustomObjectFormatterEnabledParameterType
    name: SetCustomObjectFormatterEnabledParameterType
    spec.typeScript:
      - name: SetCustomObjectFormatterEnabledParameterType
        fullName: SetCustomObjectFormatterEnabledParameterType
        uid: >-
          @azure/abort-controller.inspector.Runtime.SetCustomObjectFormatterEnabledParameterType
  - uid: '@azure/abort-controller.inspector.Runtime.CompileScriptParameterType'
    name: CompileScriptParameterType
    spec.typeScript:
      - name: CompileScriptParameterType
        fullName: CompileScriptParameterType
        uid: '@azure/abort-controller.inspector.Runtime.CompileScriptParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.RunScriptParameterType'
    name: RunScriptParameterType
    spec.typeScript:
      - name: RunScriptParameterType
        fullName: RunScriptParameterType
        uid: '@azure/abort-controller.inspector.Runtime.RunScriptParameterType'
  - uid: '@azure/abort-controller.inspector.Runtime.QueryObjectsParameterType'
    name: QueryObjectsParameterType
    spec.typeScript:
      - name: QueryObjectsParameterType
        fullName: QueryObjectsParameterType
        uid: '@azure/abort-controller.inspector.Runtime.QueryObjectsParameterType'
  - uid: >-
      @azure/abort-controller.inspector.Runtime.GlobalLexicalScopeNamesParameterType
    name: GlobalLexicalScopeNamesParameterType
    spec.typeScript:
      - name: GlobalLexicalScopeNamesParameterType
        fullName: GlobalLexicalScopeNamesParameterType
        uid: >-
          @azure/abort-controller.inspector.Runtime.GlobalLexicalScopeNamesParameterType
  - uid: >-
      @azure/abort-controller.inspector.Debugger.SetBreakpointsActiveParameterType
    name: SetBreakpointsActiveParameterType
    spec.typeScript:
      - name: SetBreakpointsActiveParameterType
        fullName: SetBreakpointsActiveParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetBreakpointsActiveParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.SetSkipAllPausesParameterType'
    name: SetSkipAllPausesParameterType
    spec.typeScript:
      - name: SetSkipAllPausesParameterType
        fullName: SetSkipAllPausesParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetSkipAllPausesParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.SetBreakpointByUrlParameterType'
    name: SetBreakpointByUrlParameterType
    spec.typeScript:
      - name: SetBreakpointByUrlParameterType
        fullName: SetBreakpointByUrlParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetBreakpointByUrlParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.SetBreakpointParameterType'
    name: SetBreakpointParameterType
    spec.typeScript:
      - name: SetBreakpointParameterType
        fullName: SetBreakpointParameterType
        uid: '@azure/abort-controller.inspector.Debugger.SetBreakpointParameterType'
  - uid: '@azure/abort-controller.inspector.Debugger.RemoveBreakpointParameterType'
    name: RemoveBreakpointParameterType
    spec.typeScript:
      - name: RemoveBreakpointParameterType
        fullName: RemoveBreakpointParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.RemoveBreakpointParameterType
  - uid: >-
      @azure/abort-controller.inspector.Debugger.GetPossibleBreakpointsParameterType
    name: GetPossibleBreakpointsParameterType
    spec.typeScript:
      - name: GetPossibleBreakpointsParameterType
        fullName: GetPossibleBreakpointsParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.GetPossibleBreakpointsParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.ContinueToLocationParameterType'
    name: ContinueToLocationParameterType
    spec.typeScript:
      - name: ContinueToLocationParameterType
        fullName: ContinueToLocationParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.ContinueToLocationParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.PauseOnAsyncCallParameterType'
    name: PauseOnAsyncCallParameterType
    spec.typeScript:
      - name: PauseOnAsyncCallParameterType
        fullName: PauseOnAsyncCallParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.PauseOnAsyncCallParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.StepIntoParameterType'
    name: StepIntoParameterType
    spec.typeScript:
      - name: StepIntoParameterType
        fullName: StepIntoParameterType
        uid: '@azure/abort-controller.inspector.Debugger.StepIntoParameterType'
  - uid: '@azure/abort-controller.inspector.Debugger.GetStackTraceParameterType'
    name: GetStackTraceParameterType
    spec.typeScript:
      - name: GetStackTraceParameterType
        fullName: GetStackTraceParameterType
        uid: '@azure/abort-controller.inspector.Debugger.GetStackTraceParameterType'
  - uid: '@azure/abort-controller.inspector.Debugger.SearchInContentParameterType'
    name: SearchInContentParameterType
    spec.typeScript:
      - name: SearchInContentParameterType
        fullName: SearchInContentParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SearchInContentParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.SetScriptSourceParameterType'
    name: SetScriptSourceParameterType
    spec.typeScript:
      - name: SetScriptSourceParameterType
        fullName: SetScriptSourceParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetScriptSourceParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.RestartFrameParameterType'
    name: RestartFrameParameterType
    spec.typeScript:
      - name: RestartFrameParameterType
        fullName: RestartFrameParameterType
        uid: '@azure/abort-controller.inspector.Debugger.RestartFrameParameterType'
  - uid: '@azure/abort-controller.inspector.Debugger.GetScriptSourceParameterType'
    name: GetScriptSourceParameterType
    spec.typeScript:
      - name: GetScriptSourceParameterType
        fullName: GetScriptSourceParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.GetScriptSourceParameterType
  - uid: >-
      @azure/abort-controller.inspector.Debugger.SetPauseOnExceptionsParameterType
    name: SetPauseOnExceptionsParameterType
    spec.typeScript:
      - name: SetPauseOnExceptionsParameterType
        fullName: SetPauseOnExceptionsParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetPauseOnExceptionsParameterType
  - uid: >-
      @azure/abort-controller.inspector.Debugger.EvaluateOnCallFrameParameterType
    name: EvaluateOnCallFrameParameterType
    spec.typeScript:
      - name: EvaluateOnCallFrameParameterType
        fullName: EvaluateOnCallFrameParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.EvaluateOnCallFrameParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.SetVariableValueParameterType'
    name: SetVariableValueParameterType
    spec.typeScript:
      - name: SetVariableValueParameterType
        fullName: SetVariableValueParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetVariableValueParameterType
  - uid: '@azure/abort-controller.inspector.Debugger.SetReturnValueParameterType'
    name: SetReturnValueParameterType
    spec.typeScript:
      - name: SetReturnValueParameterType
        fullName: SetReturnValueParameterType
        uid: '@azure/abort-controller.inspector.Debugger.SetReturnValueParameterType'
  - uid: >-
      @azure/abort-controller.inspector.Debugger.SetAsyncCallStackDepthParameterType
    name: SetAsyncCallStackDepthParameterType
    spec.typeScript:
      - name: SetAsyncCallStackDepthParameterType
        fullName: SetAsyncCallStackDepthParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetAsyncCallStackDepthParameterType
  - uid: >-
      @azure/abort-controller.inspector.Debugger.SetBlackboxPatternsParameterType
    name: SetBlackboxPatternsParameterType
    spec.typeScript:
      - name: SetBlackboxPatternsParameterType
        fullName: SetBlackboxPatternsParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetBlackboxPatternsParameterType
  - uid: >-
      @azure/abort-controller.inspector.Debugger.SetBlackboxedRangesParameterType
    name: SetBlackboxedRangesParameterType
    spec.typeScript:
      - name: SetBlackboxedRangesParameterType
        fullName: SetBlackboxedRangesParameterType
        uid: >-
          @azure/abort-controller.inspector.Debugger.SetBlackboxedRangesParameterType
  - uid: >-
      @azure/abort-controller.inspector.Profiler.SetSamplingIntervalParameterType
    name: SetSamplingIntervalParameterType
    spec.typeScript:
      - name: SetSamplingIntervalParameterType
        fullName: SetSamplingIntervalParameterType
        uid: >-
          @azure/abort-controller.inspector.Profiler.SetSamplingIntervalParameterType
  - uid: >-
      @azure/abort-controller.inspector.Profiler.StartPreciseCoverageParameterType
    name: StartPreciseCoverageParameterType
    spec.typeScript:
      - name: StartPreciseCoverageParameterType
        fullName: StartPreciseCoverageParameterType
        uid: >-
          @azure/abort-controller.inspector.Profiler.StartPreciseCoverageParameterType
  - uid: >-
      @azure/abort-controller.inspector.HeapProfiler.StartTrackingHeapObjectsParameterType
    name: StartTrackingHeapObjectsParameterType
    spec.typeScript:
      - name: StartTrackingHeapObjectsParameterType
        fullName: StartTrackingHeapObjectsParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.StartTrackingHeapObjectsParameterType
  - uid: >-
      @azure/abort-controller.inspector.HeapProfiler.StopTrackingHeapObjectsParameterType
    name: StopTrackingHeapObjectsParameterType
    spec.typeScript:
      - name: StopTrackingHeapObjectsParameterType
        fullName: StopTrackingHeapObjectsParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.StopTrackingHeapObjectsParameterType
  - uid: >-
      @azure/abort-controller.inspector.HeapProfiler.TakeHeapSnapshotParameterType
    name: TakeHeapSnapshotParameterType
    spec.typeScript:
      - name: TakeHeapSnapshotParameterType
        fullName: TakeHeapSnapshotParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.TakeHeapSnapshotParameterType
  - uid: >-
      @azure/abort-controller.inspector.HeapProfiler.GetObjectByHeapObjectIdParameterType
    name: GetObjectByHeapObjectIdParameterType
    spec.typeScript:
      - name: GetObjectByHeapObjectIdParameterType
        fullName: GetObjectByHeapObjectIdParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.GetObjectByHeapObjectIdParameterType
  - uid: >-
      @azure/abort-controller.inspector.HeapProfiler.AddInspectedHeapObjectParameterType
    name: AddInspectedHeapObjectParameterType
    spec.typeScript:
      - name: AddInspectedHeapObjectParameterType
        fullName: AddInspectedHeapObjectParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.AddInspectedHeapObjectParameterType
  - uid: >-
      @azure/abort-controller.inspector.HeapProfiler.GetHeapObjectIdParameterType
    name: GetHeapObjectIdParameterType
    spec.typeScript:
      - name: GetHeapObjectIdParameterType
        fullName: GetHeapObjectIdParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.GetHeapObjectIdParameterType
  - uid: '@azure/abort-controller.inspector.HeapProfiler.StartSamplingParameterType'
    name: StartSamplingParameterType
    spec.typeScript:
      - name: StartSamplingParameterType
        fullName: StartSamplingParameterType
        uid: >-
          @azure/abort-controller.inspector.HeapProfiler.StartSamplingParameterType
  - uid: '@azure/abort-controller.inspector.NodeTracing.StartParameterType'
    name: StartParameterType
    spec.typeScript:
      - name: StartParameterType
        fullName: StartParameterType
        uid: '@azure/abort-controller.inspector.NodeTracing.StartParameterType'
  - uid: >-
      @azure/abort-controller.inspector.NodeWorker.SendMessageToWorkerParameterType
    name: SendMessageToWorkerParameterType
    spec.typeScript:
      - name: SendMessageToWorkerParameterType
        fullName: SendMessageToWorkerParameterType
        uid: >-
          @azure/abort-controller.inspector.NodeWorker.SendMessageToWorkerParameterType
  - uid: '@azure/abort-controller.inspector.NodeWorker.EnableParameterType'
    name: EnableParameterType
    spec.typeScript:
      - name: EnableParameterType
        fullName: EnableParameterType
        uid: '@azure/abort-controller.inspector.NodeWorker.EnableParameterType'
  - uid: '@azure/abort-controller.inspector.NodeWorker.DetachParameterType'
    name: DetachParameterType
    spec.typeScript:
      - name: DetachParameterType
        fullName: DetachParameterType
        uid: '@azure/abort-controller.inspector.NodeWorker.DetachParameterType'
  - uid: >-
      @azure/abort-controller.inspector.NodeRuntime.NotifyWhenWaitingForDisconnectParameterType
    name: NotifyWhenWaitingForDisconnectParameterType
    spec.typeScript:
      - name: NotifyWhenWaitingForDisconnectParameterType
        fullName: NotifyWhenWaitingForDisconnectParameterType
        uid: >-
          @azure/abort-controller.inspector.NodeRuntime.NotifyWhenWaitingForDisconnectParameterType
